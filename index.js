/******/ var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Button/Button.css":
/*!******************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/preshape/Button/Button.css ***!
  \******************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/* stylelint-disable no-descending-specificity */
.Button {
  --Button-backgroundColorActive: var(--color-accent-shade-2);
  --Button-backgroundColorHover: var(--color-accent-shade-1);
  --Button-borderColorActive: var(--color-accent-shade-5);
  --Button-borderColorHover: var(--color-accent-shade-3);
  --Button-textColor: var(--color-text-shade-1);
  --Button-textColorActive: var(--color-accent-shade-5);
  --Button-textColorHover: var(--color-accent-shade-3);

  border-color: var(--Button-borderColor, var(--Button-textColor));
  background-color: var(--Button-backgroundColor);
  color: var(--Button-textColor);
  text-decoration: none;
  transition-property: border-color, background-color, color, opacity;
  transition-duration: var(--transition-duration--fast);
  transition-timing-function: var(--transition-timing-function);
  appearance: none;

  &:focus {
    outline: 0;
  }

  &[disabled],
  &[disabled]:hover,
  &[disabled]:active,
  &[disabled].Button--active {
    opacity: 0.5;
    cursor: default;
  }

  &:hover:not([disabled]) {
    cursor: pointer;
    border-color: var(--Button-borderColorHover, var(--Button-borderColor));
    background-color: var(--Button-backgroundColorHover, var(--Button-backgroundColor));
    color: var(--Button-textColorHover, var(--Button-textColor));
    opacity: 1;
  }

  &.Button--active:not([disabled]),
  &:active:not([disabled]) {
    border-color: var(--Button-borderColorActive, var(--Button-borderColor));
    background-color: var(--Button-backgroundColorActive);
    color: var(--Button-textColorActive, var(--Button-textColor));
  }
}

.Button--primary {
  --Button-backgroundColor: var(--color-text-shade-1);
  --Button-backgroundColorActive: var(--color-accent-shade-5);
  --Button-backgroundColorHover: var(--color-accent-shade-3);
  --Button-borderColor: var(--color-text-shade-1);
  --Button-textColor: var(--color-background-shade-1);
  --Button-textColorActive: var(--color-white);
  --Button-textColorHover: var(--color-white);
}

.Button--accent {
  --Button-backgroundColorActive: var(--color-accent-shade-2);
  --Button-backgroundColorHover: var(--color-accent-shade-1);
  --Button-borderColorActive: var(--color-accent-shade-5);
  --Button-borderColorHover: var(--color-accent-shade-3);
  --Button-textColor: var(--color-accent-shade-4);
  --Button-textColorActive: var(--color-accent-shade-5);
  --Button-textColorHover: var(--color-accent-shade-3);

  &.Button--primary {
    --Button-backgroundColor: var(--color-accent-shade-4);
    --Button-backgroundColorActive: var(--color-accent-shade-5);
    --Button-backgroundColorHover: var(--color-accent-shade-3);
    --Button-borderColor: var(--color-accent-shade-4);
    --Button-textColor: var(--color-white);
    --Button-textColorActive: var(--color-white);
    --Button-textColorHover: var(--color-white);
  }
}

.Button--positive {
  --Button-backgroundColorActive: var(--color-positive-shade-2);
  --Button-backgroundColorHover: var(--color-positive-shade-1);
  --Button-borderColorActive: var(--color-positive-shade-5);
  --Button-borderColorHover: var(--color-positive-shade-3);
  --Button-textColor: var(--color-positive-shade-4);
  --Button-textColorActive: var(--color-positive-shade-5);
  --Button-textColorHover: var(--color-positive-shade-3);

  &.Button--primary {
    --Button-backgroundColor: var(--color-positive-shade-4);
    --Button-backgroundColorActive: var(--color-positive-shade-5);
    --Button-backgroundColorHover: var(--color-positive-shade-3);
    --Button-borderColor: var(--color-positive-shade-4);
    --Button-textColor: var(--color-white);
    --Button-textColorActive: var(--color-white);
    --Button-textColorHover: var(--color-white);
  }
}

.Button--negative {
  --Button-backgroundColorActive: var(--color-negative-shade-2);
  --Button-backgroundColorHover: var(--color-negative-shade-1);
  --Button-borderColorActive: var(--color-negative-shade-5);
  --Button-borderColorHover: var(--color-negative-shade-3);
  --Button-textColor: var(--color-negative-shade-4);
  --Button-textColorActive: var(--color-negative-shade-5);
  --Button-textColorHover: var(--color-negative-shade-3);

  &.Button--primary {
    --Button-backgroundColor: var(--color-negative-shade-4);
    --Button-backgroundColorActive: var(--color-negative-shade-5);
    --Button-backgroundColorHover: var(--color-negative-shade-3);
    --Button-borderColor: var(--color-negative-shade-4);
    --Button-textColor: var(--color-white);
    --Button-textColorActive: var(--color-white);
    --Button-textColorHover: var(--color-white);
  }
}

.Button--tertiary {
  --Button-backgroundColor: transparent;
  --Button-borderColor: transparent;
  --Button-borderColorHover: transparent;
  --Button-borderColorActive: transparent;
}

.Buttons--joined-horizontal > .Button {
  &:not(:first-child) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:not(:last-child) {
    border-right-width: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;

    &.Button--active,
    &:not([disabled]):hover,
    &:not([disabled]):active {
      border-right-width: var(--border-size--x2);

      & + .Button {
        border-left-width: 0;
      }
    }
  }
}

.Buttons--joined-vertical > .Button {
  &:not(:first-child) {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  &:not(:last-child) {
    border-bottom-width: 0;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;

    &.Button--active,
    &:not([disabled]):hover,
    &:not([disabled]):active {
      border-bottom-width: var(--border-size--x2);

      & + .Button {
        border-top-width: 0;
      }
    }
  }
}
`, "",{"version":3,"sources":["webpack://./src/preshape/Button/Button.css"],"names":[],"mappings":"AAAA,gDAAgD;AAChD;EACE,2DAA2D;EAC3D,0DAA0D;EAC1D,uDAAuD;EACvD,sDAAsD;EACtD,6CAA6C;EAC7C,qDAAqD;EACrD,oDAAoD;;EAEpD,gEAAgE;EAChE,+CAA+C;EAC/C,8BAA8B;EAC9B,qBAAqB;EACrB,mEAAmE;EACnE,qDAAqD;EACrD,6DAA6D;EAC7D,gBAAgB;;EAEhB;IACE,UAAU;EACZ;;EAEA;;;;IAIE,YAAY;IACZ,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,uEAAuE;IACvE,mFAAmF;IACnF,4DAA4D;IAC5D,UAAU;EACZ;;EAEA;;IAEE,wEAAwE;IACxE,qDAAqD;IACrD,6DAA6D;EAC/D;AACF;;AAEA;EACE,mDAAmD;EACnD,2DAA2D;EAC3D,0DAA0D;EAC1D,+CAA+C;EAC/C,mDAAmD;EACnD,4CAA4C;EAC5C,2CAA2C;AAC7C;;AAEA;EACE,2DAA2D;EAC3D,0DAA0D;EAC1D,uDAAuD;EACvD,sDAAsD;EACtD,+CAA+C;EAC/C,qDAAqD;EACrD,oDAAoD;;EAEpD;IACE,qDAAqD;IACrD,2DAA2D;IAC3D,0DAA0D;IAC1D,iDAAiD;IACjD,sCAAsC;IACtC,4CAA4C;IAC5C,2CAA2C;EAC7C;AACF;;AAEA;EACE,6DAA6D;EAC7D,4DAA4D;EAC5D,yDAAyD;EACzD,wDAAwD;EACxD,iDAAiD;EACjD,uDAAuD;EACvD,sDAAsD;;EAEtD;IACE,uDAAuD;IACvD,6DAA6D;IAC7D,4DAA4D;IAC5D,mDAAmD;IACnD,sCAAsC;IACtC,4CAA4C;IAC5C,2CAA2C;EAC7C;AACF;;AAEA;EACE,6DAA6D;EAC7D,4DAA4D;EAC5D,yDAAyD;EACzD,wDAAwD;EACxD,iDAAiD;EACjD,uDAAuD;EACvD,sDAAsD;;EAEtD;IACE,uDAAuD;IACvD,6DAA6D;IAC7D,4DAA4D;IAC5D,mDAAmD;IACnD,sCAAsC;IACtC,4CAA4C;IAC5C,2CAA2C;EAC7C;AACF;;AAEA;EACE,qCAAqC;EACrC,iCAAiC;EACjC,sCAAsC;EACtC,uCAAuC;AACzC;;AAEA;EACE;IACE,yBAAyB;IACzB,4BAA4B;EAC9B;;EAEA;IACE,qBAAqB;IACrB,0BAA0B;IAC1B,6BAA6B;;IAE7B;;;MAGE,0CAA0C;;MAE1C;QACE,oBAAoB;MACtB;IACF;EACF;AACF;;AAEA;EACE;IACE,yBAAyB;IACzB,0BAA0B;EAC5B;;EAEA;IACE,sBAAsB;IACtB,4BAA4B;IAC5B,6BAA6B;;IAE7B;;;MAGE,2CAA2C;;MAE3C;QACE,mBAAmB;MACrB;IACF;EACF;AACF","sourcesContent":["/* stylelint-disable no-descending-specificity */\n.Button {\n  --Button-backgroundColorActive: var(--color-accent-shade-2);\n  --Button-backgroundColorHover: var(--color-accent-shade-1);\n  --Button-borderColorActive: var(--color-accent-shade-5);\n  --Button-borderColorHover: var(--color-accent-shade-3);\n  --Button-textColor: var(--color-text-shade-1);\n  --Button-textColorActive: var(--color-accent-shade-5);\n  --Button-textColorHover: var(--color-accent-shade-3);\n\n  border-color: var(--Button-borderColor, var(--Button-textColor));\n  background-color: var(--Button-backgroundColor);\n  color: var(--Button-textColor);\n  text-decoration: none;\n  transition-property: border-color, background-color, color, opacity;\n  transition-duration: var(--transition-duration--fast);\n  transition-timing-function: var(--transition-timing-function);\n  appearance: none;\n\n  &:focus {\n    outline: 0;\n  }\n\n  &[disabled],\n  &[disabled]:hover,\n  &[disabled]:active,\n  &[disabled].Button--active {\n    opacity: 0.5;\n    cursor: default;\n  }\n\n  &:hover:not([disabled]) {\n    cursor: pointer;\n    border-color: var(--Button-borderColorHover, var(--Button-borderColor));\n    background-color: var(--Button-backgroundColorHover, var(--Button-backgroundColor));\n    color: var(--Button-textColorHover, var(--Button-textColor));\n    opacity: 1;\n  }\n\n  &.Button--active:not([disabled]),\n  &:active:not([disabled]) {\n    border-color: var(--Button-borderColorActive, var(--Button-borderColor));\n    background-color: var(--Button-backgroundColorActive);\n    color: var(--Button-textColorActive, var(--Button-textColor));\n  }\n}\n\n.Button--primary {\n  --Button-backgroundColor: var(--color-text-shade-1);\n  --Button-backgroundColorActive: var(--color-accent-shade-5);\n  --Button-backgroundColorHover: var(--color-accent-shade-3);\n  --Button-borderColor: var(--color-text-shade-1);\n  --Button-textColor: var(--color-background-shade-1);\n  --Button-textColorActive: var(--color-white);\n  --Button-textColorHover: var(--color-white);\n}\n\n.Button--accent {\n  --Button-backgroundColorActive: var(--color-accent-shade-2);\n  --Button-backgroundColorHover: var(--color-accent-shade-1);\n  --Button-borderColorActive: var(--color-accent-shade-5);\n  --Button-borderColorHover: var(--color-accent-shade-3);\n  --Button-textColor: var(--color-accent-shade-4);\n  --Button-textColorActive: var(--color-accent-shade-5);\n  --Button-textColorHover: var(--color-accent-shade-3);\n\n  &.Button--primary {\n    --Button-backgroundColor: var(--color-accent-shade-4);\n    --Button-backgroundColorActive: var(--color-accent-shade-5);\n    --Button-backgroundColorHover: var(--color-accent-shade-3);\n    --Button-borderColor: var(--color-accent-shade-4);\n    --Button-textColor: var(--color-white);\n    --Button-textColorActive: var(--color-white);\n    --Button-textColorHover: var(--color-white);\n  }\n}\n\n.Button--positive {\n  --Button-backgroundColorActive: var(--color-positive-shade-2);\n  --Button-backgroundColorHover: var(--color-positive-shade-1);\n  --Button-borderColorActive: var(--color-positive-shade-5);\n  --Button-borderColorHover: var(--color-positive-shade-3);\n  --Button-textColor: var(--color-positive-shade-4);\n  --Button-textColorActive: var(--color-positive-shade-5);\n  --Button-textColorHover: var(--color-positive-shade-3);\n\n  &.Button--primary {\n    --Button-backgroundColor: var(--color-positive-shade-4);\n    --Button-backgroundColorActive: var(--color-positive-shade-5);\n    --Button-backgroundColorHover: var(--color-positive-shade-3);\n    --Button-borderColor: var(--color-positive-shade-4);\n    --Button-textColor: var(--color-white);\n    --Button-textColorActive: var(--color-white);\n    --Button-textColorHover: var(--color-white);\n  }\n}\n\n.Button--negative {\n  --Button-backgroundColorActive: var(--color-negative-shade-2);\n  --Button-backgroundColorHover: var(--color-negative-shade-1);\n  --Button-borderColorActive: var(--color-negative-shade-5);\n  --Button-borderColorHover: var(--color-negative-shade-3);\n  --Button-textColor: var(--color-negative-shade-4);\n  --Button-textColorActive: var(--color-negative-shade-5);\n  --Button-textColorHover: var(--color-negative-shade-3);\n\n  &.Button--primary {\n    --Button-backgroundColor: var(--color-negative-shade-4);\n    --Button-backgroundColorActive: var(--color-negative-shade-5);\n    --Button-backgroundColorHover: var(--color-negative-shade-3);\n    --Button-borderColor: var(--color-negative-shade-4);\n    --Button-textColor: var(--color-white);\n    --Button-textColorActive: var(--color-white);\n    --Button-textColorHover: var(--color-white);\n  }\n}\n\n.Button--tertiary {\n  --Button-backgroundColor: transparent;\n  --Button-borderColor: transparent;\n  --Button-borderColorHover: transparent;\n  --Button-borderColorActive: transparent;\n}\n\n.Buttons--joined-horizontal > .Button {\n  &:not(:first-child) {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  &:not(:last-child) {\n    border-right-width: 0;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n\n    &.Button--active,\n    &:not([disabled]):hover,\n    &:not([disabled]):active {\n      border-right-width: var(--border-size--x2);\n\n      & + .Button {\n        border-left-width: 0;\n      }\n    }\n  }\n}\n\n.Buttons--joined-vertical > .Button {\n  &:not(:first-child) {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n\n  &:not(:last-child) {\n    border-bottom-width: 0;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n\n    &.Button--active,\n    &:not([disabled]):hover,\n    &:not([disabled]):active {\n      border-bottom-width: var(--border-size--x2);\n\n      & + .Button {\n        border-top-width: 0;\n      }\n    }\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Grid/Grid.css":
/*!**************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/preshape/Grid/Grid.css ***!
  \**************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.Grid {
  display: grid;
  grid-auto-rows: 1fr;
}

.Grid--gap-horizontal-x1  { grid-column-gap: var(--size--x1); }
.Grid--gap-horizontal-x2  { grid-column-gap: var(--size--x2); }
.Grid--gap-horizontal-x3  { grid-column-gap: var(--size--x3); }
.Grid--gap-horizontal-x4  { grid-column-gap: var(--size--x4); }
.Grid--gap-horizontal-x6  { grid-column-gap: var(--size--x6); }
.Grid--gap-horizontal-x8  { grid-column-gap: var(--size--x8); }
.Grid--gap-horizontal-x10 { grid-column-gap: var(--size--x10); }
.Grid--gap-horizontal-x12 { grid-column-gap: var(--size--x12); }
.Grid--gap-horizontal-x16 { grid-column-gap: var(--size--x16); }
.Grid--gap-horizontal-x24 { grid-column-gap: var(--size--x24); }
.Grid--gap-horizontal-x32 { grid-column-gap: var(--size--x32); }

.Grid--gap-vertical-x1  { grid-row-gap: var(--size--x1); }
.Grid--gap-vertical-x2  { grid-row-gap: var(--size--x2); }
.Grid--gap-vertical-x3  { grid-row-gap: var(--size--x3); }
.Grid--gap-vertical-x4  { grid-row-gap: var(--size--x4); }
.Grid--gap-vertical-x6  { grid-row-gap: var(--size--x6); }
.Grid--gap-vertical-x8  { grid-row-gap: var(--size--x8); }
.Grid--gap-vertical-x10 { grid-row-gap: var(--size--x10); }
.Grid--gap-vertical-x12 { grid-row-gap: var(--size--x12); }
.Grid--gap-vertical-x16 { grid-row-gap: var(--size--x16); }
.Grid--gap-vertical-x24 { grid-row-gap: var(--size--x24); }
.Grid--gap-vertical-x32 { grid-row-gap: var(--size--x32); }

.Grid--align-start  { justify-content: start; }
.Grid--align-middle { justify-content: center; }
.Grid--align-end    { justify-content: end; }
`, "",{"version":3,"sources":["webpack://./src/preshape/Grid/Grid.css"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA,4BAA4B,gCAAgC,EAAE;AAC9D,4BAA4B,gCAAgC,EAAE;AAC9D,4BAA4B,gCAAgC,EAAE;AAC9D,4BAA4B,gCAAgC,EAAE;AAC9D,4BAA4B,gCAAgC,EAAE;AAC9D,4BAA4B,gCAAgC,EAAE;AAC9D,4BAA4B,iCAAiC,EAAE;AAC/D,4BAA4B,iCAAiC,EAAE;AAC/D,4BAA4B,iCAAiC,EAAE;AAC/D,4BAA4B,iCAAiC,EAAE;AAC/D,4BAA4B,iCAAiC,EAAE;;AAE/D,0BAA0B,6BAA6B,EAAE;AACzD,0BAA0B,6BAA6B,EAAE;AACzD,0BAA0B,6BAA6B,EAAE;AACzD,0BAA0B,6BAA6B,EAAE;AACzD,0BAA0B,6BAA6B,EAAE;AACzD,0BAA0B,6BAA6B,EAAE;AACzD,0BAA0B,8BAA8B,EAAE;AAC1D,0BAA0B,8BAA8B,EAAE;AAC1D,0BAA0B,8BAA8B,EAAE;AAC1D,0BAA0B,8BAA8B,EAAE;AAC1D,0BAA0B,8BAA8B,EAAE;;AAE1D,sBAAsB,sBAAsB,EAAE;AAC9C,sBAAsB,uBAAuB,EAAE;AAC/C,sBAAsB,oBAAoB,EAAE","sourcesContent":[".Grid {\n  display: grid;\n  grid-auto-rows: 1fr;\n}\n\n.Grid--gap-horizontal-x1  { grid-column-gap: var(--size--x1); }\n.Grid--gap-horizontal-x2  { grid-column-gap: var(--size--x2); }\n.Grid--gap-horizontal-x3  { grid-column-gap: var(--size--x3); }\n.Grid--gap-horizontal-x4  { grid-column-gap: var(--size--x4); }\n.Grid--gap-horizontal-x6  { grid-column-gap: var(--size--x6); }\n.Grid--gap-horizontal-x8  { grid-column-gap: var(--size--x8); }\n.Grid--gap-horizontal-x10 { grid-column-gap: var(--size--x10); }\n.Grid--gap-horizontal-x12 { grid-column-gap: var(--size--x12); }\n.Grid--gap-horizontal-x16 { grid-column-gap: var(--size--x16); }\n.Grid--gap-horizontal-x24 { grid-column-gap: var(--size--x24); }\n.Grid--gap-horizontal-x32 { grid-column-gap: var(--size--x32); }\n\n.Grid--gap-vertical-x1  { grid-row-gap: var(--size--x1); }\n.Grid--gap-vertical-x2  { grid-row-gap: var(--size--x2); }\n.Grid--gap-vertical-x3  { grid-row-gap: var(--size--x3); }\n.Grid--gap-vertical-x4  { grid-row-gap: var(--size--x4); }\n.Grid--gap-vertical-x6  { grid-row-gap: var(--size--x6); }\n.Grid--gap-vertical-x8  { grid-row-gap: var(--size--x8); }\n.Grid--gap-vertical-x10 { grid-row-gap: var(--size--x10); }\n.Grid--gap-vertical-x12 { grid-row-gap: var(--size--x12); }\n.Grid--gap-vertical-x16 { grid-row-gap: var(--size--x16); }\n.Grid--gap-vertical-x24 { grid-row-gap: var(--size--x24); }\n.Grid--gap-vertical-x32 { grid-row-gap: var(--size--x32); }\n\n.Grid--align-start  { justify-content: start; }\n.Grid--align-middle { justify-content: center; }\n.Grid--align-end    { justify-content: end; }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Input/Input.css":
/*!****************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/preshape/Input/Input.css ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.Input {
  width: 100%;
  transition-property: background-color, border-color;
  transition-duration: var(--transition-duration--base);
  transition-timing-function: var(--transition-timing-function);

  &[disabled] {
    opacity: 0.5;
    cursor: default;
  }
}

.Input--invalid {
  &,
  &:focus-within,
  &:hover:not([disabled]) {
    color: var(--color-negative-shade-4);
  }
}

.Input__element {
  display: block;
  grid-area: input;
  width: 100%;
  min-width: 0;
  border: 0;
  border-radius: 0;
  background-color: transparent;
  padding: 0;
  text-overflow: ellipsis;
  appearance: none;

  &:focus::placeholder {
    color: transparent;
  }

  &:focus {
    outline: 0;
  }

  &:disabled {
    opacity: 0.5;
    cursor: default;
  }
}


.Input--text-color-active-black:focus-within { color: var(--color-black); }
.Input--text-color-active-white:focus-within { color: var(--color-white); }
.Input--text-color-active-highlight:focus-within { color: var(--color-highlight); }
.Input--text-color-active-overlay:focus-within { color: var(--color-overlay); }
.Input--text-color-active-transparent:focus-within { color: transparent; }
.Input--text-color-active-accent-shade-1:focus-within { color: var(--color-accent-shade-1); }
.Input--text-color-active-accent-shade-2:focus-within { color: var(--color-accent-shade-2); }
.Input--text-color-active-accent-shade-3:focus-within { color: var(--color-accent-shade-3); }
.Input--text-color-active-accent-shade-4:focus-within { color: var(--color-accent-shade-4); }
.Input--text-color-active-accent-shade-5:focus-within { color: var(--color-accent-shade-5); }
.Input--text-color-active-background-shade-1:focus-within { color: var(--color-background-shade-1); }
.Input--text-color-active-background-shade-2:focus-within { color: var(--color-background-shade-2); }
.Input--text-color-active-background-shade-3:focus-within { color: var(--color-background-shade-3); }
.Input--text-color-active-background-shade-4:focus-within { color: var(--color-background-shade-4); }
.Input--text-color-active-dark-shade-1:focus-within { color: var(--color-dark-shade-1); }
.Input--text-color-active-dark-shade-2:focus-within { color: var(--color-dark-shade-2); }
.Input--text-color-active-dark-shade-3:focus-within { color: var(--color-dark-shade-3); }
.Input--text-color-active-light-shade-1:focus-within { color: var(--color-light-shade-1); }
.Input--text-color-active-light-shade-2:focus-within { color: var(--color-light-shade-2); }
.Input--text-color-active-light-shade-3:focus-within { color: var(--color-light-shade-3); }
.Input--text-color-active-text-shade-1:focus-within { color: var(--color-text-shade-1); }
.Input--text-color-active-text-shade-2:focus-within { color: var(--color-text-shade-2); }
.Input--text-color-active-text-shade-3:focus-within { color: var(--color-text-shade-3); }
.Input--text-color-active-text-shade-4:focus-within { color: var(--color-text-shade-4); }
.Input--text-color-active-negative-shade-1:focus-within { color: var(--color-negative-shade-1); }
.Input--text-color-active-negative-shade-2:focus-within { color: var(--color-negative-shade-2); }
.Input--text-color-active-negative-shade-3:focus-within { color: var(--color-negative-shade-3); }
.Input--text-color-active-negative-shade-4:focus-within { color: var(--color-negative-shade-4); }
.Input--text-color-active-negative-shade-5:focus-within { color: var(--color-negative-shade-5); }
.Input--text-color-active-positive-shade-1:focus-within { color: var(--color-positive-shade-1); }
.Input--text-color-active-positive-shade-2:focus-within { color: var(--color-positive-shade-2); }
.Input--text-color-active-positive-shade-3:focus-within { color: var(--color-positive-shade-3); }
.Input--text-color-active-positive-shade-4:focus-within { color: var(--color-positive-shade-4); }
.Input--text-color-active-positive-shade-5:focus-within { color: var(--color-positive-shade-5); }

.Input--text-color-hover-black:hover:not([disabled]) { color: var(--color-black); }
.Input--text-color-hover-white:hover:not([disabled]) { color: var(--color-white); }
.Input--text-color-hover-highlight:hover:not([disabled]) { color: var(--color-highlight); }
.Input--text-color-hover-overlay:hover:not([disabled]) { color: var(--color-overlay); }
.Input--text-color-hover-transparent:hover:not([disabled]) { color: transparent; }
.Input--text-color-hover-accent-shade-1:hover:not([disabled]) { color: var(--color-accent-shade-1); }
.Input--text-color-hover-accent-shade-2:hover:not([disabled]) { color: var(--color-accent-shade-2); }
.Input--text-color-hover-accent-shade-3:hover:not([disabled]) { color: var(--color-accent-shade-3); }
.Input--text-color-hover-accent-shade-4:hover:not([disabled]) { color: var(--color-accent-shade-4); }
.Input--text-color-hover-accent-shade-5:hover:not([disabled]) { color: var(--color-accent-shade-5); }
.Input--text-color-hover-background-shade-1:hover:not([disabled]) { color: var(--color-background-shade-1); }
.Input--text-color-hover-background-shade-2:hover:not([disabled]) { color: var(--color-background-shade-2); }
.Input--text-color-hover-background-shade-3:hover:not([disabled]) { color: var(--color-background-shade-3); }
.Input--text-color-hover-background-shade-4:hover:not([disabled]) { color: var(--color-background-shade-4); }
.Input--text-color-hover-dark-shade-1:hover:not([disabled]) { color: var(--color-dark-shade-1); }
.Input--text-color-hover-dark-shade-2:hover:not([disabled]) { color: var(--color-dark-shade-2); }
.Input--text-color-hover-dark-shade-3:hover:not([disabled]) { color: var(--color-dark-shade-3); }
.Input--text-color-hover-light-shade-1:hover:not([disabled]) { color: var(--color-light-shade-1); }
.Input--text-color-hover-light-shade-2:hover:not([disabled]) { color: var(--color-light-shade-2); }
.Input--text-color-hover-light-shade-3:hover:not([disabled]) { color: var(--color-light-shade-3); }
.Input--text-color-hover-text-shade-1:hover:not([disabled]) { color: var(--color-text-shade-1); }
.Input--text-color-hover-text-shade-2:hover:not([disabled]) { color: var(--color-text-shade-2); }
.Input--text-color-hover-text-shade-3:hover:not([disabled]) { color: var(--color-text-shade-3); }
.Input--text-color-hover-text-shade-4:hover:not([disabled]) { color: var(--color-text-shade-4); }
.Input--text-color-hover-negative-shade-1:hover:not([disabled]) { color: var(--color-negative-shade-1); }
.Input--text-color-hover-negative-shade-2:hover:not([disabled]) { color: var(--color-negative-shade-2); }
.Input--text-color-hover-negative-shade-3:hover:not([disabled]) { color: var(--color-negative-shade-3); }
.Input--text-color-hover-negative-shade-4:hover:not([disabled]) { color: var(--color-negative-shade-4); }
.Input--text-color-hover-negative-shade-5:hover:not([disabled]) { color: var(--color-negative-shade-5); }
.Input--text-color-hover-positive-shade-1:hover:not([disabled]) { color: var(--color-positive-shade-1); }
.Input--text-color-hover-positive-shade-2:hover:not([disabled]) { color: var(--color-positive-shade-2); }
.Input--text-color-hover-positive-shade-3:hover:not([disabled]) { color: var(--color-positive-shade-3); }
.Input--text-color-hover-positive-shade-4:hover:not([disabled]) { color: var(--color-positive-shade-4); }
.Input--text-color-hover-positive-shade-5:hover:not([disabled]) { color: var(--color-positive-shade-5); }

.Input__element--text-color-placeholder-black::placeholder { color: var(--color-black); }
.Input__element--text-color-placeholder-white::placeholder { color: var(--color-white); }
.Input__element--text-color-placeholder-highlight::placeholder { color: var(--color-highlight); }
.Input__element--text-color-placeholder-overlay::placeholder { color: var(--color-overlay); }
.Input__element--text-color-placeholder-transparent::placeholder { color: transparent; }
.Input__element--text-color-placeholder-accent-shade-1::placeholder { color: var(--color-accent-shade-1); }
.Input__element--text-color-placeholder-accent-shade-2::placeholder { color: var(--color-accent-shade-2); }
.Input__element--text-color-placeholder-accent-shade-3::placeholder { color: var(--color-accent-shade-3); }
.Input__element--text-color-placeholder-accent-shade-4::placeholder { color: var(--color-accent-shade-4); }
.Input__element--text-color-placeholder-accent-shade-5::placeholder { color: var(--color-accent-shade-5); }
.Input__element--text-color-placeholder-background-shade-1::placeholder { color: var(--color-background-shade-1); }
.Input__element--text-color-placeholder-background-shade-2::placeholder { color: var(--color-background-shade-2); }
.Input__element--text-color-placeholder-background-shade-3::placeholder { color: var(--color-background-shade-3); }
.Input__element--text-color-placeholder-background-shade-4::placeholder { color: var(--color-background-shade-4); }
.Input__element--text-color-placeholder-dark-shade-1::placeholder { color: var(--color-dark-shade-1); }
.Input__element--text-color-placeholder-dark-shade-2::placeholder { color: var(--color-dark-shade-2); }
.Input__element--text-color-placeholder-dark-shade-3::placeholder { color: var(--color-dark-shade-3); }
.Input__element--text-color-placeholder-light-shade-1::placeholder { color: var(--color-light-shade-1); }
.Input__element--text-color-placeholder-light-shade-2::placeholder { color: var(--color-light-shade-2); }
.Input__element--text-color-placeholder-light-shade-3::placeholder { color: var(--color-light-shade-3); }
.Input__element--text-color-placeholder-text-shade-1::placeholder { color: var(--color-text-shade-1); }
.Input__element--text-color-placeholder-text-shade-2::placeholder { color: var(--color-text-shade-2); }
.Input__element--text-color-placeholder-text-shade-3::placeholder { color: var(--color-text-shade-3); }
.Input__element--text-color-placeholder-text-shade-4::placeholder { color: var(--color-text-shade-4); }
.Input__element--text-color-placeholder-negative-shade-1::placeholder { color: var(--color-negative-shade-1); }
.Input__element--text-color-placeholder-negative-shade-2::placeholder { color: var(--color-negative-shade-2); }
.Input__element--text-color-placeholder-negative-shade-3::placeholder { color: var(--color-negative-shade-3); }
.Input__element--text-color-placeholder-negative-shade-4::placeholder { color: var(--color-negative-shade-4); }
.Input__element--text-color-placeholder-negative-shade-5::placeholder { color: var(--color-negative-shade-5); }
.Input__element--text-color-placeholder-positive-shade-1::placeholder { color: var(--color-positive-shade-1); }
.Input__element--text-color-placeholder-positive-shade-2::placeholder { color: var(--color-positive-shade-2); }
.Input__element--text-color-placeholder-positive-shade-3::placeholder { color: var(--color-positive-shade-3); }
.Input__element--text-color-placeholder-positive-shade-4::placeholder { color: var(--color-positive-shade-4); }
.Input__element--text-color-placeholder-positive-shade-5::placeholder { color: var(--color-positive-shade-5); }
`, "",{"version":3,"sources":["webpack://./src/preshape/Input/Input.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX,mDAAmD;EACnD,qDAAqD;EACrD,6DAA6D;;EAE7D;IACE,YAAY;IACZ,eAAe;EACjB;AACF;;AAEA;EACE;;;IAGE,oCAAoC;EACtC;AACF;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,SAAS;EACT,gBAAgB;EAChB,6BAA6B;EAC7B,UAAU;EACV,uBAAuB;EACvB,gBAAgB;;EAEhB;IACE,kBAAkB;EACpB;;EAEA;IACE,UAAU;EACZ;;EAEA;IACE,YAAY;IACZ,eAAe;EACjB;AACF;;;AAGA,+CAA+C,yBAAyB,EAAE;AAC1E,+CAA+C,yBAAyB,EAAE;AAC1E,mDAAmD,6BAA6B,EAAE;AAClF,iDAAiD,2BAA2B,EAAE;AAC9E,qDAAqD,kBAAkB,EAAE;AACzE,wDAAwD,kCAAkC,EAAE;AAC5F,wDAAwD,kCAAkC,EAAE;AAC5F,wDAAwD,kCAAkC,EAAE;AAC5F,wDAAwD,kCAAkC,EAAE;AAC5F,wDAAwD,kCAAkC,EAAE;AAC5F,4DAA4D,sCAAsC,EAAE;AACpG,4DAA4D,sCAAsC,EAAE;AACpG,4DAA4D,sCAAsC,EAAE;AACpG,4DAA4D,sCAAsC,EAAE;AACpG,sDAAsD,gCAAgC,EAAE;AACxF,sDAAsD,gCAAgC,EAAE;AACxF,sDAAsD,gCAAgC,EAAE;AACxF,uDAAuD,iCAAiC,EAAE;AAC1F,uDAAuD,iCAAiC,EAAE;AAC1F,uDAAuD,iCAAiC,EAAE;AAC1F,sDAAsD,gCAAgC,EAAE;AACxF,sDAAsD,gCAAgC,EAAE;AACxF,sDAAsD,gCAAgC,EAAE;AACxF,sDAAsD,gCAAgC,EAAE;AACxF,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;AAChG,0DAA0D,oCAAoC,EAAE;;AAEhG,uDAAuD,yBAAyB,EAAE;AAClF,uDAAuD,yBAAyB,EAAE;AAClF,2DAA2D,6BAA6B,EAAE;AAC1F,yDAAyD,2BAA2B,EAAE;AACtF,6DAA6D,kBAAkB,EAAE;AACjF,gEAAgE,kCAAkC,EAAE;AACpG,gEAAgE,kCAAkC,EAAE;AACpG,gEAAgE,kCAAkC,EAAE;AACpG,gEAAgE,kCAAkC,EAAE;AACpG,gEAAgE,kCAAkC,EAAE;AACpG,oEAAoE,sCAAsC,EAAE;AAC5G,oEAAoE,sCAAsC,EAAE;AAC5G,oEAAoE,sCAAsC,EAAE;AAC5G,oEAAoE,sCAAsC,EAAE;AAC5G,8DAA8D,gCAAgC,EAAE;AAChG,8DAA8D,gCAAgC,EAAE;AAChG,8DAA8D,gCAAgC,EAAE;AAChG,+DAA+D,iCAAiC,EAAE;AAClG,+DAA+D,iCAAiC,EAAE;AAClG,+DAA+D,iCAAiC,EAAE;AAClG,8DAA8D,gCAAgC,EAAE;AAChG,8DAA8D,gCAAgC,EAAE;AAChG,8DAA8D,gCAAgC,EAAE;AAChG,8DAA8D,gCAAgC,EAAE;AAChG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;AACxG,kEAAkE,oCAAoC,EAAE;;AAExG,6DAA6D,yBAAyB,EAAE;AACxF,6DAA6D,yBAAyB,EAAE;AACxF,iEAAiE,6BAA6B,EAAE;AAChG,+DAA+D,2BAA2B,EAAE;AAC5F,mEAAmE,kBAAkB,EAAE;AACvF,sEAAsE,kCAAkC,EAAE;AAC1G,sEAAsE,kCAAkC,EAAE;AAC1G,sEAAsE,kCAAkC,EAAE;AAC1G,sEAAsE,kCAAkC,EAAE;AAC1G,sEAAsE,kCAAkC,EAAE;AAC1G,0EAA0E,sCAAsC,EAAE;AAClH,0EAA0E,sCAAsC,EAAE;AAClH,0EAA0E,sCAAsC,EAAE;AAClH,0EAA0E,sCAAsC,EAAE;AAClH,oEAAoE,gCAAgC,EAAE;AACtG,oEAAoE,gCAAgC,EAAE;AACtG,oEAAoE,gCAAgC,EAAE;AACtG,qEAAqE,iCAAiC,EAAE;AACxG,qEAAqE,iCAAiC,EAAE;AACxG,qEAAqE,iCAAiC,EAAE;AACxG,oEAAoE,gCAAgC,EAAE;AACtG,oEAAoE,gCAAgC,EAAE;AACtG,oEAAoE,gCAAgC,EAAE;AACtG,oEAAoE,gCAAgC,EAAE;AACtG,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE;AAC9G,wEAAwE,oCAAoC,EAAE","sourcesContent":[".Input {\n  width: 100%;\n  transition-property: background-color, border-color;\n  transition-duration: var(--transition-duration--base);\n  transition-timing-function: var(--transition-timing-function);\n\n  &[disabled] {\n    opacity: 0.5;\n    cursor: default;\n  }\n}\n\n.Input--invalid {\n  &,\n  &:focus-within,\n  &:hover:not([disabled]) {\n    color: var(--color-negative-shade-4);\n  }\n}\n\n.Input__element {\n  display: block;\n  grid-area: input;\n  width: 100%;\n  min-width: 0;\n  border: 0;\n  border-radius: 0;\n  background-color: transparent;\n  padding: 0;\n  text-overflow: ellipsis;\n  appearance: none;\n\n  &:focus::placeholder {\n    color: transparent;\n  }\n\n  &:focus {\n    outline: 0;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: default;\n  }\n}\n\n\n.Input--text-color-active-black:focus-within { color: var(--color-black); }\n.Input--text-color-active-white:focus-within { color: var(--color-white); }\n.Input--text-color-active-highlight:focus-within { color: var(--color-highlight); }\n.Input--text-color-active-overlay:focus-within { color: var(--color-overlay); }\n.Input--text-color-active-transparent:focus-within { color: transparent; }\n.Input--text-color-active-accent-shade-1:focus-within { color: var(--color-accent-shade-1); }\n.Input--text-color-active-accent-shade-2:focus-within { color: var(--color-accent-shade-2); }\n.Input--text-color-active-accent-shade-3:focus-within { color: var(--color-accent-shade-3); }\n.Input--text-color-active-accent-shade-4:focus-within { color: var(--color-accent-shade-4); }\n.Input--text-color-active-accent-shade-5:focus-within { color: var(--color-accent-shade-5); }\n.Input--text-color-active-background-shade-1:focus-within { color: var(--color-background-shade-1); }\n.Input--text-color-active-background-shade-2:focus-within { color: var(--color-background-shade-2); }\n.Input--text-color-active-background-shade-3:focus-within { color: var(--color-background-shade-3); }\n.Input--text-color-active-background-shade-4:focus-within { color: var(--color-background-shade-4); }\n.Input--text-color-active-dark-shade-1:focus-within { color: var(--color-dark-shade-1); }\n.Input--text-color-active-dark-shade-2:focus-within { color: var(--color-dark-shade-2); }\n.Input--text-color-active-dark-shade-3:focus-within { color: var(--color-dark-shade-3); }\n.Input--text-color-active-light-shade-1:focus-within { color: var(--color-light-shade-1); }\n.Input--text-color-active-light-shade-2:focus-within { color: var(--color-light-shade-2); }\n.Input--text-color-active-light-shade-3:focus-within { color: var(--color-light-shade-3); }\n.Input--text-color-active-text-shade-1:focus-within { color: var(--color-text-shade-1); }\n.Input--text-color-active-text-shade-2:focus-within { color: var(--color-text-shade-2); }\n.Input--text-color-active-text-shade-3:focus-within { color: var(--color-text-shade-3); }\n.Input--text-color-active-text-shade-4:focus-within { color: var(--color-text-shade-4); }\n.Input--text-color-active-negative-shade-1:focus-within { color: var(--color-negative-shade-1); }\n.Input--text-color-active-negative-shade-2:focus-within { color: var(--color-negative-shade-2); }\n.Input--text-color-active-negative-shade-3:focus-within { color: var(--color-negative-shade-3); }\n.Input--text-color-active-negative-shade-4:focus-within { color: var(--color-negative-shade-4); }\n.Input--text-color-active-negative-shade-5:focus-within { color: var(--color-negative-shade-5); }\n.Input--text-color-active-positive-shade-1:focus-within { color: var(--color-positive-shade-1); }\n.Input--text-color-active-positive-shade-2:focus-within { color: var(--color-positive-shade-2); }\n.Input--text-color-active-positive-shade-3:focus-within { color: var(--color-positive-shade-3); }\n.Input--text-color-active-positive-shade-4:focus-within { color: var(--color-positive-shade-4); }\n.Input--text-color-active-positive-shade-5:focus-within { color: var(--color-positive-shade-5); }\n\n.Input--text-color-hover-black:hover:not([disabled]) { color: var(--color-black); }\n.Input--text-color-hover-white:hover:not([disabled]) { color: var(--color-white); }\n.Input--text-color-hover-highlight:hover:not([disabled]) { color: var(--color-highlight); }\n.Input--text-color-hover-overlay:hover:not([disabled]) { color: var(--color-overlay); }\n.Input--text-color-hover-transparent:hover:not([disabled]) { color: transparent; }\n.Input--text-color-hover-accent-shade-1:hover:not([disabled]) { color: var(--color-accent-shade-1); }\n.Input--text-color-hover-accent-shade-2:hover:not([disabled]) { color: var(--color-accent-shade-2); }\n.Input--text-color-hover-accent-shade-3:hover:not([disabled]) { color: var(--color-accent-shade-3); }\n.Input--text-color-hover-accent-shade-4:hover:not([disabled]) { color: var(--color-accent-shade-4); }\n.Input--text-color-hover-accent-shade-5:hover:not([disabled]) { color: var(--color-accent-shade-5); }\n.Input--text-color-hover-background-shade-1:hover:not([disabled]) { color: var(--color-background-shade-1); }\n.Input--text-color-hover-background-shade-2:hover:not([disabled]) { color: var(--color-background-shade-2); }\n.Input--text-color-hover-background-shade-3:hover:not([disabled]) { color: var(--color-background-shade-3); }\n.Input--text-color-hover-background-shade-4:hover:not([disabled]) { color: var(--color-background-shade-4); }\n.Input--text-color-hover-dark-shade-1:hover:not([disabled]) { color: var(--color-dark-shade-1); }\n.Input--text-color-hover-dark-shade-2:hover:not([disabled]) { color: var(--color-dark-shade-2); }\n.Input--text-color-hover-dark-shade-3:hover:not([disabled]) { color: var(--color-dark-shade-3); }\n.Input--text-color-hover-light-shade-1:hover:not([disabled]) { color: var(--color-light-shade-1); }\n.Input--text-color-hover-light-shade-2:hover:not([disabled]) { color: var(--color-light-shade-2); }\n.Input--text-color-hover-light-shade-3:hover:not([disabled]) { color: var(--color-light-shade-3); }\n.Input--text-color-hover-text-shade-1:hover:not([disabled]) { color: var(--color-text-shade-1); }\n.Input--text-color-hover-text-shade-2:hover:not([disabled]) { color: var(--color-text-shade-2); }\n.Input--text-color-hover-text-shade-3:hover:not([disabled]) { color: var(--color-text-shade-3); }\n.Input--text-color-hover-text-shade-4:hover:not([disabled]) { color: var(--color-text-shade-4); }\n.Input--text-color-hover-negative-shade-1:hover:not([disabled]) { color: var(--color-negative-shade-1); }\n.Input--text-color-hover-negative-shade-2:hover:not([disabled]) { color: var(--color-negative-shade-2); }\n.Input--text-color-hover-negative-shade-3:hover:not([disabled]) { color: var(--color-negative-shade-3); }\n.Input--text-color-hover-negative-shade-4:hover:not([disabled]) { color: var(--color-negative-shade-4); }\n.Input--text-color-hover-negative-shade-5:hover:not([disabled]) { color: var(--color-negative-shade-5); }\n.Input--text-color-hover-positive-shade-1:hover:not([disabled]) { color: var(--color-positive-shade-1); }\n.Input--text-color-hover-positive-shade-2:hover:not([disabled]) { color: var(--color-positive-shade-2); }\n.Input--text-color-hover-positive-shade-3:hover:not([disabled]) { color: var(--color-positive-shade-3); }\n.Input--text-color-hover-positive-shade-4:hover:not([disabled]) { color: var(--color-positive-shade-4); }\n.Input--text-color-hover-positive-shade-5:hover:not([disabled]) { color: var(--color-positive-shade-5); }\n\n.Input__element--text-color-placeholder-black::placeholder { color: var(--color-black); }\n.Input__element--text-color-placeholder-white::placeholder { color: var(--color-white); }\n.Input__element--text-color-placeholder-highlight::placeholder { color: var(--color-highlight); }\n.Input__element--text-color-placeholder-overlay::placeholder { color: var(--color-overlay); }\n.Input__element--text-color-placeholder-transparent::placeholder { color: transparent; }\n.Input__element--text-color-placeholder-accent-shade-1::placeholder { color: var(--color-accent-shade-1); }\n.Input__element--text-color-placeholder-accent-shade-2::placeholder { color: var(--color-accent-shade-2); }\n.Input__element--text-color-placeholder-accent-shade-3::placeholder { color: var(--color-accent-shade-3); }\n.Input__element--text-color-placeholder-accent-shade-4::placeholder { color: var(--color-accent-shade-4); }\n.Input__element--text-color-placeholder-accent-shade-5::placeholder { color: var(--color-accent-shade-5); }\n.Input__element--text-color-placeholder-background-shade-1::placeholder { color: var(--color-background-shade-1); }\n.Input__element--text-color-placeholder-background-shade-2::placeholder { color: var(--color-background-shade-2); }\n.Input__element--text-color-placeholder-background-shade-3::placeholder { color: var(--color-background-shade-3); }\n.Input__element--text-color-placeholder-background-shade-4::placeholder { color: var(--color-background-shade-4); }\n.Input__element--text-color-placeholder-dark-shade-1::placeholder { color: var(--color-dark-shade-1); }\n.Input__element--text-color-placeholder-dark-shade-2::placeholder { color: var(--color-dark-shade-2); }\n.Input__element--text-color-placeholder-dark-shade-3::placeholder { color: var(--color-dark-shade-3); }\n.Input__element--text-color-placeholder-light-shade-1::placeholder { color: var(--color-light-shade-1); }\n.Input__element--text-color-placeholder-light-shade-2::placeholder { color: var(--color-light-shade-2); }\n.Input__element--text-color-placeholder-light-shade-3::placeholder { color: var(--color-light-shade-3); }\n.Input__element--text-color-placeholder-text-shade-1::placeholder { color: var(--color-text-shade-1); }\n.Input__element--text-color-placeholder-text-shade-2::placeholder { color: var(--color-text-shade-2); }\n.Input__element--text-color-placeholder-text-shade-3::placeholder { color: var(--color-text-shade-3); }\n.Input__element--text-color-placeholder-text-shade-4::placeholder { color: var(--color-text-shade-4); }\n.Input__element--text-color-placeholder-negative-shade-1::placeholder { color: var(--color-negative-shade-1); }\n.Input__element--text-color-placeholder-negative-shade-2::placeholder { color: var(--color-negative-shade-2); }\n.Input__element--text-color-placeholder-negative-shade-3::placeholder { color: var(--color-negative-shade-3); }\n.Input__element--text-color-placeholder-negative-shade-4::placeholder { color: var(--color-negative-shade-4); }\n.Input__element--text-color-placeholder-negative-shade-5::placeholder { color: var(--color-negative-shade-5); }\n.Input__element--text-color-placeholder-positive-shade-1::placeholder { color: var(--color-positive-shade-1); }\n.Input__element--text-color-placeholder-positive-shade-2::placeholder { color: var(--color-positive-shade-2); }\n.Input__element--text-color-placeholder-positive-shade-3::placeholder { color: var(--color-positive-shade-3); }\n.Input__element--text-color-placeholder-positive-shade-4::placeholder { color: var(--color-positive-shade-4); }\n.Input__element--text-color-placeholder-positive-shade-5::placeholder { color: var(--color-positive-shade-5); }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/preshape/List/List.css":
/*!**************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/preshape/List/List.css ***!
  \**************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.ListItem:not(:last-child)::after {
    content: attr(data-separator);
  
    @nest .List--x1 > & { margin-left: var(--size--x1); }
  
    @nest .List--x2 > & { margin-left: var(--size--x2); }
  
    @nest .List--x3 > & { margin-left: var(--size--x3); }
  
    @nest .List--x4 > & { margin-left: var(--size--x4); }
  
    @nest .List--x6 > & { margin-left: var(--size--x6); }
  
    @nest .List--x8 > & { margin-left: var(--size--x8); }
  
    @nest .List--x10 > & { margin-left: var(--size--x10); }
  
    @nest .List--x12 > & { margin-left: var(--size--x12); }
  
    @nest .List--x16 > & { margin-left: var(--size--x16); }
  }`, "",{"version":3,"sources":["webpack://./src/preshape/List/List.css"],"names":[],"mappings":"AAAA;IACI,6BAA6B;;IAE7B,sBAAsB,4BAA4B,EAAE;;IAEpD,sBAAsB,4BAA4B,EAAE;;IAEpD,sBAAsB,4BAA4B,EAAE;;IAEpD,sBAAsB,4BAA4B,EAAE;;IAEpD,sBAAsB,4BAA4B,EAAE;;IAEpD,sBAAsB,4BAA4B,EAAE;;IAEpD,uBAAuB,6BAA6B,EAAE;;IAEtD,uBAAuB,6BAA6B,EAAE;;IAEtD,uBAAuB,6BAA6B,EAAE;EACxD","sourcesContent":[".ListItem:not(:last-child)::after {\r\n    content: attr(data-separator);\r\n  \r\n    @nest .List--x1 > & { margin-left: var(--size--x1); }\r\n  \r\n    @nest .List--x2 > & { margin-left: var(--size--x2); }\r\n  \r\n    @nest .List--x3 > & { margin-left: var(--size--x3); }\r\n  \r\n    @nest .List--x4 > & { margin-left: var(--size--x4); }\r\n  \r\n    @nest .List--x6 > & { margin-left: var(--size--x6); }\r\n  \r\n    @nest .List--x8 > & { margin-left: var(--size--x8); }\r\n  \r\n    @nest .List--x10 > & { margin-left: var(--size--x10); }\r\n  \r\n    @nest .List--x12 > & { margin-left: var(--size--x12); }\r\n  \r\n    @nest .List--x16 > & { margin-left: var(--size--x16); }\r\n  }"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Text/Text.css":
/*!**************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/preshape/Text/Text.css ***!
  \**************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body {
  color: var(--color-text-shade-2);
  font-family: var(--text-family--content);
  font-size: var(--text-size--body);
  -webkit-font-smoothing: antialiased;
  line-height: var(--text-height--body);
}

.Text {
  font-weight: inherit;
}

.Text--monospace { font-family: var(--text-family--monospace); }

.Text--align-start  { text-align: left; }
.Text--align-middle { text-align: center; }
.Text--align-end    { text-align: right; }

.Text--break-all  { word-break: break-all; }
.Text--break-none { white-space: nowrap; }
.Text--break-word { word-wrap: break-word; }

.Text--size-x1 {
  font-size: var(--text-size--x1);
  line-height: var(--text-height--x1);
}

.Text--size-x2 {
  font-size: var(--text-size--x2);
  line-height: var(--text-height--x2);
}

.Text--size-x3 {
  font-size: var(--text-size--x3);
  line-height: var(--text-height--x3);
}

.Text--size-x4 {
  font-size: var(--text-size--x4);
  line-height: var(--text-height--x4);
}

.Text--size-x5 {
  font-size: var(--text-size--x5);
  line-height: var(--text-height--x5);
}

.Text--size-x6 {
  font-size: var(--text-size--x6);
  line-height: var(--text-height--x6);
}

.Text--size-x7 {
  font-size: var(--text-size--x7);
  line-height: var(--text-height--x7);
}

.Text--size-x8 {
  font-size: var(--text-size--x8);
  line-height: var(--text-height--x8);
}

.Text--weight-x1 { font-weight: var(--text-weight--x1); }
.Text--weight-x2 { font-weight: var(--text-weight--x2); }
.Text--weight-x3 { font-weight: var(--text-weight--x3); }
.Text--weight-x4 { font-weight: var(--text-weight--x4); }
.Text--weight-x5 { font-weight: var(--text-weight--x5); }

.Text--ellipsis {
  max-width: 100%;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.Text--emphasis { font-style: italic; }

.Text--superscript,
.Text--subscript {
  position: relative;
  font-size: var(--text-size--x2);
  line-height: 0;
  vertical-align: baseline;
}

/* stylelint-disable */
.Text--subscript   { bottom: -0.25em; }
.Text--superscript { top: -0.5em; }
/* stylelint-enable */

.Text--titlecase { text-transform: capitalize; }
.Text--uppercase { text-transform: uppercase; }
`, "",{"version":3,"sources":["webpack://./src/preshape/Text/Text.css"],"names":[],"mappings":"AAAA;EACE,gCAAgC;EAChC,wCAAwC;EACxC,iCAAiC;EACjC,mCAAmC;EACnC,qCAAqC;AACvC;;AAEA;EACE,oBAAoB;AACtB;;AAEA,mBAAmB,0CAA0C,EAAE;;AAE/D,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,kBAAkB,EAAE;AAC1C,sBAAsB,iBAAiB,EAAE;;AAEzC,oBAAoB,qBAAqB,EAAE;AAC3C,oBAAoB,mBAAmB,EAAE;AACzC,oBAAoB,qBAAqB,EAAE;;AAE3C;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;EACE,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA,mBAAmB,mCAAmC,EAAE;AACxD,mBAAmB,mCAAmC,EAAE;AACxD,mBAAmB,mCAAmC,EAAE;AACxD,mBAAmB,mCAAmC,EAAE;AACxD,mBAAmB,mCAAmC,EAAE;;AAExD;EACE,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA,kBAAkB,kBAAkB,EAAE;;AAEtC;;EAEE,kBAAkB;EAClB,+BAA+B;EAC/B,cAAc;EACd,wBAAwB;AAC1B;;AAEA,sBAAsB;AACtB,qBAAqB,eAAe,EAAE;AACtC,qBAAqB,WAAW,EAAE;AAClC,qBAAqB;;AAErB,mBAAmB,0BAA0B,EAAE;AAC/C,mBAAmB,yBAAyB,EAAE","sourcesContent":["body {\n  color: var(--color-text-shade-2);\n  font-family: var(--text-family--content);\n  font-size: var(--text-size--body);\n  -webkit-font-smoothing: antialiased;\n  line-height: var(--text-height--body);\n}\n\n.Text {\n  font-weight: inherit;\n}\n\n.Text--monospace { font-family: var(--text-family--monospace); }\n\n.Text--align-start  { text-align: left; }\n.Text--align-middle { text-align: center; }\n.Text--align-end    { text-align: right; }\n\n.Text--break-all  { word-break: break-all; }\n.Text--break-none { white-space: nowrap; }\n.Text--break-word { word-wrap: break-word; }\n\n.Text--size-x1 {\n  font-size: var(--text-size--x1);\n  line-height: var(--text-height--x1);\n}\n\n.Text--size-x2 {\n  font-size: var(--text-size--x2);\n  line-height: var(--text-height--x2);\n}\n\n.Text--size-x3 {\n  font-size: var(--text-size--x3);\n  line-height: var(--text-height--x3);\n}\n\n.Text--size-x4 {\n  font-size: var(--text-size--x4);\n  line-height: var(--text-height--x4);\n}\n\n.Text--size-x5 {\n  font-size: var(--text-size--x5);\n  line-height: var(--text-height--x5);\n}\n\n.Text--size-x6 {\n  font-size: var(--text-size--x6);\n  line-height: var(--text-height--x6);\n}\n\n.Text--size-x7 {\n  font-size: var(--text-size--x7);\n  line-height: var(--text-height--x7);\n}\n\n.Text--size-x8 {\n  font-size: var(--text-size--x8);\n  line-height: var(--text-height--x8);\n}\n\n.Text--weight-x1 { font-weight: var(--text-weight--x1); }\n.Text--weight-x2 { font-weight: var(--text-weight--x2); }\n.Text--weight-x3 { font-weight: var(--text-weight--x3); }\n.Text--weight-x4 { font-weight: var(--text-weight--x4); }\n.Text--weight-x5 { font-weight: var(--text-weight--x5); }\n\n.Text--ellipsis {\n  max-width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.Text--emphasis { font-style: italic; }\n\n.Text--superscript,\n.Text--subscript {\n  position: relative;\n  font-size: var(--text-size--x2);\n  line-height: 0;\n  vertical-align: baseline;\n}\n\n/* stylelint-disable */\n.Text--subscript   { bottom: -0.25em; }\n.Text--superscript { top: -0.5em; }\n/* stylelint-enable */\n\n.Text--titlecase { text-transform: capitalize; }\n.Text--uppercase { text-transform: uppercase; }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/preshape/box/box.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/preshape/box/box.css ***!
  \************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.Box {
    flex: 0 0 auto;
    margin: 0;
  }
  
  .Box--clickable { cursor: pointer; }
  .Box--container { position: relative; }
  
  .Box--overflow-hidden { overflow: hidden; }
  .Box--overflow-scroll { overflow: auto; }
  
  .Box[class*="Box--margin"] {
    /**
     * To support non-Box elements as siblings, this can't use first-child, last-child, etc.
     * Instead, it uses the nth-child selector to target the first and last Box element.
     */
    &:nth-child(1 of .Box):not([class*="Box--padding-offset-top"]) { margin-top: 0; }
    &:nth-last-child(1 of .Box):not([class*="Box--padding-offset-bottom"]) { margin-bottom: 0; }
  }
  
  .Box--margin-x1 { margin: var(--size--x1) 0; }
  .Box--margin-x2 { margin: var(--size--x2) 0; }
  .Box--margin-x3 { margin: var(--size--x3) 0; }
  .Box--margin-x4 { margin: var(--size--x4) 0; }
  .Box--margin-x5 { margin: var(--size--x5) 0; }
  .Box--margin-x6 { margin: var(--size--x6) 0; }
  .Box--margin-x8 { margin: var(--size--x8) 0; }
  .Box--margin-x10 { margin: var(--size--x10) 0; }
  .Box--margin-x12 { margin: var(--size--x12) 0; }
  .Box--margin-x16 { margin: var(--size--x16) 0; }
  .Box--margin-x24 { margin: var(--size--x24) 0; }
  .Box--margin-x32 { margin: var(--size--x32) 0; }
  
  .Box--padding-top-x0 { padding-top: 0; }
  .Box--padding-top-x1 { padding-top: var(--size--x1); }
  .Box--padding-top-x2 { padding-top: var(--size--x2); }
  .Box--padding-top-x3 { padding-top: var(--size--x3); }
  .Box--padding-top-x4 { padding-top: var(--size--x4); }
  .Box--padding-top-x5 { padding-top: var(--size--x5); }
  .Box--padding-top-x6 { padding-top: var(--size--x6); }
  .Box--padding-top-x8 { padding-top: var(--size--x8); }
  .Box--padding-top-x10 { padding-top: var(--size--x10); }
  .Box--padding-top-x12 { padding-top: var(--size--x12); }
  .Box--padding-top-x16 { padding-top: var(--size--x16); }
  .Box--padding-top-x24 { padding-top: var(--size--x24); }
  .Box--padding-top-x32 { padding-top: var(--size--x32); }
  
  .Box--padding-right-x0 { padding-right: 0; }
  .Box--padding-right-x1 { padding-right: var(--size--x1); }
  .Box--padding-right-x2 { padding-right: var(--size--x2); }
  .Box--padding-right-x3 { padding-right: var(--size--x3); }
  .Box--padding-right-x4 { padding-right: var(--size--x4); }
  .Box--padding-right-x5 { padding-right: var(--size--x5); }
  .Box--padding-right-x6 { padding-right: var(--size--x6); }
  .Box--padding-right-x8 { padding-right: var(--size--x8); }
  .Box--padding-right-x10 { padding-right: var(--size--x10); }
  .Box--padding-right-x12 { padding-right: var(--size--x12); }
  .Box--padding-right-x16 { padding-right: var(--size--x16); }
  .Box--padding-right-x24 { padding-right: var(--size--x24); }
  .Box--padding-right-x32 { padding-right: var(--size--x32); }
  
  .Box--padding-bottom-x0 { padding-bottom: 0; }
  .Box--padding-bottom-x1 { padding-bottom: var(--size--x1); }
  .Box--padding-bottom-x2 { padding-bottom: var(--size--x2); }
  .Box--padding-bottom-x3 { padding-bottom: var(--size--x3); }
  .Box--padding-bottom-x4 { padding-bottom: var(--size--x4); }
  .Box--padding-bottom-x5 { padding-bottom: var(--size--x5); }
  .Box--padding-bottom-x6 { padding-bottom: var(--size--x6); }
  .Box--padding-bottom-x8 { padding-bottom: var(--size--x8); }
  .Box--padding-bottom-x10 { padding-bottom: var(--size--x10); }
  .Box--padding-bottom-x12 { padding-bottom: var(--size--x12); }
  .Box--padding-bottom-x16 { padding-bottom: var(--size--x16); }
  .Box--padding-bottom-x24 { padding-bottom: var(--size--x24); }
  .Box--padding-bottom-x32 { padding-bottom: var(--size--x32); }
  
  .Box--padding-left-x0 { padding-left: 0; }
  .Box--padding-left-x1 { padding-left: var(--size--x1); }
  .Box--padding-left-x2 { padding-left: var(--size--x2); }
  .Box--padding-left-x3 { padding-left: var(--size--x3); }
  .Box--padding-left-x4 { padding-left: var(--size--x4); }
  .Box--padding-left-x5 { padding-left: var(--size--x5); }
  .Box--padding-left-x6 { padding-left: var(--size--x6); }
  .Box--padding-left-x8 { padding-left: var(--size--x8); }
  .Box--padding-left-x10 { padding-left: var(--size--x10); }
  .Box--padding-left-x12 { padding-left: var(--size--x12); }
  .Box--padding-left-x16 { padding-left: var(--size--x16); }
  .Box--padding-left-x24 { padding-left: var(--size--x24); }
  .Box--padding-left-x32 { padding-left: var(--size--x32); }
  
  .Box--padding-offset-bottom-x1 { margin-bottom: calc(var(--size--x1) * -1); }
  .Box--padding-offset-bottom-x2 { margin-bottom: calc(var(--size--x2) * -1); }
  .Box--padding-offset-bottom-x3 { margin-bottom: calc(var(--size--x3) * -1); }
  .Box--padding-offset-bottom-x4 { margin-bottom: calc(var(--size--x4) * -1); }
  .Box--padding-offset-bottom-x5 { margin-bottom: calc(var(--size--x5) * -1); }
  .Box--padding-offset-bottom-x6 { margin-bottom: calc(var(--size--x6) * -1); }
  .Box--padding-offset-bottom-x8 { margin-bottom: calc(var(--size--x8) * -1); }
  .Box--padding-offset-bottom-x10 { margin-bottom: calc(var(--size--x10) * -1); }
  .Box--padding-offset-bottom-x12 { margin-bottom: calc(var(--size--x12) * -1); }
  .Box--padding-offset-bottom-x16 { margin-bottom: calc(var(--size--x16) * -1); }
  .Box--padding-offset-bottom-x24 { margin-bottom: calc(var(--size--x24) * -1); }
  .Box--padding-offset-bottom-x32 { margin-bottom: calc(var(--size--x32) * -1); }
  
  .Box--padding-offset-top-x1 { margin-top: calc(var(--size--x1) * -1); }
  .Box--padding-offset-top-x2 { margin-top: calc(var(--size--x2) * -1); }
  .Box--padding-offset-top-x3 { margin-top: calc(var(--size--x3) * -1); }
  .Box--padding-offset-top-x4 { margin-top: calc(var(--size--x4) * -1); }
  .Box--padding-offset-top-x5 { margin-top: calc(var(--size--x5) * -1); }
  .Box--padding-offset-top-x6 { margin-top: calc(var(--size--x6) * -1); }
  .Box--padding-offset-top-x8 { margin-top: calc(var(--size--x8) * -1); }
  .Box--padding-offset-top-x10 { margin-top: calc(var(--size--x10) * -1); }
  .Box--padding-offset-top-x12 { margin-top: calc(var(--size--x12) * -1); }
  .Box--padding-offset-top-x16 { margin-top: calc(var(--size--x16) * -1); }
  .Box--padding-offset-top-x24 { margin-top: calc(var(--size--x24) * -1); }
  .Box--padding-offset-top-x32 { margin-top: calc(var(--size--x32) * -1); }
  
  .Box--padding-offset-right-x1 { margin-right: calc(var(--size--x1) * -1); }
  .Box--padding-offset-right-x2 { margin-right: calc(var(--size--x2) * -1); }
  .Box--padding-offset-right-x3 { margin-right: calc(var(--size--x3) * -1); }
  .Box--padding-offset-right-x4 { margin-right: calc(var(--size--x4) * -1); }
  .Box--padding-offset-right-x5 { margin-right: calc(var(--size--x5) * -1); }
  .Box--padding-offset-right-x6 { margin-right: calc(var(--size--x6) * -1); }
  .Box--padding-offset-right-x8 { margin-right: calc(var(--size--x8) * -1); }
  .Box--padding-offset-right-x10 { margin-right: calc(var(--size--x10) * -1); }
  .Box--padding-offset-right-x12 { margin-right: calc(var(--size--x12) * -1); }
  .Box--padding-offset-right-x16 { margin-right: calc(var(--size--x16) * -1); }
  .Box--padding-offset-right-x24 { margin-right: calc(var(--size--x24) * -1); }
  .Box--padding-offset-right-x32 { margin-right: calc(var(--size--x32) * -1); }
  
  .Box--padding-offset-left-x1 { margin-left: calc(var(--size--x1) * -1); }
  .Box--padding-offset-left-x2 { margin-left: calc(var(--size--x2) * -1); }
  .Box--padding-offset-left-x3 { margin-left: calc(var(--size--x3) * -1); }
  .Box--padding-offset-left-x4 { margin-left: calc(var(--size--x4) * -1); }
  .Box--padding-offset-left-x5 { margin-left: calc(var(--size--x5) * -1); }
  .Box--padding-offset-left-x6 { margin-left: calc(var(--size--x6) * -1); }
  .Box--padding-offset-left-x8 { margin-left: calc(var(--size--x8) * -1); }
  .Box--padding-offset-left-x10 { margin-left: calc(var(--size--x10) * -1); }
  .Box--padding-offset-left-x12 { margin-left: calc(var(--size--x12) * -1); }
  .Box--padding-offset-left-x16 { margin-left: calc(var(--size--x16) * -1); }
  .Box--padding-offset-left-x24 { margin-left: calc(var(--size--x24) * -1); }
  .Box--padding-offset-left-x32 { margin-left: calc(var(--size--x32) * -1); }
  
  .Box--border-radius-x1 { border-radius: var(--border-radius-size--x1); }
  .Box--border-radius-x2 { border-radius: var(--border-radius-size--x2); }
  .Box--border-radius-x3 { border-radius: var(--border-radius-size--x3); }
  .Box--border-radius-x4 { border-radius: var(--border-radius-size--x4); }
  .Box--border-radius-x5 { border-radius: var(--border-radius-size--x5); }
  .Box--border-radius-x6 { border-radius: var(--border-radius-size--x6); }
  .Box--border-radius-full { border-radius: 50%; }
  
  .Box--border-size-x1,
  .Box--border {
    border-width: var(--border-size--x1);
  }
  
  .Box--border-size-x0 { border-width: 0; }
  .Box--border-size-x2 { border-width: var(--border-size--x2); }
  .Box--border-size-x3 { border-width: var(--border-size--x3); }
  
  .Box--border,
  .Box--border-size-x1,
  .Box--border-size-x2,
  .Box--border-size-x3 {
    border-style: solid;
  }
  
  .Box--border-style-dashed {
    border-style: dashed;
  }
  
  .Box--border:not(.Box--border-top) { border-top-width: 0; }
  .Box--border:not(.Box--border-right) { border-right-width: 0; }
  .Box--border:not(.Box--border-bottom) { border-bottom-width: 0; }
  .Box--border:not(.Box--border-left) { border-left-width: 0; }
  
  .Box--max-width {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
  }
  
  .Box--elevate--x1 { box-shadow: var(--shadow-elevation--x1); }
  
  .Box--elevate,
  .Box--elevate--x2 { box-shadow: var(--shadow-elevation--x2); }
  .Box--elevate--x3 { box-shadow: var(--shadow-elevation--x3); }
  
  .Box--transition-fast,
  .Box--transition-base,
  .Box--transition-slow {
    transition-timing-function: var(--transition-timing-function);
  }
  
  .Box--transition-fast { transition-duration: var(--transition-duration--fast); }
  .Box--transition-base { transition-duration: var(--transition-duration--base); }
  .Box--transition-slow { transition-duration: var(--transition-duration--slow); }
  
  .Box--position-absolute {
    position: absolute;
  }
  
  .Box--position-fixed {
    position: fixed;
  }
  
  .Box--position-edge-to-edge {
    width: 100%;
    height: 100%;
  }
  
  .Box--position-edge-to-edge,
  .Box--position-top,
  .Box--position-top-left,
  .Box--position-top-right { top: 0; }
  
  .Box--position-edge-to-edge,
  .Box--position-bottom,
  .Box--position-bottom-left,
  .Box--position-bottom-right { bottom: 0; }
  
  .Box--position-edge-to-edge,
  .Box--position-left,
  .Box--position-top-left,
  .Box--position-bottom-left { left: 0; }
  
  .Box--position-edge-to-edge,
  .Box--position-right,
  .Box--position-top-right,
  .Box--position-bottom-right { right: 0; }
  
  .Box--position-center {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  
  .Box--position-left,
  .Box--position-right {
    top: 50%;
    transform: translate(0, -50%);
  }
  
  .Box--position-top,
  .Box--position-bottom {
    left: 50%;
    transform: translate(-50%, 0);
  }
  
  /********
   * Flex *
   ********/
  .Box--flex-horizontal,
  .Box--flex-vertical {
    display: flex;
  }
  
  .Box--flex-horizontal { flex-direction: row; }
  .Box--flex-vertical   { flex-direction: column; }
  
  .Box--flex-reverse.Box--flex-horizontal { flex-direction: row-reverse; }
  .Box--flex-reverse.Box--flex-vertical { flex-direction: column-reverse; }
  
  .Box--flex-horizontal > .Box--flex-basis-none { width: 0; }
  .Box--flex-vertical > .Box--flex-basis-none { height: 0; }
  
  .Box--flex-wrap { flex-wrap: wrap; }
  
  .Box--flex-align-self-start  { align-self: flex-start; }
  .Box--flex-align-self-middle { align-self: center; }
  .Box--flex-align-self-end    { align-self: flex-end; }
  
  .Box--flex-horizontal.Box--flex-align-horz-stretch { justify-content: stretch; }
  .Box--flex-horizontal.Box--flex-align-horz-start   { justify-content: flex-start; }
  .Box--flex-horizontal.Box--flex-align-horz-middle  { justify-content: center; }
  .Box--flex-horizontal.Box--flex-align-horz-end     { justify-content: flex-end; }
  .Box--flex-horizontal.Box--flex-align-horz-around  { justify-content: space-around; }
  .Box--flex-horizontal.Box--flex-align-horz-between { justify-content: space-between; }
  
  .Box--flex-horizontal.Box--flex-align-vert-start  { align-items: flex-start; }
  .Box--flex-horizontal.Box--flex-align-vert-middle { align-items: center; }
  .Box--flex-horizontal.Box--flex-align-vert-end    { align-items: flex-end; }
  
  .Box--flex-vertical.Box--flex-align-horz-start  { align-items: flex-start; }
  .Box--flex-vertical.Box--flex-align-horz-middle { align-items: center; }
  .Box--flex-vertical.Box--flex-align-horz-end    { align-items: flex-end; }
  
  .Box--flex-vertical.Box--flex-align-vert-start   { justify-content: flex-start; }
  .Box--flex-vertical.Box--flex-align-vert-middle  { justify-content: center; }
  .Box--flex-vertical.Box--flex-align-vert-end     { justify-content: flex-end; }
  .Box--flex-vertical.Box--flex-align-vert-around  { justify-content: space-around; }
  .Box--flex-vertical.Box--flex-align-vert-between { justify-content: space-between; }
  
  .Box--flex-gap-horizontal-x1 { column-gap: var(--size--x1); }
  .Box--flex-gap-horizontal-x2 { column-gap: var(--size--x2); }
  .Box--flex-gap-horizontal-x3 { column-gap: var(--size--x3); }
  .Box--flex-gap-horizontal-x4 { column-gap: var(--size--x4); }
  .Box--flex-gap-horizontal-x5 { column-gap: var(--size--x5); }
  .Box--flex-gap-horizontal-x6 { column-gap: var(--size--x6); }
  .Box--flex-gap-horizontal-x8 { column-gap: var(--size--x8); }
  .Box--flex-gap-horizontal-x10 { column-gap: var(--size--x10); }
  .Box--flex-gap-horizontal-x12 { column-gap: var(--size--x12); }
  .Box--flex-gap-horizontal-x16 { column-gap: var(--size--x16); }
  .Box--flex-gap-horizontal-x24 { column-gap: var(--size--x24); }
  .Box--flex-gap-horizontal-x32 { column-gap: var(--size--x32); }
  
  .Box--flex-gap-vertical-x1 { row-gap: var(--size--x1); }
  .Box--flex-gap-vertical-x2 { row-gap: var(--size--x2); }
  .Box--flex-gap-vertical-x3 { row-gap: var(--size--x3); }
  .Box--flex-gap-vertical-x4 { row-gap: var(--size--x4); }
  .Box--flex-gap-vertical-x5 { row-gap: var(--size--x5); }
  .Box--flex-gap-vertical-x6 { row-gap: var(--size--x6); }
  .Box--flex-gap-vertical-x8 { row-gap: var(--size--x8); }
  .Box--flex-gap-vertical-x10 { row-gap: var(--size--x10); }
  .Box--flex-gap-vertical-x12 { row-gap: var(--size--x12); }
  .Box--flex-gap-vertical-x16 { row-gap: var(--size--x16); }
  .Box--flex-gap-vertical-x24 { row-gap: var(--size--x24); }
  .Box--flex-gap-vertical-x32 { row-gap: var(--size--x32); }
  
  /**********
   * Colors *
   **********/
  .Box--background-color-black { background-color: var(--color-black); }
  .Box--background-color-white { background-color: var(--color-white); }
  .Box--background-color-highlight { background-color: var(--color-highlight); }
  .Box--background-color-overlay { background-color: var(--color-overlay); }
  .Box--background-color-transparent { background-color: transparent; }
  .Box--background-color-accent-shade-1 { background-color: var(--color-accent-shade-1); }
  .Box--background-color-accent-shade-2 { background-color: var(--color-accent-shade-2); }
  .Box--background-color-accent-shade-3 { background-color: var(--color-accent-shade-3); }
  .Box--background-color-accent-shade-4 { background-color: var(--color-accent-shade-4); }
  .Box--background-color-accent-shade-5 { background-color: var(--color-accent-shade-5); }
  .Box--background-color-background-shade-1 { background-color: var(--color-background-shade-1); }
  .Box--background-color-background-shade-2 { background-color: var(--color-background-shade-2); }
  .Box--background-color-background-shade-3 { background-color: var(--color-background-shade-3); }
  .Box--background-color-background-shade-4 { background-color: var(--color-background-shade-4); }
  .Box--background-color-dark-shade-1 { background-color: var(--color-dark-shade-1); }
  .Box--background-color-dark-shade-2 { background-color: var(--color-dark-shade-2); }
  .Box--background-color-dark-shade-3 { background-color: var(--color-dark-shade-3); }
  .Box--background-color-light-shade-1 { background-color: var(--color-light-shade-1); }
  .Box--background-color-light-shade-2 { background-color: var(--color-light-shade-2); }
  .Box--background-color-light-shade-3 { background-color: var(--color-light-shade-3); }
  .Box--background-color-text-shade-1 { background-color: var(--color-text-shade-1); }
  .Box--background-color-text-shade-2 { background-color: var(--color-text-shade-2); }
  .Box--background-color-text-shade-3 { background-color: var(--color-text-shade-3); }
  .Box--background-color-negative-shade-1 { background-color: var(--color-negative-shade-1); }
  .Box--background-color-negative-shade-2 { background-color: var(--color-negative-shade-2); }
  .Box--background-color-negative-shade-3 { background-color: var(--color-negative-shade-3); }
  .Box--background-color-negative-shade-4 { background-color: var(--color-negative-shade-4); }
  .Box--background-color-negative-shade-5 { background-color: var(--color-negative-shade-5); }
  .Box--background-color-positive-shade-1 { background-color: var(--color-positive-shade-1); }
  .Box--background-color-positive-shade-2 { background-color: var(--color-positive-shade-2); }
  .Box--background-color-positive-shade-3 { background-color: var(--color-positive-shade-3); }
  .Box--background-color-positive-shade-4 { background-color: var(--color-positive-shade-4); }
  .Box--background-color-positive-shade-5 { background-color: var(--color-positive-shade-5); }
  
  .Box--border-color-black { border-color: var(--color-black); }
  .Box--border-color-white { border-color: var(--color-white); }
  .Box--border-color-highlight { border-color: var(--color-highlight); }
  .Box--border-color-transparent { border-color: transparent; }
  .Box--border-color-accent-shade-1 { border-color: var(--color-accent-shade-1); }
  .Box--border-color-accent-shade-2 { border-color: var(--color-accent-shade-2); }
  .Box--border-color-accent-shade-3 { border-color: var(--color-accent-shade-3); }
  .Box--border-color-accent-shade-4 { border-color: var(--color-accent-shade-4); }
  .Box--border-color-accent-shade-5 { border-color: var(--color-accent-shade-5); }
  .Box--border-color-background-shade-1 { border-color: var(--color-background-shade-1); }
  .Box--border-color-background-shade-2 { border-color: var(--color-background-shade-2); }
  .Box--border-color-background-shade-3 { border-color: var(--color-background-shade-3); }
  .Box--border-color-background-shade-4 { border-color: var(--color-background-shade-4); }
  .Box--border-color-dark-shade-1 { border-color: var(--color-dark-shade-1); }
  .Box--border-color-dark-shade-2 { border-color: var(--color-dark-shade-2); }
  .Box--border-color-dark-shade-3 { border-color: var(--color-dark-shade-3); }
  .Box--border-color-light-shade-1 { border-color: var(--color-light-shade-1); }
  .Box--border-color-light-shade-2 { border-color: var(--color-light-shade-2); }
  .Box--border-color-light-shade-3 { border-color: var(--color-light-shade-3); }
  .Box--border-color-text-shade-1 { border-color: var(--color-text-shade-1); }
  .Box--border-color-text-shade-2 { border-color: var(--color-text-shade-2); }
  .Box--border-color-text-shade-3 { border-color: var(--color-text-shade-3); }
  .Box--border-color-text-shade-4 { border-color: var(--color-text-shade-4); }
  .Box--border-color-negative-shade-1 { border-color: var(--color-negative-shade-1); }
  .Box--border-color-negative-shade-2 { border-color: var(--color-negative-shade-2); }
  .Box--border-color-negative-shade-3 { border-color: var(--color-negative-shade-3); }
  .Box--border-color-negative-shade-4 { border-color: var(--color-negative-shade-4); }
  .Box--border-color-negative-shade-5 { border-color: var(--color-negative-shade-5); }
  .Box--border-color-positive-shade-1 { border-color: var(--color-positive-shade-1); }
  .Box--border-color-positive-shade-2 { border-color: var(--color-positive-shade-2); }
  .Box--border-color-positive-shade-3 { border-color: var(--color-positive-shade-3); }
  .Box--border-color-positive-shade-4 { border-color: var(--color-positive-shade-4); }
  .Box--border-color-positive-shade-5 { border-color: var(--color-positive-shade-5); }
  
  .Box--text-color-black { color: var(--color-black); }
  .Box--text-color-white { color: var(--color-white); }
  .Box--text-color-highlight { color: var(--color-highlight); }
  .Box--text-color-transparent { color: transparent; }
  .Box--text-color-accent-shade-1 { color: var(--color-accent-shade-1); }
  .Box--text-color-accent-shade-2 { color: var(--color-accent-shade-2); }
  .Box--text-color-accent-shade-3 { color: var(--color-accent-shade-3); }
  .Box--text-color-accent-shade-4 { color: var(--color-accent-shade-4); }
  .Box--text-color-accent-shade-5 { color: var(--color-accent-shade-5); }
  .Box--text-color-background-shade-1 { color: var(--color-background-shade-1); }
  .Box--text-color-background-shade-2 { color: var(--color-background-shade-2); }
  .Box--text-color-background-shade-3 { color: var(--color-background-shade-3); }
  .Box--text-color-background-shade-4 { color: var(--color-background-shade-4); }
  .Box--text-color-dark-shade-1 { color: var(--color-dark-shade-1); }
  .Box--text-color-dark-shade-2 { color: var(--color-dark-shade-2); }
  .Box--text-color-dark-shade-3 { color: var(--color-dark-shade-3); }
  .Box--text-color-light-shade-1 { color: var(--color-light-shade-1); }
  .Box--text-color-light-shade-2 { color: var(--color-light-shade-2); }
  .Box--text-color-light-shade-3 { color: var(--color-light-shade-3); }
  .Box--text-color-text-shade-1 { color: var(--color-text-shade-1); }
  .Box--text-color-text-shade-2 { color: var(--color-text-shade-2); }
  .Box--text-color-text-shade-3 { color: var(--color-text-shade-3); }
  .Box--text-color-negative-shade-1 { color: var(--color-negative-shade-1); }
  .Box--text-color-negative-shade-2 { color: var(--color-negative-shade-2); }
  .Box--text-color-negative-shade-3 { color: var(--color-negative-shade-3); }
  .Box--text-color-negative-shade-4 { color: var(--color-negative-shade-4); }
  .Box--text-color-negative-shade-5 { color: var(--color-negative-shade-5); }
  .Box--text-color-positive-shade-1 { color: var(--color-positive-shade-1); }
  .Box--text-color-positive-shade-2 { color: var(--color-positive-shade-2); }
  .Box--text-color-positive-shade-3 { color: var(--color-positive-shade-3); }
  .Box--text-color-positive-shade-4 { color: var(--color-positive-shade-4); }
  .Box--text-color-positive-shade-5 { color: var(--color-positive-shade-5); }
  `, "",{"version":3,"sources":["webpack://./src/preshape/box/box.css"],"names":[],"mappings":"AAAA;IACI,cAAc;IACd,SAAS;EACX;;EAEA,kBAAkB,eAAe,EAAE;EACnC,kBAAkB,kBAAkB,EAAE;;EAEtC,wBAAwB,gBAAgB,EAAE;EAC1C,wBAAwB,cAAc,EAAE;;EAExC;IACE;;;MAGE;IACF,iEAAiE,aAAa,EAAE;IAChF,yEAAyE,gBAAgB,EAAE;EAC7F;;EAEA,kBAAkB,yBAAyB,EAAE;EAC7C,kBAAkB,yBAAyB,EAAE;EAC7C,kBAAkB,yBAAyB,EAAE;EAC7C,kBAAkB,yBAAyB,EAAE;EAC7C,kBAAkB,yBAAyB,EAAE;EAC7C,kBAAkB,yBAAyB,EAAE;EAC7C,kBAAkB,yBAAyB,EAAE;EAC7C,mBAAmB,0BAA0B,EAAE;EAC/C,mBAAmB,0BAA0B,EAAE;EAC/C,mBAAmB,0BAA0B,EAAE;EAC/C,mBAAmB,0BAA0B,EAAE;EAC/C,mBAAmB,0BAA0B,EAAE;;EAE/C,uBAAuB,cAAc,EAAE;EACvC,uBAAuB,4BAA4B,EAAE;EACrD,uBAAuB,4BAA4B,EAAE;EACrD,uBAAuB,4BAA4B,EAAE;EACrD,uBAAuB,4BAA4B,EAAE;EACrD,uBAAuB,4BAA4B,EAAE;EACrD,uBAAuB,4BAA4B,EAAE;EACrD,uBAAuB,4BAA4B,EAAE;EACrD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;;EAEvD,yBAAyB,gBAAgB,EAAE;EAC3C,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;;EAE3D,0BAA0B,iBAAiB,EAAE;EAC7C,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,0BAA0B,+BAA+B,EAAE;EAC3D,2BAA2B,gCAAgC,EAAE;EAC7D,2BAA2B,gCAAgC,EAAE;EAC7D,2BAA2B,gCAAgC,EAAE;EAC7D,2BAA2B,gCAAgC,EAAE;EAC7D,2BAA2B,gCAAgC,EAAE;;EAE7D,wBAAwB,eAAe,EAAE;EACzC,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,wBAAwB,6BAA6B,EAAE;EACvD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;EACzD,yBAAyB,8BAA8B,EAAE;;EAEzD,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,kCAAkC,0CAA0C,EAAE;EAC9E,kCAAkC,0CAA0C,EAAE;EAC9E,kCAAkC,0CAA0C,EAAE;EAC9E,kCAAkC,0CAA0C,EAAE;EAC9E,kCAAkC,0CAA0C,EAAE;;EAE9E,8BAA8B,sCAAsC,EAAE;EACtE,8BAA8B,sCAAsC,EAAE;EACtE,8BAA8B,sCAAsC,EAAE;EACtE,8BAA8B,sCAAsC,EAAE;EACtE,8BAA8B,sCAAsC,EAAE;EACtE,8BAA8B,sCAAsC,EAAE;EACtE,8BAA8B,sCAAsC,EAAE;EACtE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;;EAExE,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;EAC5E,iCAAiC,yCAAyC,EAAE;;EAE5E,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,+BAA+B,uCAAuC,EAAE;EACxE,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;EAC1E,gCAAgC,wCAAwC,EAAE;;EAE1E,yBAAyB,4CAA4C,EAAE;EACvE,yBAAyB,4CAA4C,EAAE;EACvE,yBAAyB,4CAA4C,EAAE;EACvE,yBAAyB,4CAA4C,EAAE;EACvE,yBAAyB,4CAA4C,EAAE;EACvE,yBAAyB,4CAA4C,EAAE;EACvE,2BAA2B,kBAAkB,EAAE;;EAE/C;;IAEE,oCAAoC;EACtC;;EAEA,uBAAuB,eAAe,EAAE;EACxC,uBAAuB,oCAAoC,EAAE;EAC7D,uBAAuB,oCAAoC,EAAE;;EAE7D;;;;IAIE,mBAAmB;EACrB;;EAEA;IACE,oBAAoB;EACtB;;EAEA,qCAAqC,mBAAmB,EAAE;EAC1D,uCAAuC,qBAAqB,EAAE;EAC9D,wCAAwC,sBAAsB,EAAE;EAChE,sCAAsC,oBAAoB,EAAE;;EAE5D;IACE,WAAW;IACX,kBAAkB;IAClB,iBAAiB;EACnB;;EAEA,oBAAoB,uCAAuC,EAAE;;EAE7D;sBACoB,uCAAuC,EAAE;EAC7D,oBAAoB,uCAAuC,EAAE;;EAE7D;;;IAGE,6DAA6D;EAC/D;;EAEA,wBAAwB,qDAAqD,EAAE;EAC/E,wBAAwB,qDAAqD,EAAE;EAC/E,wBAAwB,qDAAqD,EAAE;;EAE/E;IACE,kBAAkB;EACpB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,WAAW;IACX,YAAY;EACd;;EAEA;;;6BAG2B,MAAM,EAAE;;EAEnC;;;gCAG8B,SAAS,EAAE;;EAEzC;;;+BAG6B,OAAO,EAAE;;EAEtC;;;gCAG8B,QAAQ,EAAE;;EAExC;IACE,QAAQ;IACR,SAAS;IACT,gCAAgC;EAClC;;EAEA;;IAEE,QAAQ;IACR,6BAA6B;EAC/B;;EAEA;;IAEE,SAAS;IACT,6BAA6B;EAC/B;;EAEA;;WAES;EACT;;IAEE,aAAa;EACf;;EAEA,wBAAwB,mBAAmB,EAAE;EAC7C,wBAAwB,sBAAsB,EAAE;;EAEhD,0CAA0C,2BAA2B,EAAE;EACvE,wCAAwC,8BAA8B,EAAE;;EAExE,gDAAgD,QAAQ,EAAE;EAC1D,8CAA8C,SAAS,EAAE;;EAEzD,kBAAkB,eAAe,EAAE;;EAEnC,+BAA+B,sBAAsB,EAAE;EACvD,+BAA+B,kBAAkB,EAAE;EACnD,+BAA+B,oBAAoB,EAAE;;EAErD,qDAAqD,wBAAwB,EAAE;EAC/E,qDAAqD,2BAA2B,EAAE;EAClF,qDAAqD,uBAAuB,EAAE;EAC9E,qDAAqD,yBAAyB,EAAE;EAChF,qDAAqD,6BAA6B,EAAE;EACpF,qDAAqD,8BAA8B,EAAE;;EAErF,oDAAoD,uBAAuB,EAAE;EAC7E,oDAAoD,mBAAmB,EAAE;EACzE,oDAAoD,qBAAqB,EAAE;;EAE3E,kDAAkD,uBAAuB,EAAE;EAC3E,kDAAkD,mBAAmB,EAAE;EACvE,kDAAkD,qBAAqB,EAAE;;EAEzE,mDAAmD,2BAA2B,EAAE;EAChF,mDAAmD,uBAAuB,EAAE;EAC5E,mDAAmD,yBAAyB,EAAE;EAC9E,mDAAmD,6BAA6B,EAAE;EAClF,mDAAmD,8BAA8B,EAAE;;EAEnF,+BAA+B,2BAA2B,EAAE;EAC5D,+BAA+B,2BAA2B,EAAE;EAC5D,+BAA+B,2BAA2B,EAAE;EAC5D,+BAA+B,2BAA2B,EAAE;EAC5D,+BAA+B,2BAA2B,EAAE;EAC5D,+BAA+B,2BAA2B,EAAE;EAC5D,+BAA+B,2BAA2B,EAAE;EAC5D,gCAAgC,4BAA4B,EAAE;EAC9D,gCAAgC,4BAA4B,EAAE;EAC9D,gCAAgC,4BAA4B,EAAE;EAC9D,gCAAgC,4BAA4B,EAAE;EAC9D,gCAAgC,4BAA4B,EAAE;;EAE9D,6BAA6B,wBAAwB,EAAE;EACvD,6BAA6B,wBAAwB,EAAE;EACvD,6BAA6B,wBAAwB,EAAE;EACvD,6BAA6B,wBAAwB,EAAE;EACvD,6BAA6B,wBAAwB,EAAE;EACvD,6BAA6B,wBAAwB,EAAE;EACvD,6BAA6B,wBAAwB,EAAE;EACvD,8BAA8B,yBAAyB,EAAE;EACzD,8BAA8B,yBAAyB,EAAE;EACzD,8BAA8B,yBAAyB,EAAE;EACzD,8BAA8B,yBAAyB,EAAE;EACzD,8BAA8B,yBAAyB,EAAE;;EAEzD;;aAEW;EACX,+BAA+B,oCAAoC,EAAE;EACrE,+BAA+B,oCAAoC,EAAE;EACrE,mCAAmC,wCAAwC,EAAE;EAC7E,iCAAiC,sCAAsC,EAAE;EACzE,qCAAqC,6BAA6B,EAAE;EACpE,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,4CAA4C,iDAAiD,EAAE;EAC/F,4CAA4C,iDAAiD,EAAE;EAC/F,4CAA4C,iDAAiD,EAAE;EAC/F,4CAA4C,iDAAiD,EAAE;EAC/F,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,uCAAuC,4CAA4C,EAAE;EACrF,uCAAuC,4CAA4C,EAAE;EACrF,uCAAuC,4CAA4C,EAAE;EACrF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;EAC3F,0CAA0C,+CAA+C,EAAE;;EAE3F,2BAA2B,gCAAgC,EAAE;EAC7D,2BAA2B,gCAAgC,EAAE;EAC7D,+BAA+B,oCAAoC,EAAE;EACrE,iCAAiC,yBAAyB,EAAE;EAC5D,oCAAoC,yCAAyC,EAAE;EAC/E,oCAAoC,yCAAyC,EAAE;EAC/E,oCAAoC,yCAAyC,EAAE;EAC/E,oCAAoC,yCAAyC,EAAE;EAC/E,oCAAoC,yCAAyC,EAAE;EAC/E,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,wCAAwC,6CAA6C,EAAE;EACvF,kCAAkC,uCAAuC,EAAE;EAC3E,kCAAkC,uCAAuC,EAAE;EAC3E,kCAAkC,uCAAuC,EAAE;EAC3E,mCAAmC,wCAAwC,EAAE;EAC7E,mCAAmC,wCAAwC,EAAE;EAC7E,mCAAmC,wCAAwC,EAAE;EAC7E,kCAAkC,uCAAuC,EAAE;EAC3E,kCAAkC,uCAAuC,EAAE;EAC3E,kCAAkC,uCAAuC,EAAE;EAC3E,kCAAkC,uCAAuC,EAAE;EAC3E,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;EACnF,sCAAsC,2CAA2C,EAAE;;EAEnF,yBAAyB,yBAAyB,EAAE;EACpD,yBAAyB,yBAAyB,EAAE;EACpD,6BAA6B,6BAA6B,EAAE;EAC5D,+BAA+B,kBAAkB,EAAE;EACnD,kCAAkC,kCAAkC,EAAE;EACtE,kCAAkC,kCAAkC,EAAE;EACtE,kCAAkC,kCAAkC,EAAE;EACtE,kCAAkC,kCAAkC,EAAE;EACtE,kCAAkC,kCAAkC,EAAE;EACtE,sCAAsC,sCAAsC,EAAE;EAC9E,sCAAsC,sCAAsC,EAAE;EAC9E,sCAAsC,sCAAsC,EAAE;EAC9E,sCAAsC,sCAAsC,EAAE;EAC9E,gCAAgC,gCAAgC,EAAE;EAClE,gCAAgC,gCAAgC,EAAE;EAClE,gCAAgC,gCAAgC,EAAE;EAClE,iCAAiC,iCAAiC,EAAE;EACpE,iCAAiC,iCAAiC,EAAE;EACpE,iCAAiC,iCAAiC,EAAE;EACpE,gCAAgC,gCAAgC,EAAE;EAClE,gCAAgC,gCAAgC,EAAE;EAClE,gCAAgC,gCAAgC,EAAE;EAClE,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE;EAC1E,oCAAoC,oCAAoC,EAAE","sourcesContent":[".Box {\r\n    flex: 0 0 auto;\r\n    margin: 0;\r\n  }\r\n  \r\n  .Box--clickable { cursor: pointer; }\r\n  .Box--container { position: relative; }\r\n  \r\n  .Box--overflow-hidden { overflow: hidden; }\r\n  .Box--overflow-scroll { overflow: auto; }\r\n  \r\n  .Box[class*=\"Box--margin\"] {\r\n    /**\r\n     * To support non-Box elements as siblings, this can't use first-child, last-child, etc.\r\n     * Instead, it uses the nth-child selector to target the first and last Box element.\r\n     */\r\n    &:nth-child(1 of .Box):not([class*=\"Box--padding-offset-top\"]) { margin-top: 0; }\r\n    &:nth-last-child(1 of .Box):not([class*=\"Box--padding-offset-bottom\"]) { margin-bottom: 0; }\r\n  }\r\n  \r\n  .Box--margin-x1 { margin: var(--size--x1) 0; }\r\n  .Box--margin-x2 { margin: var(--size--x2) 0; }\r\n  .Box--margin-x3 { margin: var(--size--x3) 0; }\r\n  .Box--margin-x4 { margin: var(--size--x4) 0; }\r\n  .Box--margin-x5 { margin: var(--size--x5) 0; }\r\n  .Box--margin-x6 { margin: var(--size--x6) 0; }\r\n  .Box--margin-x8 { margin: var(--size--x8) 0; }\r\n  .Box--margin-x10 { margin: var(--size--x10) 0; }\r\n  .Box--margin-x12 { margin: var(--size--x12) 0; }\r\n  .Box--margin-x16 { margin: var(--size--x16) 0; }\r\n  .Box--margin-x24 { margin: var(--size--x24) 0; }\r\n  .Box--margin-x32 { margin: var(--size--x32) 0; }\r\n  \r\n  .Box--padding-top-x0 { padding-top: 0; }\r\n  .Box--padding-top-x1 { padding-top: var(--size--x1); }\r\n  .Box--padding-top-x2 { padding-top: var(--size--x2); }\r\n  .Box--padding-top-x3 { padding-top: var(--size--x3); }\r\n  .Box--padding-top-x4 { padding-top: var(--size--x4); }\r\n  .Box--padding-top-x5 { padding-top: var(--size--x5); }\r\n  .Box--padding-top-x6 { padding-top: var(--size--x6); }\r\n  .Box--padding-top-x8 { padding-top: var(--size--x8); }\r\n  .Box--padding-top-x10 { padding-top: var(--size--x10); }\r\n  .Box--padding-top-x12 { padding-top: var(--size--x12); }\r\n  .Box--padding-top-x16 { padding-top: var(--size--x16); }\r\n  .Box--padding-top-x24 { padding-top: var(--size--x24); }\r\n  .Box--padding-top-x32 { padding-top: var(--size--x32); }\r\n  \r\n  .Box--padding-right-x0 { padding-right: 0; }\r\n  .Box--padding-right-x1 { padding-right: var(--size--x1); }\r\n  .Box--padding-right-x2 { padding-right: var(--size--x2); }\r\n  .Box--padding-right-x3 { padding-right: var(--size--x3); }\r\n  .Box--padding-right-x4 { padding-right: var(--size--x4); }\r\n  .Box--padding-right-x5 { padding-right: var(--size--x5); }\r\n  .Box--padding-right-x6 { padding-right: var(--size--x6); }\r\n  .Box--padding-right-x8 { padding-right: var(--size--x8); }\r\n  .Box--padding-right-x10 { padding-right: var(--size--x10); }\r\n  .Box--padding-right-x12 { padding-right: var(--size--x12); }\r\n  .Box--padding-right-x16 { padding-right: var(--size--x16); }\r\n  .Box--padding-right-x24 { padding-right: var(--size--x24); }\r\n  .Box--padding-right-x32 { padding-right: var(--size--x32); }\r\n  \r\n  .Box--padding-bottom-x0 { padding-bottom: 0; }\r\n  .Box--padding-bottom-x1 { padding-bottom: var(--size--x1); }\r\n  .Box--padding-bottom-x2 { padding-bottom: var(--size--x2); }\r\n  .Box--padding-bottom-x3 { padding-bottom: var(--size--x3); }\r\n  .Box--padding-bottom-x4 { padding-bottom: var(--size--x4); }\r\n  .Box--padding-bottom-x5 { padding-bottom: var(--size--x5); }\r\n  .Box--padding-bottom-x6 { padding-bottom: var(--size--x6); }\r\n  .Box--padding-bottom-x8 { padding-bottom: var(--size--x8); }\r\n  .Box--padding-bottom-x10 { padding-bottom: var(--size--x10); }\r\n  .Box--padding-bottom-x12 { padding-bottom: var(--size--x12); }\r\n  .Box--padding-bottom-x16 { padding-bottom: var(--size--x16); }\r\n  .Box--padding-bottom-x24 { padding-bottom: var(--size--x24); }\r\n  .Box--padding-bottom-x32 { padding-bottom: var(--size--x32); }\r\n  \r\n  .Box--padding-left-x0 { padding-left: 0; }\r\n  .Box--padding-left-x1 { padding-left: var(--size--x1); }\r\n  .Box--padding-left-x2 { padding-left: var(--size--x2); }\r\n  .Box--padding-left-x3 { padding-left: var(--size--x3); }\r\n  .Box--padding-left-x4 { padding-left: var(--size--x4); }\r\n  .Box--padding-left-x5 { padding-left: var(--size--x5); }\r\n  .Box--padding-left-x6 { padding-left: var(--size--x6); }\r\n  .Box--padding-left-x8 { padding-left: var(--size--x8); }\r\n  .Box--padding-left-x10 { padding-left: var(--size--x10); }\r\n  .Box--padding-left-x12 { padding-left: var(--size--x12); }\r\n  .Box--padding-left-x16 { padding-left: var(--size--x16); }\r\n  .Box--padding-left-x24 { padding-left: var(--size--x24); }\r\n  .Box--padding-left-x32 { padding-left: var(--size--x32); }\r\n  \r\n  .Box--padding-offset-bottom-x1 { margin-bottom: calc(var(--size--x1) * -1); }\r\n  .Box--padding-offset-bottom-x2 { margin-bottom: calc(var(--size--x2) * -1); }\r\n  .Box--padding-offset-bottom-x3 { margin-bottom: calc(var(--size--x3) * -1); }\r\n  .Box--padding-offset-bottom-x4 { margin-bottom: calc(var(--size--x4) * -1); }\r\n  .Box--padding-offset-bottom-x5 { margin-bottom: calc(var(--size--x5) * -1); }\r\n  .Box--padding-offset-bottom-x6 { margin-bottom: calc(var(--size--x6) * -1); }\r\n  .Box--padding-offset-bottom-x8 { margin-bottom: calc(var(--size--x8) * -1); }\r\n  .Box--padding-offset-bottom-x10 { margin-bottom: calc(var(--size--x10) * -1); }\r\n  .Box--padding-offset-bottom-x12 { margin-bottom: calc(var(--size--x12) * -1); }\r\n  .Box--padding-offset-bottom-x16 { margin-bottom: calc(var(--size--x16) * -1); }\r\n  .Box--padding-offset-bottom-x24 { margin-bottom: calc(var(--size--x24) * -1); }\r\n  .Box--padding-offset-bottom-x32 { margin-bottom: calc(var(--size--x32) * -1); }\r\n  \r\n  .Box--padding-offset-top-x1 { margin-top: calc(var(--size--x1) * -1); }\r\n  .Box--padding-offset-top-x2 { margin-top: calc(var(--size--x2) * -1); }\r\n  .Box--padding-offset-top-x3 { margin-top: calc(var(--size--x3) * -1); }\r\n  .Box--padding-offset-top-x4 { margin-top: calc(var(--size--x4) * -1); }\r\n  .Box--padding-offset-top-x5 { margin-top: calc(var(--size--x5) * -1); }\r\n  .Box--padding-offset-top-x6 { margin-top: calc(var(--size--x6) * -1); }\r\n  .Box--padding-offset-top-x8 { margin-top: calc(var(--size--x8) * -1); }\r\n  .Box--padding-offset-top-x10 { margin-top: calc(var(--size--x10) * -1); }\r\n  .Box--padding-offset-top-x12 { margin-top: calc(var(--size--x12) * -1); }\r\n  .Box--padding-offset-top-x16 { margin-top: calc(var(--size--x16) * -1); }\r\n  .Box--padding-offset-top-x24 { margin-top: calc(var(--size--x24) * -1); }\r\n  .Box--padding-offset-top-x32 { margin-top: calc(var(--size--x32) * -1); }\r\n  \r\n  .Box--padding-offset-right-x1 { margin-right: calc(var(--size--x1) * -1); }\r\n  .Box--padding-offset-right-x2 { margin-right: calc(var(--size--x2) * -1); }\r\n  .Box--padding-offset-right-x3 { margin-right: calc(var(--size--x3) * -1); }\r\n  .Box--padding-offset-right-x4 { margin-right: calc(var(--size--x4) * -1); }\r\n  .Box--padding-offset-right-x5 { margin-right: calc(var(--size--x5) * -1); }\r\n  .Box--padding-offset-right-x6 { margin-right: calc(var(--size--x6) * -1); }\r\n  .Box--padding-offset-right-x8 { margin-right: calc(var(--size--x8) * -1); }\r\n  .Box--padding-offset-right-x10 { margin-right: calc(var(--size--x10) * -1); }\r\n  .Box--padding-offset-right-x12 { margin-right: calc(var(--size--x12) * -1); }\r\n  .Box--padding-offset-right-x16 { margin-right: calc(var(--size--x16) * -1); }\r\n  .Box--padding-offset-right-x24 { margin-right: calc(var(--size--x24) * -1); }\r\n  .Box--padding-offset-right-x32 { margin-right: calc(var(--size--x32) * -1); }\r\n  \r\n  .Box--padding-offset-left-x1 { margin-left: calc(var(--size--x1) * -1); }\r\n  .Box--padding-offset-left-x2 { margin-left: calc(var(--size--x2) * -1); }\r\n  .Box--padding-offset-left-x3 { margin-left: calc(var(--size--x3) * -1); }\r\n  .Box--padding-offset-left-x4 { margin-left: calc(var(--size--x4) * -1); }\r\n  .Box--padding-offset-left-x5 { margin-left: calc(var(--size--x5) * -1); }\r\n  .Box--padding-offset-left-x6 { margin-left: calc(var(--size--x6) * -1); }\r\n  .Box--padding-offset-left-x8 { margin-left: calc(var(--size--x8) * -1); }\r\n  .Box--padding-offset-left-x10 { margin-left: calc(var(--size--x10) * -1); }\r\n  .Box--padding-offset-left-x12 { margin-left: calc(var(--size--x12) * -1); }\r\n  .Box--padding-offset-left-x16 { margin-left: calc(var(--size--x16) * -1); }\r\n  .Box--padding-offset-left-x24 { margin-left: calc(var(--size--x24) * -1); }\r\n  .Box--padding-offset-left-x32 { margin-left: calc(var(--size--x32) * -1); }\r\n  \r\n  .Box--border-radius-x1 { border-radius: var(--border-radius-size--x1); }\r\n  .Box--border-radius-x2 { border-radius: var(--border-radius-size--x2); }\r\n  .Box--border-radius-x3 { border-radius: var(--border-radius-size--x3); }\r\n  .Box--border-radius-x4 { border-radius: var(--border-radius-size--x4); }\r\n  .Box--border-radius-x5 { border-radius: var(--border-radius-size--x5); }\r\n  .Box--border-radius-x6 { border-radius: var(--border-radius-size--x6); }\r\n  .Box--border-radius-full { border-radius: 50%; }\r\n  \r\n  .Box--border-size-x1,\r\n  .Box--border {\r\n    border-width: var(--border-size--x1);\r\n  }\r\n  \r\n  .Box--border-size-x0 { border-width: 0; }\r\n  .Box--border-size-x2 { border-width: var(--border-size--x2); }\r\n  .Box--border-size-x3 { border-width: var(--border-size--x3); }\r\n  \r\n  .Box--border,\r\n  .Box--border-size-x1,\r\n  .Box--border-size-x2,\r\n  .Box--border-size-x3 {\r\n    border-style: solid;\r\n  }\r\n  \r\n  .Box--border-style-dashed {\r\n    border-style: dashed;\r\n  }\r\n  \r\n  .Box--border:not(.Box--border-top) { border-top-width: 0; }\r\n  .Box--border:not(.Box--border-right) { border-right-width: 0; }\r\n  .Box--border:not(.Box--border-bottom) { border-bottom-width: 0; }\r\n  .Box--border:not(.Box--border-left) { border-left-width: 0; }\r\n  \r\n  .Box--max-width {\r\n    width: 100%;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .Box--elevate--x1 { box-shadow: var(--shadow-elevation--x1); }\r\n  \r\n  .Box--elevate,\r\n  .Box--elevate--x2 { box-shadow: var(--shadow-elevation--x2); }\r\n  .Box--elevate--x3 { box-shadow: var(--shadow-elevation--x3); }\r\n  \r\n  .Box--transition-fast,\r\n  .Box--transition-base,\r\n  .Box--transition-slow {\r\n    transition-timing-function: var(--transition-timing-function);\r\n  }\r\n  \r\n  .Box--transition-fast { transition-duration: var(--transition-duration--fast); }\r\n  .Box--transition-base { transition-duration: var(--transition-duration--base); }\r\n  .Box--transition-slow { transition-duration: var(--transition-duration--slow); }\r\n  \r\n  .Box--position-absolute {\r\n    position: absolute;\r\n  }\r\n  \r\n  .Box--position-fixed {\r\n    position: fixed;\r\n  }\r\n  \r\n  .Box--position-edge-to-edge {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  \r\n  .Box--position-edge-to-edge,\r\n  .Box--position-top,\r\n  .Box--position-top-left,\r\n  .Box--position-top-right { top: 0; }\r\n  \r\n  .Box--position-edge-to-edge,\r\n  .Box--position-bottom,\r\n  .Box--position-bottom-left,\r\n  .Box--position-bottom-right { bottom: 0; }\r\n  \r\n  .Box--position-edge-to-edge,\r\n  .Box--position-left,\r\n  .Box--position-top-left,\r\n  .Box--position-bottom-left { left: 0; }\r\n  \r\n  .Box--position-edge-to-edge,\r\n  .Box--position-right,\r\n  .Box--position-top-right,\r\n  .Box--position-bottom-right { right: 0; }\r\n  \r\n  .Box--position-center {\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  \r\n  .Box--position-left,\r\n  .Box--position-right {\r\n    top: 50%;\r\n    transform: translate(0, -50%);\r\n  }\r\n  \r\n  .Box--position-top,\r\n  .Box--position-bottom {\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n  }\r\n  \r\n  /********\r\n   * Flex *\r\n   ********/\r\n  .Box--flex-horizontal,\r\n  .Box--flex-vertical {\r\n    display: flex;\r\n  }\r\n  \r\n  .Box--flex-horizontal { flex-direction: row; }\r\n  .Box--flex-vertical   { flex-direction: column; }\r\n  \r\n  .Box--flex-reverse.Box--flex-horizontal { flex-direction: row-reverse; }\r\n  .Box--flex-reverse.Box--flex-vertical { flex-direction: column-reverse; }\r\n  \r\n  .Box--flex-horizontal > .Box--flex-basis-none { width: 0; }\r\n  .Box--flex-vertical > .Box--flex-basis-none { height: 0; }\r\n  \r\n  .Box--flex-wrap { flex-wrap: wrap; }\r\n  \r\n  .Box--flex-align-self-start  { align-self: flex-start; }\r\n  .Box--flex-align-self-middle { align-self: center; }\r\n  .Box--flex-align-self-end    { align-self: flex-end; }\r\n  \r\n  .Box--flex-horizontal.Box--flex-align-horz-stretch { justify-content: stretch; }\r\n  .Box--flex-horizontal.Box--flex-align-horz-start   { justify-content: flex-start; }\r\n  .Box--flex-horizontal.Box--flex-align-horz-middle  { justify-content: center; }\r\n  .Box--flex-horizontal.Box--flex-align-horz-end     { justify-content: flex-end; }\r\n  .Box--flex-horizontal.Box--flex-align-horz-around  { justify-content: space-around; }\r\n  .Box--flex-horizontal.Box--flex-align-horz-between { justify-content: space-between; }\r\n  \r\n  .Box--flex-horizontal.Box--flex-align-vert-start  { align-items: flex-start; }\r\n  .Box--flex-horizontal.Box--flex-align-vert-middle { align-items: center; }\r\n  .Box--flex-horizontal.Box--flex-align-vert-end    { align-items: flex-end; }\r\n  \r\n  .Box--flex-vertical.Box--flex-align-horz-start  { align-items: flex-start; }\r\n  .Box--flex-vertical.Box--flex-align-horz-middle { align-items: center; }\r\n  .Box--flex-vertical.Box--flex-align-horz-end    { align-items: flex-end; }\r\n  \r\n  .Box--flex-vertical.Box--flex-align-vert-start   { justify-content: flex-start; }\r\n  .Box--flex-vertical.Box--flex-align-vert-middle  { justify-content: center; }\r\n  .Box--flex-vertical.Box--flex-align-vert-end     { justify-content: flex-end; }\r\n  .Box--flex-vertical.Box--flex-align-vert-around  { justify-content: space-around; }\r\n  .Box--flex-vertical.Box--flex-align-vert-between { justify-content: space-between; }\r\n  \r\n  .Box--flex-gap-horizontal-x1 { column-gap: var(--size--x1); }\r\n  .Box--flex-gap-horizontal-x2 { column-gap: var(--size--x2); }\r\n  .Box--flex-gap-horizontal-x3 { column-gap: var(--size--x3); }\r\n  .Box--flex-gap-horizontal-x4 { column-gap: var(--size--x4); }\r\n  .Box--flex-gap-horizontal-x5 { column-gap: var(--size--x5); }\r\n  .Box--flex-gap-horizontal-x6 { column-gap: var(--size--x6); }\r\n  .Box--flex-gap-horizontal-x8 { column-gap: var(--size--x8); }\r\n  .Box--flex-gap-horizontal-x10 { column-gap: var(--size--x10); }\r\n  .Box--flex-gap-horizontal-x12 { column-gap: var(--size--x12); }\r\n  .Box--flex-gap-horizontal-x16 { column-gap: var(--size--x16); }\r\n  .Box--flex-gap-horizontal-x24 { column-gap: var(--size--x24); }\r\n  .Box--flex-gap-horizontal-x32 { column-gap: var(--size--x32); }\r\n  \r\n  .Box--flex-gap-vertical-x1 { row-gap: var(--size--x1); }\r\n  .Box--flex-gap-vertical-x2 { row-gap: var(--size--x2); }\r\n  .Box--flex-gap-vertical-x3 { row-gap: var(--size--x3); }\r\n  .Box--flex-gap-vertical-x4 { row-gap: var(--size--x4); }\r\n  .Box--flex-gap-vertical-x5 { row-gap: var(--size--x5); }\r\n  .Box--flex-gap-vertical-x6 { row-gap: var(--size--x6); }\r\n  .Box--flex-gap-vertical-x8 { row-gap: var(--size--x8); }\r\n  .Box--flex-gap-vertical-x10 { row-gap: var(--size--x10); }\r\n  .Box--flex-gap-vertical-x12 { row-gap: var(--size--x12); }\r\n  .Box--flex-gap-vertical-x16 { row-gap: var(--size--x16); }\r\n  .Box--flex-gap-vertical-x24 { row-gap: var(--size--x24); }\r\n  .Box--flex-gap-vertical-x32 { row-gap: var(--size--x32); }\r\n  \r\n  /**********\r\n   * Colors *\r\n   **********/\r\n  .Box--background-color-black { background-color: var(--color-black); }\r\n  .Box--background-color-white { background-color: var(--color-white); }\r\n  .Box--background-color-highlight { background-color: var(--color-highlight); }\r\n  .Box--background-color-overlay { background-color: var(--color-overlay); }\r\n  .Box--background-color-transparent { background-color: transparent; }\r\n  .Box--background-color-accent-shade-1 { background-color: var(--color-accent-shade-1); }\r\n  .Box--background-color-accent-shade-2 { background-color: var(--color-accent-shade-2); }\r\n  .Box--background-color-accent-shade-3 { background-color: var(--color-accent-shade-3); }\r\n  .Box--background-color-accent-shade-4 { background-color: var(--color-accent-shade-4); }\r\n  .Box--background-color-accent-shade-5 { background-color: var(--color-accent-shade-5); }\r\n  .Box--background-color-background-shade-1 { background-color: var(--color-background-shade-1); }\r\n  .Box--background-color-background-shade-2 { background-color: var(--color-background-shade-2); }\r\n  .Box--background-color-background-shade-3 { background-color: var(--color-background-shade-3); }\r\n  .Box--background-color-background-shade-4 { background-color: var(--color-background-shade-4); }\r\n  .Box--background-color-dark-shade-1 { background-color: var(--color-dark-shade-1); }\r\n  .Box--background-color-dark-shade-2 { background-color: var(--color-dark-shade-2); }\r\n  .Box--background-color-dark-shade-3 { background-color: var(--color-dark-shade-3); }\r\n  .Box--background-color-light-shade-1 { background-color: var(--color-light-shade-1); }\r\n  .Box--background-color-light-shade-2 { background-color: var(--color-light-shade-2); }\r\n  .Box--background-color-light-shade-3 { background-color: var(--color-light-shade-3); }\r\n  .Box--background-color-text-shade-1 { background-color: var(--color-text-shade-1); }\r\n  .Box--background-color-text-shade-2 { background-color: var(--color-text-shade-2); }\r\n  .Box--background-color-text-shade-3 { background-color: var(--color-text-shade-3); }\r\n  .Box--background-color-negative-shade-1 { background-color: var(--color-negative-shade-1); }\r\n  .Box--background-color-negative-shade-2 { background-color: var(--color-negative-shade-2); }\r\n  .Box--background-color-negative-shade-3 { background-color: var(--color-negative-shade-3); }\r\n  .Box--background-color-negative-shade-4 { background-color: var(--color-negative-shade-4); }\r\n  .Box--background-color-negative-shade-5 { background-color: var(--color-negative-shade-5); }\r\n  .Box--background-color-positive-shade-1 { background-color: var(--color-positive-shade-1); }\r\n  .Box--background-color-positive-shade-2 { background-color: var(--color-positive-shade-2); }\r\n  .Box--background-color-positive-shade-3 { background-color: var(--color-positive-shade-3); }\r\n  .Box--background-color-positive-shade-4 { background-color: var(--color-positive-shade-4); }\r\n  .Box--background-color-positive-shade-5 { background-color: var(--color-positive-shade-5); }\r\n  \r\n  .Box--border-color-black { border-color: var(--color-black); }\r\n  .Box--border-color-white { border-color: var(--color-white); }\r\n  .Box--border-color-highlight { border-color: var(--color-highlight); }\r\n  .Box--border-color-transparent { border-color: transparent; }\r\n  .Box--border-color-accent-shade-1 { border-color: var(--color-accent-shade-1); }\r\n  .Box--border-color-accent-shade-2 { border-color: var(--color-accent-shade-2); }\r\n  .Box--border-color-accent-shade-3 { border-color: var(--color-accent-shade-3); }\r\n  .Box--border-color-accent-shade-4 { border-color: var(--color-accent-shade-4); }\r\n  .Box--border-color-accent-shade-5 { border-color: var(--color-accent-shade-5); }\r\n  .Box--border-color-background-shade-1 { border-color: var(--color-background-shade-1); }\r\n  .Box--border-color-background-shade-2 { border-color: var(--color-background-shade-2); }\r\n  .Box--border-color-background-shade-3 { border-color: var(--color-background-shade-3); }\r\n  .Box--border-color-background-shade-4 { border-color: var(--color-background-shade-4); }\r\n  .Box--border-color-dark-shade-1 { border-color: var(--color-dark-shade-1); }\r\n  .Box--border-color-dark-shade-2 { border-color: var(--color-dark-shade-2); }\r\n  .Box--border-color-dark-shade-3 { border-color: var(--color-dark-shade-3); }\r\n  .Box--border-color-light-shade-1 { border-color: var(--color-light-shade-1); }\r\n  .Box--border-color-light-shade-2 { border-color: var(--color-light-shade-2); }\r\n  .Box--border-color-light-shade-3 { border-color: var(--color-light-shade-3); }\r\n  .Box--border-color-text-shade-1 { border-color: var(--color-text-shade-1); }\r\n  .Box--border-color-text-shade-2 { border-color: var(--color-text-shade-2); }\r\n  .Box--border-color-text-shade-3 { border-color: var(--color-text-shade-3); }\r\n  .Box--border-color-text-shade-4 { border-color: var(--color-text-shade-4); }\r\n  .Box--border-color-negative-shade-1 { border-color: var(--color-negative-shade-1); }\r\n  .Box--border-color-negative-shade-2 { border-color: var(--color-negative-shade-2); }\r\n  .Box--border-color-negative-shade-3 { border-color: var(--color-negative-shade-3); }\r\n  .Box--border-color-negative-shade-4 { border-color: var(--color-negative-shade-4); }\r\n  .Box--border-color-negative-shade-5 { border-color: var(--color-negative-shade-5); }\r\n  .Box--border-color-positive-shade-1 { border-color: var(--color-positive-shade-1); }\r\n  .Box--border-color-positive-shade-2 { border-color: var(--color-positive-shade-2); }\r\n  .Box--border-color-positive-shade-3 { border-color: var(--color-positive-shade-3); }\r\n  .Box--border-color-positive-shade-4 { border-color: var(--color-positive-shade-4); }\r\n  .Box--border-color-positive-shade-5 { border-color: var(--color-positive-shade-5); }\r\n  \r\n  .Box--text-color-black { color: var(--color-black); }\r\n  .Box--text-color-white { color: var(--color-white); }\r\n  .Box--text-color-highlight { color: var(--color-highlight); }\r\n  .Box--text-color-transparent { color: transparent; }\r\n  .Box--text-color-accent-shade-1 { color: var(--color-accent-shade-1); }\r\n  .Box--text-color-accent-shade-2 { color: var(--color-accent-shade-2); }\r\n  .Box--text-color-accent-shade-3 { color: var(--color-accent-shade-3); }\r\n  .Box--text-color-accent-shade-4 { color: var(--color-accent-shade-4); }\r\n  .Box--text-color-accent-shade-5 { color: var(--color-accent-shade-5); }\r\n  .Box--text-color-background-shade-1 { color: var(--color-background-shade-1); }\r\n  .Box--text-color-background-shade-2 { color: var(--color-background-shade-2); }\r\n  .Box--text-color-background-shade-3 { color: var(--color-background-shade-3); }\r\n  .Box--text-color-background-shade-4 { color: var(--color-background-shade-4); }\r\n  .Box--text-color-dark-shade-1 { color: var(--color-dark-shade-1); }\r\n  .Box--text-color-dark-shade-2 { color: var(--color-dark-shade-2); }\r\n  .Box--text-color-dark-shade-3 { color: var(--color-dark-shade-3); }\r\n  .Box--text-color-light-shade-1 { color: var(--color-light-shade-1); }\r\n  .Box--text-color-light-shade-2 { color: var(--color-light-shade-2); }\r\n  .Box--text-color-light-shade-3 { color: var(--color-light-shade-3); }\r\n  .Box--text-color-text-shade-1 { color: var(--color-text-shade-1); }\r\n  .Box--text-color-text-shade-2 { color: var(--color-text-shade-2); }\r\n  .Box--text-color-text-shade-3 { color: var(--color-text-shade-3); }\r\n  .Box--text-color-negative-shade-1 { color: var(--color-negative-shade-1); }\r\n  .Box--text-color-negative-shade-2 { color: var(--color-negative-shade-2); }\r\n  .Box--text-color-negative-shade-3 { color: var(--color-negative-shade-3); }\r\n  .Box--text-color-negative-shade-4 { color: var(--color-negative-shade-4); }\r\n  .Box--text-color-negative-shade-5 { color: var(--color-negative-shade-5); }\r\n  .Box--text-color-positive-shade-1 { color: var(--color-positive-shade-1); }\r\n  .Box--text-color-positive-shade-2 { color: var(--color-positive-shade-2); }\r\n  .Box--text-color-positive-shade-3 { color: var(--color-positive-shade-3); }\r\n  .Box--text-color-positive-shade-4 { color: var(--color-positive-shade-4); }\r\n  .Box--text-color-positive-shade-5 { color: var(--color-positive-shade-5); }\r\n  "],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/lodash.groupby/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.groupby/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray(collection) ? arrayAggregator : baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
  };
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity]
 *  The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */
var groupBy = createAggregator(function(result, value, key) {
  if (hasOwnProperty.call(result, key)) {
    result[key].push(value);
  } else {
    result[key] = [value];
  }
});

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = groupBy;


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/Icon.js":
/*!****************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/Icon.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultAttributes.js */ "./node_modules/lucide-react/dist/esm/defaultAttributes.js");
/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ "./node_modules/lucide-react/dist/esm/shared/src/utils.js");
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */





const Icon = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
  ({
    color = "currentColor",
    size = 24,
    strokeWidth = 2,
    absoluteStrokeWidth,
    className = "",
    children,
    iconNode,
    ...rest
  }, ref) => {
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(
      "svg",
      {
        ref,
        ..._defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__["default"],
        width: size,
        height: size,
        stroke: color,
        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
        className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)("lucide", className),
        ...rest
      },
      [
        ...iconNode.map(([tag, attrs]) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(tag, attrs)),
        ...Array.isArray(children) ? children : [children]
      ]
    );
  }
);


//# sourceMappingURL=Icon.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/createLucideIcon.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/createLucideIcon.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createLucideIcon)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ "./node_modules/lucide-react/dist/esm/shared/src/utils.js");
/* harmony import */ var _Icon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Icon.js */ "./node_modules/lucide-react/dist/esm/Icon.js");
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */





const createLucideIcon = (iconName, iconNode) => {
  const Component = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
    ({ className, ...props }, ref) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Icon_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
      ref,
      iconNode,
      className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(`lucide-${(0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.toKebabCase)(iconName)}`, className),
      ...props
    })
  );
  Component.displayName = `${iconName}`;
  return Component;
};


//# sourceMappingURL=createLucideIcon.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/defaultAttributes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/defaultAttributes.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ defaultAttributes)
/* harmony export */ });
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};


//# sourceMappingURL=defaultAttributes.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/icons/library.js":
/*!*************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/library.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Library)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "./node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const Library = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("Library", [
  ["path", { d: "m16 6 4 14", key: "ji33uf" }],
  ["path", { d: "M12 6v14", key: "1n7gus" }],
  ["path", { d: "M8 8v12", key: "1gg7y9" }],
  ["path", { d: "M4 4v16", key: "6qkkli" }]
]);


//# sourceMappingURL=library.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/icons/pencil.js":
/*!************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/pencil.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pencil)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "./node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const Pencil = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("Pencil", [
  ["path", { d: "M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z", key: "5qss01" }],
  ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
]);


//# sourceMappingURL=pencil.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/icons/refresh-ccw.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/refresh-ccw.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RefreshCcw)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "./node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const RefreshCcw = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("RefreshCcw", [
  ["path", { d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "14sxne" }],
  ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
  ["path", { d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16", key: "1hlbsb" }],
  ["path", { d: "M16 16h5v5", key: "ccwih5" }]
]);


//# sourceMappingURL=refresh-ccw.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/shared/src/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/shared/src/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeClasses: () => (/* binding */ mergeClasses),
/* harmony export */   toKebabCase: () => (/* binding */ toKebabCase)
/* harmony export */ });
/**
 * @license lucide-react v0.378.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
const mergeClasses = (...classes) => classes.filter((className, index, array) => {
  return Boolean(className) && array.indexOf(className) === index;
}).join(" ");


//# sourceMappingURL=utils.js.map


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var ReactVersion = '18.3.1';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: null
};

var ReactCurrentActQueue = {
  current: null,
  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
  isBatchingLegacy: false,
  didScheduleLegacyUpdate: false
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

// -----------------------------------------------------------------------------

var enableScopeAPI = false; // Experimental Create Event Handle API.
var enableCacheElement = false;
var enableTransitionTracing = false; // No known bugs, but needs performance testing

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
// stuff. Intended to enable React core members to more easily debug scheduling
// issues in DEV builds.

var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
}
function error(format) {
  {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var assign = Object.assign;

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (element === null || element === undefined) {
    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
  }

  var propName; // Original props are copied

  var props = assign({}, element.props); // Reserved names are extracted

  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    {
      checkKeyStringCoercion(element.key);
    }

    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        {
          // The `if` statement here prevents auto-disabling of the safe
          // coercion ESLint rule, so we must manually disable it below.
          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
            checkKeyStringCoercion(mappedChild.key);
          }
        }

        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        // eslint-disable-next-line react-internal/safe-string-coercion
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      // eslint-disable-next-line react-internal/safe-string-coercion
      var childrenString = String(children);
      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    throw new Error('React.Children.only expected to receive a single React element child.');
  }

  return children;
}

function createContext(defaultValue) {
  // TODO: Second argument used to be an optional `calculateChangedBits`
  // function. Warn to reserve for future use?
  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null,
    // Add these to use same hidden class in VM as ServerContext
    _defaultValue: null,
    _globalName: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.
    // This might throw either because it's missing or throws. If so, we treat it
    // as still uninitialized and try again next time. Which is the same as what
    // happens if the ctor or any wrappers processing the ctor throws. This might
    // end up fixing it if the resolution was a concurrency bug.

    thenable.then(function (moduleObject) {
      if (payload._status === Pending || payload._status === Uninitialized) {
        // Transition to the next state.
        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = moduleObject;
      }
    }, function (error) {
      if (payload._status === Pending || payload._status === Uninitialized) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });

    if (payload._status === Uninitialized) {
      // In case, we're still uninitialized, then we're waiting for the thenable
      // to resolve. Set it as pending in the meantime.
      var pending = payload;
      pending._status = Pending;
      pending._result = thenable;
    }
  }

  if (payload._status === Resolved) {
    var moduleObject = payload._result;

    {
      if (moduleObject === undefined) {
        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
      }
    }

    {
      if (!('default' in moduleObject)) {
        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
      }
    }

    return moduleObject.default;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: Uninitialized,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name; // The inner component shouldn't inherit this display name in most cases,
        // because the component may be used elsewhere.
        // But it's nice for anonymous functions to inherit the name,
        // so that our component-stack generation logic will display their frames.
        // An anonymous function generally suggests a pattern like:
        //   React.forwardRef((props, ref) => {...});
        // This kind of inner function is not used elsewhere so the side effect is okay.

        if (!render.name && !render.displayName) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

var REACT_MODULE_REFERENCE;

{
  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
}

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
    // types supported by any Flight configuration anywhere since
    // we don't know which Flight build this will end up being used
    // with.
    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name; // The inner component shouldn't inherit this display name in most cases,
        // because the component may be used elsewhere.
        // But it's nice for anonymous functions to inherit the name,
        // so that our component-stack generation logic will display their frames.
        // An anonymous function generally suggests a pattern like:
        //   React.memo((props) => {...});
        // This kind of inner function is not used elsewhere so the side effect is okay.

        if (!type.name && !type.displayName) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  {
    if (dispatcher === null) {
      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
    }
  } // Will result in a null access error if accessed outside render phase. We
  // intentionally don't throw our own error because this is in a hot path.
  // Also helps ensure this is inlined.


  return dispatcher;
}
function useContext(Context) {
  var dispatcher = resolveDispatcher();

  {
    // TODO: add a more generic warning for invalid values.
    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useInsertionEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useInsertionEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}
function useTransition() {
  var dispatcher = resolveDispatcher();
  return dispatcher.useTransition();
}
function useDeferredValue(value) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useDeferredValue(value);
}
function useId() {
  var dispatcher = resolveDispatcher();
  return dispatcher.useId();
}
function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentNameFromType(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentNameFromType(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

function startTransition(scope, options) {
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = {};
  var currentTransition = ReactCurrentBatchConfig.transition;

  {
    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
  }

  try {
    scope();
  } finally {
    ReactCurrentBatchConfig.transition = prevTransition;

    {
      if (prevTransition === null && currentTransition._updatedFibers) {
        var updatedFibersCount = currentTransition._updatedFibers.size;

        if (updatedFibersCount > 10) {
          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
        }

        currentTransition._updatedFibers.clear();
      }
    }
  }
}

var didWarnAboutMessageChannel = false;
var enqueueTaskImpl = null;
function enqueueTask(task) {
  if (enqueueTaskImpl === null) {
    try {
      // read require off the module object to get around the bundlers.
      // we don't want them to detect a require and bundle a Node polyfill.
      var requireString = ('require' + Math.random()).slice(0, 7);
      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
      // version of setImmediate, bypassing fake timers if any.

      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
    } catch (_err) {
      // we're in a browser
      // we can't use regular timers because they may still be faked
      // so we try MessageChannel+postMessage instead
      enqueueTaskImpl = function (callback) {
        {
          if (didWarnAboutMessageChannel === false) {
            didWarnAboutMessageChannel = true;

            if (typeof MessageChannel === 'undefined') {
              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
            }
          }
        }

        var channel = new MessageChannel();
        channel.port1.onmessage = callback;
        channel.port2.postMessage(undefined);
      };
    }
  }

  return enqueueTaskImpl(task);
}

var actScopeDepth = 0;
var didWarnNoAwaitAct = false;
function act(callback) {
  {
    // `act` calls can be nested, so we track the depth. This represents the
    // number of `act` scopes on the stack.
    var prevActScopeDepth = actScopeDepth;
    actScopeDepth++;

    if (ReactCurrentActQueue.current === null) {
      // This is the outermost `act` scope. Initialize the queue. The reconciler
      // will detect the queue and use it instead of Scheduler.
      ReactCurrentActQueue.current = [];
    }

    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
    var result;

    try {
      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
      // set to `true` while the given callback is executed, not for updates
      // triggered during an async event, because this is how the legacy
      // implementation of `act` behaved.
      ReactCurrentActQueue.isBatchingLegacy = true;
      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
      // which flushed updates immediately after the scope function exits, even
      // if it's an async function.

      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
        var queue = ReactCurrentActQueue.current;

        if (queue !== null) {
          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
          flushActQueue(queue);
        }
      }
    } catch (error) {
      popActScope(prevActScopeDepth);
      throw error;
    } finally {
      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
    }

    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
      // for it to resolve before exiting the current scope.

      var wasAwaited = false;
      var thenable = {
        then: function (resolve, reject) {
          wasAwaited = true;
          thenableResult.then(function (returnValue) {
            popActScope(prevActScopeDepth);

            if (actScopeDepth === 0) {
              // We've exited the outermost act scope. Recursively flush the
              // queue until there's no remaining work.
              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            } else {
              resolve(returnValue);
            }
          }, function (error) {
            // The callback threw an error.
            popActScope(prevActScopeDepth);
            reject(error);
          });
        }
      };

      {
        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
          // eslint-disable-next-line no-undef
          Promise.resolve().then(function () {}).then(function () {
            if (!wasAwaited) {
              didWarnNoAwaitAct = true;

              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
            }
          });
        }
      }

      return thenable;
    } else {
      var returnValue = result; // The callback is not an async function. Exit the current scope
      // immediately, without awaiting.

      popActScope(prevActScopeDepth);

      if (actScopeDepth === 0) {
        // Exiting the outermost act scope. Flush the queue.
        var _queue = ReactCurrentActQueue.current;

        if (_queue !== null) {
          flushActQueue(_queue);
          ReactCurrentActQueue.current = null;
        } // Return a thenable. If the user awaits it, we'll flush again in
        // case additional work was scheduled by a microtask.


        var _thenable = {
          then: function (resolve, reject) {
            // Confirm we haven't re-entered another `act` scope, in case
            // the user does something weird like await the thenable
            // multiple times.
            if (ReactCurrentActQueue.current === null) {
              // Recursively flush the queue until there's no remaining work.
              ReactCurrentActQueue.current = [];
              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            } else {
              resolve(returnValue);
            }
          }
        };
        return _thenable;
      } else {
        // Since we're inside a nested `act` scope, the returned thenable
        // immediately resolves. The outer scope will flush the queue.
        var _thenable2 = {
          then: function (resolve, reject) {
            resolve(returnValue);
          }
        };
        return _thenable2;
      }
    }
  }
}

function popActScope(prevActScopeDepth) {
  {
    if (prevActScopeDepth !== actScopeDepth - 1) {
      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
    }

    actScopeDepth = prevActScopeDepth;
  }
}

function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
  {
    var queue = ReactCurrentActQueue.current;

    if (queue !== null) {
      try {
        flushActQueue(queue);
        enqueueTask(function () {
          if (queue.length === 0) {
            // No additional work was scheduled. Finish.
            ReactCurrentActQueue.current = null;
            resolve(returnValue);
          } else {
            // Keep flushing work until there's none left.
            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
          }
        });
      } catch (error) {
        reject(error);
      }
    } else {
      resolve(returnValue);
    }
  }
}

var isFlushing = false;

function flushActQueue(queue) {
  {
    if (!isFlushing) {
      // Prevent re-entrance.
      isFlushing = true;
      var i = 0;

      try {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(true);
          } while (callback !== null);
        }

        queue.length = 0;
      } catch (error) {
        // If something throws, leave the remaining callbacks on the queue.
        queue = queue.slice(i + 1);
        throw error;
      } finally {
        isFlushing = false;
      }
    }
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.act = act;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.startTransition = startTransition;
exports.unstable_act = act;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useDeferredValue = useDeferredValue;
exports.useEffect = useEffect;
exports.useId = useId;
exports.useImperativeHandle = useImperativeHandle;
exports.useInsertionEffect = useInsertionEffect;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.useSyncExternalStore = useSyncExternalStore;
exports.useTransition = useTransition;
exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./src/preshape/Button/Button.css":
/*!****************************************!*\
  !*** ./src/preshape/Button/Button.css ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./Button.css */ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Button/Button.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_Button_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/preshape/Grid/Grid.css":
/*!************************************!*\
  !*** ./src/preshape/Grid/Grid.css ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Grid_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./Grid.css */ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Grid/Grid.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_Grid_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_Grid_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_Grid_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_Grid_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/preshape/Input/Input.css":
/*!**************************************!*\
  !*** ./src/preshape/Input/Input.css ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Input_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./Input.css */ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Input/Input.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_Input_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_Input_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_Input_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_Input_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/preshape/List/List.css":
/*!************************************!*\
  !*** ./src/preshape/List/List.css ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./List.css */ "./node_modules/css-loader/dist/cjs.js!./src/preshape/List/List.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_List_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/preshape/Text/Text.css":
/*!************************************!*\
  !*** ./src/preshape/Text/Text.css ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Text_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./Text.css */ "./node_modules/css-loader/dist/cjs.js!./src/preshape/Text/Text.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_Text_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_Text_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_Text_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_Text_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/preshape/box/box.css":
/*!**********************************!*\
  !*** ./src/preshape/box/box.css ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_box_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./box.css */ "./node_modules/css-loader/dist/cjs.js!./src/preshape/box/box.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_box_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_box_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_box_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_box_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/antwerp-drawer/antwerp-drawer.ts":
/*!**********************************************!*\
  !*** ./src/antwerp-drawer/antwerp-drawer.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   drawShapes: () => (/* binding */ drawShapes)
/* harmony export */ });
/* harmony import */ var _preshape_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../preshape/colors.js */ "./src/preshape/colors.ts");
/* harmony import */ var _get_shape_fill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-shape-fill.js */ "./src/antwerp-drawer/get-shape-fill.ts");
/* harmony import */ var _src_shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../src/shape/from-centroid-and-angle.js */ "../src/shape/from-centroid-and-angle.ts");



const ns = 'http://www.w3.org/2000/svg';
function drawShapes(svg, data, opts, showTransforms, showVertices, shapeSize) {
    while (svg.lastChild) {
        svg.removeChild(svg.lastChild);
    }
    const { shapes, transformPointsMaps } = data;
    for (let i = 0; i < shapes.length; i++) {
        drawShape(shapes[i], shapeSize, svg);
    }
    const transformPointss = transformPointsMaps.map(m => Array.from(m.values()));
    const ii = 0;
    if (showVertices && transformPointss[ii]) {
        drawTransformPoints(transformPointss[ii]);
    }
    function drawTransformPoints(vertices) {
        for (const vertex of vertices) {
            const { pointType: pt, v: [x, y], index } = vertex;
            const text = document.createElementNS(ns, 'text');
            text.setAttributeNS(null, 'x', x.toString());
            text.setAttributeNS(null, 'y', (-y).toString());
            text.setAttributeNS(null, 'alignment', 'middle');
            text.setAttributeNS(null, 'fill', 'white');
            text.textContent = `${pt}${index}`;
            svg.appendChild(text);
        }
    }
    function drawShape(shape, shapeSize, svg) {
        const { c, θm, sides } = shape;
        const ps = (0,_src_shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_2__.fromCentroidAndAngle)(c, θm, sides, shapeSize);
        const points = ps
            .map(p => [p[0], -p[1]])
            .flat()
            .map(c => c.toString())
            .join(' ');
        const poly = document.createElementNS(ns, 'polygon');
        poly.setAttributeNS(null, 'points', points);
        poly.setAttributeNS(null, 'fill', (0,_get_shape_fill_js__WEBPACK_IMPORTED_MODULE_1__.getShapeFill)(shape, data, opts));
        poly.setAttributeNS(null, 'stroke', _preshape_colors_js__WEBPACK_IMPORTED_MODULE_0__.colorDarkShade1);
        svg.appendChild(poly);
    }
}



/***/ }),

/***/ "./src/antwerp-drawer/get-shape-fill.ts":
/*!**********************************************!*\
  !*** ./src/antwerp-drawer/get-shape-fill.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShapeFill: () => (/* binding */ getShapeFill)
/* harmony export */ });
/* harmony import */ var _preshape_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../preshape/colors.js */ "./src/preshape/colors.ts");

function getShapeFill(shape, data, opts) {
    const { colorScale, colorMethod } = opts;
    if (!colorScale) {
        return _preshape_colors_js__WEBPACK_IMPORTED_MODULE_0__.colorLightShade1;
    }
    return colorMethod === 'transform'
        ? colorScale((1 - (shape.stage / data.maxStage)) || 0)
        : colorScale((1 - (shape.stagePlacement / data.maxStagePlacement)) || 0);
}



/***/ }),

/***/ "./src/antwerp.tsx":
/*!*************************!*\
  !*** ./src/antwerp.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Antwerp: () => (/* binding */ Antwerp)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _preshape_box_box_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./preshape/box/box.js */ "./src/preshape/box/box.tsx");
/* harmony import */ var _preshape_hooks_use_resize_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./preshape/hooks/use-resize-observer.js */ "./src/preshape/hooks/use-resize-observer.tsx");
/* harmony import */ var _src_to_shapes_to_shapes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../src/to-shapes/to-shapes.js */ "../src/to-shapes/to-shapes.ts");
/* harmony import */ var _utils_get_color_scale_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/get-color-scale.js */ "./src/utils/get-color-scale.ts");
/* harmony import */ var _antwerp_drawer_antwerp_drawer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./antwerp-drawer/antwerp-drawer.js */ "./src/antwerp-drawer/antwerp-drawer.ts");






function Antwerp(props) {
    const { colorMethod, colorScale, configuration, repeatCount, shapeSize, showTransforms, showVertices, ...rest } = props;
    const [{ height, width }, refSize, sizeNode] = (0,_preshape_hooks_use_resize_observer_js__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver)();
    const [data, setData] = react__WEBPACK_IMPORTED_MODULE_0__.useState();
    const svgRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (height && width) {
            setData((0,_src_to_shapes_to_shapes_js__WEBPACK_IMPORTED_MODULE_3__.toShapes)(configuration, repeatCount, shapeSize));
        }
    }, [configuration, repeatCount, shapeSize, height, width]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (!data) {
            return;
        }
        const svg = svgRef.current;
        svg.setAttributeNS(null, 'viewBox', `${-width / 2} ${-height / 2} ${width} ${height}`);
        (0,_antwerp_drawer_antwerp_drawer_js__WEBPACK_IMPORTED_MODULE_5__.drawShapes)(svg, data, {
            colorMethod,
            colorScale: (0,_utils_get_color_scale_js__WEBPACK_IMPORTED_MODULE_4__.getColorScale)(colorScale)
        }, showTransforms, showVertices, shapeSize);
    }, [colorMethod, colorScale, data, height, width]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_1__.Box, { ...rest, id: "antwerp", grow: true, container: true },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_1__.Box, { absolute: "edge-to-edge", backgroundColor: "background-shade-3", ref: refSize }),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", { ref: svgRef, xmlns: "http://www.w3.org/2000/svg", version: "1.1", id: "svg", x: "0px", y: "0px", style: {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: '0px',
                right: '0px',
                top: '0px',
                bottom: '0px',
                overflow: 'hidden'
            } })));
}



/***/ }),

/***/ "./src/components/assets/logo-night.tsx":
/*!**********************************************!*\
  !*** ./src/components/assets/logo-night.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LogoNightSvg: () => (/* binding */ LogoNightSvg)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function LogoNightSvg() {
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", { width: "24px", height: "24px", viewBox: "0 0 24 24", version: "1.1", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("title", null, "A-night"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("desc", null, "Created with Sketch."),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", { id: "A-night", stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", { id: "Group", transform: "translate(2.000000, 2.000000)" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { id: "Triangle", fill: "#DA77F2", points: "10 0 20 20 10 13" }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { id: "Triangle", fill: "#BE4BDB", points: "10 13 20 20 0 20" }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { id: "Triangle", fill: "#9C36B5", points: "10 0 10 13 0 20" })))));
}



/***/ }),

/***/ "./src/components/configurations.ts":
/*!******************************************!*\
  !*** ./src/components/configurations.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   configurations: () => (/* binding */ configurations)
/* harmony export */ });
const configurations = [
    { cundyRollett: "3⁶", gomJauHogg: "3/m30/r(h2)", vertices: "Regular", wallpaper: "p6m (*632)" },
    { cundyRollett: "6³", gomJauHogg: "6/m30/r(h1)", vertices: "Regular", wallpaper: "p6m (*632)" },
    { cundyRollett: "4⁴", gomJauHogg: "4/m45/r(h1)", vertices: "Regular", wallpaper: "p4m (*442)" },
    { cundyRollett: "3.12²", gomJauHogg: "12-3/m30/r(h3)", vertices: "Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "3.4.6.4", gomJauHogg: "6-4-3/m30/r(c2)", vertices: "Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "4.6.12", gomJauHogg: "12-6,4/m30/r(c2)", vertices: "Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "(3.6)²", gomJauHogg: "6-3-6/m30/r(v4)", vertices: "Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "4.8²", gomJauHogg: "8-4/m90/r(h4)", vertices: "Uniform", wallpaper: "p4m (*442)" },
    { cundyRollett: "3².4.3.4", gomJauHogg: "4-3-3,4/r90/r(h2)", vertices: "Uniform", wallpaper: "p4g (4*2)" },
    { cundyRollett: "3³.4²", gomJauHogg: "4-3/m90/r(h2)", vertices: "Uniform", wallpaper: "cmm (2*22)" },
    { cundyRollett: "3⁴.6", gomJauHogg: "6-3-3/r60/r(h5)", vertices: "Uniform", wallpaper: "p6 (632)" },
    { cundyRollett: "3⁶; 3².4.3.4", gomJauHogg: "3-4-3/m30/r(c3)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "3.4.6.4; 3².4.3.4", gomJauHogg: "6-4-3,3/m30/r(h1)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "3.4.6.5; 3³.4²", gomJauHogg: "6-4-3-3/m30/r(h5)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "3.4.6.4; 3.4².6", gomJauHogg: "6-4-3,4-6/m30/r(c4)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "4.6.12; 3.4.6.4", gomJauHogg: "12-4,6-3/m30/r(c3)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "3⁶; 3².4.12", gomJauHogg: "12-3,4-3/m30/r(c3)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "3.12²; 3.4.3.12", gomJauHogg: "12-0,3,3-0,4/m45/m(h1)", vertices: "2 Uniform", wallpaper: "p4m (*442)" },
    { cundyRollett: "3⁶; 3².6²", gomJauHogg: "3-6/m30/r(c2)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "[3⁶; 3⁴.6]¹", gomJauHogg: "6-3,3-3/m30/r(h1)", vertices: "2 Uniform", wallpaper: "p6m (*632)" },
    { cundyRollett: "[3⁶; 3⁴.6]²", gomJauHogg: "6-3-3,3-3/r60/r(h8)", vertices: "2 Uniform", wallpaper: "p6 (632)" },
    { cundyRollett: "3².6²; 3⁴.6", gomJauHogg: "6-3/m90/r(h1)", vertices: "2 Uniform", wallpaper: "cmm (2*22)" },
    { cundyRollett: "3.6.3.6; 3².6²", gomJauHogg: "6-3,6/m90/r(h3)", vertices: "2 Uniform", wallpaper: "pmm (*2222)" },
    { cundyRollett: "[3.4².6; 3.6.3.6]¹", gomJauHogg: "6-3,4-6-3,4-6,4/m90/r(c6)", vertices: "2 Uniform", wallpaper: "pmm (*2222)" },
    { cundyRollett: "[3.4².6; 3.6.3.6]²", gomJauHogg: "6-3,4/m90/r(h4)", vertices: "2 Uniform", wallpaper: "cmm (2*22)" },
    { cundyRollett: "[3³.4²; 3².4.3.4]¹", gomJauHogg: "4-3,3-4,3/r90/m(h3)", vertices: "2 Uniform", wallpaper: "p4g (4*2)" },
    { cundyRollett: "[3³.4²; 3².4.3.4]²", gomJauHogg: "4-3,3,3-4,3/r(c2)/r(h13)/r(h45)", vertices: "2 Uniform", wallpaper: "pgg (2x)" },
    { cundyRollett: "[4⁴; 3³.4²]¹", gomJauHogg: "4-3/m(h4)/m(h3)/r(h2)", vertices: "2 Uniform", wallpaper: "cmm (2*22)" },
    { cundyRollett: "[4⁴; 3³.4²]²", gomJauHogg: "4-4-3-3/m90/r(h3)", vertices: "2 Uniform", wallpaper: "cmm (2*22)" },
    { cundyRollett: "[3⁶; 3³.4²]¹", gomJauHogg: "4-3,4-3,3/m90/r(h3)", vertices: "2 Uniform", wallpaper: "pmm (*2222)" },
    { cundyRollett: "[3⁶; 3³.4²]²", gomJauHogg: "4-3-3-3/m90/r(h7)/r(h5)", vertices: "2 Uniform", wallpaper: "cmm (2*22)" },
    { cundyRollett: "(3.4.6.4)²; 3.4².6", gomJauHogg: "6-4-3,4-6,3/m30/r(c2)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3⁶)²; 3⁴.6]¹", gomJauHogg: "6-3-3/m30/r(v3)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3⁶)²; 3⁴.6]²", gomJauHogg: "6-3-3-3-0,3/m30/r(v2)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3⁶)²; 3⁴.6]³", gomJauHogg: "6-3-3,3-3-3-0,3/r60/r(h7)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; (3⁴.6)²", gomJauHogg: "3-3,3-6/m90/r(h6)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; (3².4.3.4)²", gomJauHogg: "3-4-3,3/m30/m(h2)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "(3.4².6)²; 3.6.3.6", gomJauHogg: "4-6,4-4,3,3/m90/r(h4)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3.4².6; (3.6.3.6)²]¹", gomJauHogg: "4-6,4-0,3,3/m/r(v1)/r(h25)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3.4².6; (3.6.3.6)²]²", gomJauHogg: "4-6,4-0,3,3/m90/r(v1)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3².6²; (3.6.3.6)²", gomJauHogg: "6-3,0,3,3,3,3/r(h4)/r(v15)/r(v30)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "(3⁴.6)²; 3.6.3.6", gomJauHogg: "6-3,3-0,3/r/r(v1)/r(h12)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3³.4²; (4⁴)²]¹", gomJauHogg: "4-4-4-3/m90/r(h4)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3³.4²; (4⁴)²]²", gomJauHogg: "4-4-3/r(h6)/m(h5)/r(h3)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3³.4²)²; 4⁴]¹", gomJauHogg: "4-4-3-3-4/m90/r(h10)/r(c3)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3³.4²)²; 4⁴]²", gomJauHogg: "4-3,4-3,3-4/m90/r(h3)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "(3³.4²)²; 3².4.3.4", gomJauHogg: "4-4,3,4-3,3,3-3,4-3-4/r/r(h17)/r(h18)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3³.4²; (3².4.3.4)²", gomJauHogg: "4-3,3-0,4,3/r/r(h2)/r(h18)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; (3³.4²)²]¹", gomJauHogg: "4-3,0,3-3-3/r(h5)/r(h19)/m(h18)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; (3³.4²)²]²", gomJauHogg: "4-3,0,3-3/r(h3)/r(h15)/m(h14)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3⁶)²; 3³.4²]¹", gomJauHogg: "4-3-3-3-3-3/m90/r(h3)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3⁶)²; 3³.4²]²", gomJauHogg: "4-3-3-3-3/m90/r(h2)/m(h22)", vertices: "3-Uniform (2 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3.4².6; 3.6.3.6; 4.6.12", gomJauHogg: "12-6,4-3,3,4/m30/r(c5)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3².4.12; 4.6.12", gomJauHogg: "12-3,4,6-3/m60/m(c5)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3².4.12; 3.4.6.4; 3.12²", gomJauHogg: "6-4-3,12,3-3/m30/r(h2)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3.4.3.12; 3.4.6.4; 3.12²", gomJauHogg: "6-4-3,3-12-0,0,0,3/m30/r(c2)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3³.4²; 3².4.12; 3.4.6.4", gomJauHogg: "12-4,3-6,3-0,0,4/m30/r(h11)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3³.4²; 3².4.12", gomJauHogg: "12-3,4-3-3-3/m30/m(h9)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3².4.3.4; 3².4.12", gomJauHogg: "12-3,4-3,3/m30/r(v1)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁴.6; 3³.4²; 3².4.3.4", gomJauHogg: "6-3-3-4-3,3/m30/r(h10)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3².4.3.4; 3.4².6", gomJauHogg: "3-4-3,4-6/m30/r(c5)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3³.4²; 3.4.6.4", gomJauHogg: "6-4-3,4-3,3/m30/r(c5)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3².4.3.4; 3.4.6.4", gomJauHogg: "6-4-3,3-4,3,3-3/r60/r(v5)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3³.4²; 3².4.3.4", gomJauHogg: "3-4-3-3/m30/r(h6)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3².4.12; 3.4.3.12; 3.12²", gomJauHogg: "12-4-3,3/m90/r(h6)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3.4.6.4; 3.4².6; 4⁴", gomJauHogg: "6-4,3-3,0,4-6/m90/r(v5)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3².4.3.4; 3.4.6.4; 3.4².6", gomJauHogg: "6-4,3-3,3,4-0,0,6,3/m90/r(h17)/m(h1)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3³.4²; 3².4.3.4; 4⁴", gomJauHogg: "4-3-3-0,4/r90/r(h3)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3.4².6; 3.6.3.6; 4⁴]¹", gomJauHogg: "4-4-3,4-6/m/r(c3)/r(h29)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3.4².6; 3.6.3.6; 4⁴]²", gomJauHogg: "4-4,4-3,4-6/m90/r(c5)/r(v1)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3.4².6; 3.6.3.6; 4⁴]³", gomJauHogg: "6-3,4-0,4,4-0,4/m90/r(h9)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3.4².6; 3.6.3.6; 4⁴]⁴", gomJauHogg: "6-4,3,3-4/m(h4)/r/r(v15)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3³.4²; 3².6²; 3.4².6", gomJauHogg: "4-6-3,0,3,3-0,0,4/m90/r(h4)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    // // { cundyRollett: "[3².6²; 3.4².6; 3.6.3.6]¹", gomJauHogg: "4-6,4,3-0,3,3,0,6/m(h2)/m", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3².6²; 3.4².6; 3.6.3.6]²", gomJauHogg: "4-6,4-0,3,3/r(h2)/m90/r(c9)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁴.6; 3³.4²; 3.4².6", gomJauHogg: "4-6,4-0,3,3-0,3,3/r/r(c1)/r(h17)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3².6²; 3.6.3.6; 6³]¹", gomJauHogg: "6-6-3,3,3/r60/r(h2)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3².6²; 3.6.3.6; 6³]²", gomJauHogg: "6-6,6,3-3,3/m//r(h8)/r(h49)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁴.6; 3².6²; 6³", gomJauHogg: "6-3-3/m/r(h3)/r(h15)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "3⁶; 3².6²; 6³", gomJauHogg: "3-6/r60/m(c2)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3⁴.6; 3².6²]¹", gomJauHogg: "6-3-3,3-3,3-0,3/r(h7)/r(h29)/r(h29)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3⁴.6; 3².6²]²", gomJauHogg: "3-3,6-3/m/r(h6)/r(c6)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3⁴.6; 3².6²]³", gomJauHogg: "6-3-3/m90/r(h2)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3⁴.6; 3.6.3.6]¹", gomJauHogg: "3-3,3-3,6,3/m90/r(v1)/r(v15)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3⁴.6; 3.6.3.6]²", gomJauHogg: "3-3-6-0,3/r60/m(c1)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3⁴.6; 3.6.3.6]³", gomJauHogg: "3-3-6/r60/r(v4)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3³.4²; 4⁴]¹", gomJauHogg: "4-4-3-3/m90/r(h7)/r(v1)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3³.4²; 4⁴]²", gomJauHogg: "4-4-3-3-3/m90/r(h9)/r(h3)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3³.4²; 4⁴]³", gomJauHogg: "4-4-3-3-3/m(h9)/r(h1)/r(v1)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[3⁶; 3³.4²; 4⁴]⁴", gomJauHogg: "4-4-3-3-3/m(h9)/r(h1)/r(h3)", vertices: "3-Uniform (3 Vertex Types)", wallpaper: "" },
    { cundyRollett: "[(3⁶)²; 3⁴.6; 3².6²]¹", gomJauHogg: "6-3-3-3/m90/r(h2)", vertices: "4-Uniform (3 Vertex Types)", wallpaper: "" }
];



/***/ }),

/***/ "./src/components/editor.tsx":
/*!***********************************!*\
  !*** ./src/components/editor.tsx ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var wouter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wouter */ "./node_modules/wouter/esm/index.js");
/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lucide-react */ "./node_modules/lucide-react/dist/esm/icons/refresh-ccw.js");
/* harmony import */ var _preshape_Input_Input_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../preshape/Input/Input.js */ "./src/preshape/Input/Input.tsx");
/* harmony import */ var _preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../preshape/box/box.js */ "./src/preshape/box/box.tsx");
/* harmony import */ var _antwerp_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../antwerp.js */ "./src/antwerp.tsx");
/* harmony import */ var _utils_get_url_params_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/get-url-params.js */ "./src/components/utils/get-url-params.ts");
/* harmony import */ var _src_to_shapes_to_shapes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../src/to-shapes/to-shapes.js */ "../src/to-shapes/to-shapes.ts");








function Editor() {
    const searchParamsStr = (0,wouter__WEBPACK_IMPORTED_MODULE_1__.useSearch)();
    const { colorMethod, colorScale, configuration, repeatCount, shapeSize, showTransforms, showVertices } = (0,_utils_get_url_params_js__WEBPACK_IMPORTED_MODULE_5__.getUrlParams)(searchParamsStr);
    function handleUpdateConfiguration() {
        (0,_src_to_shapes_to_shapes_js__WEBPACK_IMPORTED_MODULE_6__.toShapes)(configuration, shapeSize, repeatCount);
    }
    ;
    function handleSubmit(event) {
        event.preventDefault();
        handleUpdateConfiguration();
    }
    ;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { backgroundColor: "text-shade-1", flex: "vertical", gap: "x1", grow: true },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { backgroundColor: "background-shade-3", flex: "vertical", grow: true },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_antwerp_js__WEBPACK_IMPORTED_MODULE_4__.Antwerp, { colorMethod: colorMethod, colorScale: colorScale, configuration: configuration, grow: true, repeatCount: repeatCount, shapeSize: shapeSize, showTransforms: showTransforms, showVertices: showVertices })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { style: { borderBottom: '3px solid white' }, flex: "horizontal", gap: "x1" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { alignChildrenVertical: "middle", backgroundColor: "background-shade-1", flex: "horizontal", grow: true },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { basis: "0", grow: true },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Input_Input_js__WEBPACK_IMPORTED_MODULE_2__.Input
                    // align="middle"
                    // onChange={ (event) => setValue((event.target as HTMLInputElement).value) }
                    , { 
                        // align="middle"
                        // onChange={ (event) => setValue((event.target as HTMLInputElement).value) }
                        paddingHorizontal: "x6", paddingVertical: "x3", 
                        // size="x2"
                        // value={value}
                        value: configuration, readOnly //TODO2
                        : true }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { backgroundColor: "background-shade-1", style: { display: "block", padding: '10px 20px', cursor: 'pointer' }, onClick: handleUpdateConfiguration, href: "" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(lucide_react__WEBPACK_IMPORTED_MODULE_7__["default"], { size: "1.5rem", color: 'white' })))));
}
;



/***/ }),

/***/ "./src/components/library-entry.tsx":
/*!******************************************!*\
  !*** ./src/components/library-entry.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LibraryEntry: () => (/* binding */ LibraryEntry)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var wouter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wouter */ "./node_modules/wouter/esm/index.js");
/* harmony import */ var _antwerp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../antwerp.js */ "./src/antwerp.tsx");
/* harmony import */ var _preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../preshape/box/box.js */ "./src/preshape/box/box.tsx");
/* harmony import */ var _preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../preshape/Text/Text.js */ "./src/preshape/Text/Text.tsx");
/* harmony import */ var _utils_get_url_params_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/get-url-params.js */ "./src/components/utils/get-url-params.ts");






function LibraryEntry(props) {
    const { active, cundyRollett, gomJauHogg, onClick, vertices, wallpaper, ...rest } = props;
    const searchParamsStr = (0,wouter__WEBPACK_IMPORTED_MODULE_1__.useSearch)();
    const { colorMethod, colorScale } = (0,_utils_get_url_params_js__WEBPACK_IMPORTED_MODULE_5__.getUrlParams)(searchParamsStr);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { ...rest, 
        // active={active}
        // borderSize="x1"
        style: {
            display: "block", textDecoration: 'none', border: '2px solid gray',
            cursor: 'pointer', padding: '5px'
        }, key: gomJauHogg, 
        // minWidth="0"
        onClick: () => onClick(gomJauHogg), href: "" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_3__.Box, { margin: "x3" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_antwerp_js__WEBPACK_IMPORTED_MODULE_2__.Antwerp, { colorMethod: colorMethod, colorScale: colorScale, configuration: gomJauHogg, height: "200px", repeatCount: 4, shapeSize: 15, showTransforms: false, showVertices: false })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_4__.Text, { style: { textDecoration: 'none' }, ellipsis: true, size: "x3", strong: true }, cundyRollett),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("br", null),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_4__.Text, { ellipsis: true, size: "x3", strong: true }, gomJauHogg),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_4__.Text, { ellipsis: true, size: "x3", strong: false }, vertices),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_4__.Text, { ellipsis: true, size: "x3" }, wallpaper)));
}



/***/ }),

/***/ "./src/components/library.tsx":
/*!************************************!*\
  !*** ./src/components/library.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Library: () => (/* binding */ Library)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_groupby__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.groupby */ "./node_modules/lodash.groupby/index.js");
/* harmony import */ var lodash_groupby__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_groupby__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var wouter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wouter */ "./node_modules/wouter/esm/index.js");
/* harmony import */ var _preshape_Button_Button_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../preshape/Button/Button.js */ "./src/preshape/Button/Button.tsx");
/* harmony import */ var _preshape_Button_Buttons_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../preshape/Button/Buttons.js */ "./src/preshape/Button/Buttons.tsx");
/* harmony import */ var _preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../preshape/Text/Text.js */ "./src/preshape/Text/Text.tsx");
/* harmony import */ var _preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../preshape/box/box.js */ "./src/preshape/box/box.tsx");
/* harmony import */ var _preshape_Grid_Grid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../preshape/Grid/Grid.js */ "./src/preshape/Grid/Grid.tsx");
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./configurations.js */ "./src/components/configurations.ts");
/* harmony import */ var _library_entry_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./library-entry.js */ "./src/components/library-entry.tsx");
/* harmony import */ var _utils_upd_search_params_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/upd-search-params.js */ "./src/utils/upd-search-params.ts");











function Library() {
    const [group, setGroup] = react__WEBPACK_IMPORTED_MODULE_0__.useState('vertices');
    const groupedConfigurations = lodash_groupby__WEBPACK_IMPORTED_MODULE_1___default()(_configurations_js__WEBPACK_IMPORTED_MODULE_8__.configurations, group);
    const searchParamsStr = (0,wouter__WEBPACK_IMPORTED_MODULE_2__.useSearch)();
    const [location, setLocation] = (0,wouter__WEBPACK_IMPORTED_MODULE_2__.useLocation)();
    if (groupedConfigurations['']) {
        const group = groupedConfigurations[''];
        delete groupedConfigurations[''];
        groupedConfigurations[''] = group;
    }
    function handleSelect(configuration) {
        const searchParamsStr_ = (0,_utils_upd_search_params_js__WEBPACK_IMPORTED_MODULE_10__.updSearchParams)(searchParamsStr, { configuration });
        setLocation(`/gomjau-hogg/?${searchParamsStr_}`);
    }
    ;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, { flex: "vertical", grow: true, maxWidth: "1050px", padding: "x6" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, { alignChildrenVertical: "middle", flex: "horizontal", gap: "x4", margin: "x6" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, { grow: true },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_5__.Text, { size: "x3", strong: true }, "Tiling Library")),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Button_Buttons_js__WEBPACK_IMPORTED_MODULE_4__.Buttons, null,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Button_Buttons_js__WEBPACK_IMPORTED_MODULE_4__.Buttons, { alignChildrenHorizontal: "end" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Button_Button_js__WEBPACK_IMPORTED_MODULE_3__.Button, { onPointerUp: () => setGroup(group === 'vertices' ? 'wallpaper' : 'vertices') },
                            "Group by: ",
                            group))))),
        Object
            .entries(groupedConfigurations)
            .map(([groupKey, configurations]) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, { key: groupKey, margin: "x12" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, { margin: "x6" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_5__.Text, { strong: true }, groupKey || 'No Defined Wallpaper Group')),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_6__.Box, null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Grid_Grid_js__WEBPACK_IMPORTED_MODULE_7__.Grid, { gap: "x6", repeatWidth: "224px" }, configurations.map((config, index) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_library_entry_js__WEBPACK_IMPORTED_MODULE_9__.LibraryEntry, { ...config, active: false, key: config.gomJauHogg || config.cundyRollett || index, onClick: handleSelect }))))))))));
}



/***/ }),

/***/ "./src/components/logo.tsx":
/*!*********************************!*\
  !*** ./src/components/logo.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Logo: () => (/* binding */ Logo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _assets_logo_night_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assets/logo-night.js */ "./src/components/assets/logo-night.tsx");


function Logo(props) {
    // const { theme } = React.useContext(RootContext);
    const theme = 'night';
    // return theme === 'day'
    //   ? <LogoDaySvg { ...props } />
    //   : <LogoNightSvg { ...props } />;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_assets_logo_night_js__WEBPACK_IMPORTED_MODULE_1__.LogoNightSvg, { ...props });
}



/***/ }),

/***/ "./src/components/menu.tsx":
/*!*********************************!*\
  !*** ./src/components/menu.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Menu: () => (/* binding */ Menu)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lucide-react */ "./node_modules/lucide-react/dist/esm/icons/pencil.js");
/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lucide-react */ "./node_modules/lucide-react/dist/esm/icons/library.js");
/* harmony import */ var wouter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wouter */ "./node_modules/wouter/esm/index.js");
/* harmony import */ var _preshape_List_List_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../preshape/List/List.js */ "./src/preshape/List/List.tsx");
/* harmony import */ var _preshape_List_ListItem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../preshape/List/ListItem.js */ "./src/preshape/List/ListItem.tsx");





function Menu() {
    const searchParamsStr = (0,wouter__WEBPACK_IMPORTED_MODULE_1__.useSearch)();
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_List_List_js__WEBPACK_IMPORTED_MODULE_2__.List, { gap: "x2" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Link, { to: `/gomjau-hogg/?${searchParamsStr}` },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_List_ListItem_js__WEBPACK_IMPORTED_MODULE_3__.ListItem, { style: { color: 'white' } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(lucide_react__WEBPACK_IMPORTED_MODULE_4__["default"], { size: "1.25rem" }))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Link, { to: `/gomjau-hogg/library?${searchParamsStr}` },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_List_ListItem_js__WEBPACK_IMPORTED_MODULE_3__.ListItem, { style: { color: 'white' } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(lucide_react__WEBPACK_IMPORTED_MODULE_5__["default"], { size: "1.25rem" })))));
}

{ /* <Route path="/library" element={
    // { ({ match }) => (
    <ListItem separator="|">
        <Link active={ !!match } title="Library" to={ `/library?${search}` }>
        {<Tooltip content="Library">
            { (props) => <Icon { ...props } name="Book" size="1.25rem" /> }
        </Tooltip>}
        </Link>
    </ListItem>
    // ) }
}/> */
}


/***/ }),

/***/ "./src/components/root.tsx":
/*!*********************************!*\
  !*** ./src/components/root.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Root: () => (/* binding */ Root)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var wouter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wouter */ "./node_modules/wouter/esm/index.js");
/* harmony import */ var _preshape_box_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../preshape/box/box.js */ "./src/preshape/box/box.tsx");
/* harmony import */ var _editor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor.js */ "./src/components/editor.tsx");
/* harmony import */ var _menu_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu.js */ "./src/components/menu.tsx");
/* harmony import */ var _library_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./library.js */ "./src/components/library.tsx");
/* harmony import */ var _logo_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./logo.js */ "./src/components/logo.tsx");
/* harmony import */ var _preshape_hooks_use_match_media_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../preshape/hooks/use-match-media.js */ "./src/preshape/hooks/use-match-media.ts");
/* harmony import */ var _preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../preshape/Text/Text.js */ "./src/preshape/Text/Text.tsx");









function Root() {
    const match = (0,_preshape_hooks_use_match_media_js__WEBPACK_IMPORTED_MODULE_7__["default"])(['600px']);
    const searchParamsStr = (0,wouter__WEBPACK_IMPORTED_MODULE_1__.useSearch)();
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { style: { flexGrow: 1 }, backgroundColor: "text-shade-1", flex: "vertical", gap: "x1", grow: true },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { alignChildrenVertical: "middle", backgroundColor: "background-shade-1", flex: "horizontal", gap: "x6", paddingHorizontal: "x6", paddingVertical: "x2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { flex: "horizontal", grow: true },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Link, { style: { display: "block", textDecoration: 'none' }, href: `/gomjau-hogg/?${searchParamsStr}` },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { alignChildrenVertical: "middle", flex: "horizontal", gap: "x4", grow: true },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_logo_js__WEBPACK_IMPORTED_MODULE_6__.Logo, null),
                        match('600px') &&
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_Text_Text_js__WEBPACK_IMPORTED_MODULE_8__.Text, { style: { color: 'white', fontWeight: 'bold', textDecoration: 'none' } }, "ANTWERP")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_menu_js__WEBPACK_IMPORTED_MODULE_4__.Menu, null)),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_preshape_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { id: "box1", backgroundColor: "background-shade-1", flex: "vertical", grow: true },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Switch, null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Route, { component: _library_js__WEBPACK_IMPORTED_MODULE_5__.Library, path: `/gomjau-hogg/library` }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Route, { component: _editor_js__WEBPACK_IMPORTED_MODULE_3__.Editor, path: "/gomjau-hogg/" }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(wouter__WEBPACK_IMPORTED_MODULE_1__.Route, { component: _editor_js__WEBPACK_IMPORTED_MODULE_3__.Editor, path: "/gomjau-hogg/index.html" })))));
}



/***/ }),

/***/ "./src/components/utils/get-url-params.ts":
/*!************************************************!*\
  !*** ./src/components/utils/get-url-params.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getUrlParams: () => (/* binding */ getUrlParams)
/* harmony export */ });
/* harmony import */ var _utils_get_color_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/get-color-scale.js */ "./src/utils/get-color-scale.ts");
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../defaults.js */ "./src/defaults.ts");


function getUrlParams(searchParamsStr) {
    const searchParams = new URLSearchParams(searchParamsStr);
    const { getConfiguration, getColorMethod, getColorScale: getColorScale_, getRepeatCount, getShowTransforms, getShapeSize, getShowAxis15, getShowAxis90, getShowVertices } = urlParamGetters;
    const configuration = getConfiguration(searchParams.get('configuration'));
    const colorMethod = getColorMethod(searchParams.get('colorMethod'));
    const colorScale = getColorScale_(searchParams.get('colorScale'));
    const repeatCount = getRepeatCount(searchParams.get('repeatCount'));
    const shapeSize = getShapeSize(searchParams.get('shapeSize'));
    const showTransforms = getShowTransforms(searchParams.get('showTransforms'));
    const showAxis15 = getShowAxis15(searchParams.get('showAxis15'));
    const showAxis90 = getShowAxis90(searchParams.get('showAxis90'));
    const showVertices = getShowVertices(searchParams.get('showVertices'));
    return {
        configuration, colorMethod, colorScale, repeatCount: repeatCount, shapeSize,
        showTransforms, showAxis15, showAxis90, showVertices
    };
}
const urlParamGetters = {
    getConfiguration: function (v) {
        if (v === null || v === undefined || v === '') {
            return _defaults_js__WEBPACK_IMPORTED_MODULE_1__.defaults.configuration;
        }
        return v;
    },
    getColorMethod: function (v) {
        if (v === 'placement' || v === 'transform') {
            return v;
        }
        return 'placement';
    },
    getColorScale: function (v) {
        if (_utils_get_color_scale_js__WEBPACK_IMPORTED_MODULE_0__.colorScales.includes(v)) {
            return v;
        }
        return _utils_get_color_scale_js__WEBPACK_IMPORTED_MODULE_0__.colorScales[1];
    },
    getRepeatCount: (vStr) => {
        const defaultRepeatCount = 6;
        if (vStr === null || vStr === undefined) {
            return defaultRepeatCount;
        }
        const v = Number.parseInt(vStr);
        return Number.isFinite(v) && v >= 0
            ? v : defaultRepeatCount;
    },
    getShowTransforms: getBooleanParam(false),
    getShapeSize: (vStr) => {
        const defaultShapeSize = 15;
        if (vStr === null || vStr === undefined) {
            return defaultShapeSize;
        }
        const v = Number.parseInt(vStr);
        return Number.isFinite(v) && v >= 3 && v <= 500
            ? v : defaultShapeSize;
    },
    getShowAxis15: getBooleanParam(false),
    getShowAxis90: getBooleanParam(false),
    getShowVertices: getBooleanParam(false),
};
function getBooleanParam(defaultsTo) {
    return (v) => {
        if (v === 'true') {
            return true;
        }
        if (v === 'false') {
            return false;
        }
        return defaultsTo;
    };
}



/***/ }),

/***/ "./src/defaults.ts":
/*!*************************!*\
  !*** ./src/defaults.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaults: () => (/* binding */ defaults)
/* harmony export */ });
const defaults = {
    configuration: '3-4-3,3/m30/m(h2)',
};



/***/ }),

/***/ "./src/preshape/Button/Button.tsx":
/*!****************************************!*\
  !*** ./src/preshape/Button/Button.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Text_Text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Text/Text.js */ "./src/preshape/Text/Text.tsx");
/* harmony import */ var _Button_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Button.css */ "./src/preshape/Button/Button.css");





const Button = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { active, alignChildren = 'middle', alignChildrenHorizontal = alignChildren, alignChildrenVertical = alignChildren, backgroundColor, backgroundColorActive, backgroundColorHover, borderColor, borderColorActive, borderColorHover, borderRadius = 'x1', borderSize = 'x2', color, flex = 'horizontal', href: hrefProp, size = 'x3', padding, paddingHorizontal = padding || 'x3', paddingVertical = padding || 'x2', tag, textColor, textColorActive, textColorHover, to = '', variant = 'secondary', weight = 'x2', ...rest } = props;
    const classes = classnames__WEBPACK_IMPORTED_MODULE_1___default()('Button', {
        'Button--active': active,
        [`Button--${color}`]: color,
        [`Button--${variant}`]: variant,
    });
    // const href = useHref(to);
    // const internalOnClick = useLinkClickHandler(to);
    const originalOnClick = rest.onClick;
    if (to) {
        rest.onClick = (event) => {
            if (originalOnClick)
                originalOnClick(event);
            // internalOnClick(event as MouseEvent<HTMLAnchorElement>);
        };
    }
    const style = Object.entries({
        backgroundColor,
        backgroundColorActive,
        backgroundColorHover,
        borderColor,
        borderColorActive,
        borderColorHover,
        textColor,
        textColorActive,
        textColorHover,
    }).reduce((acc, [key, value]) => {
        if (value) {
            acc[`--Button-${key}`] = `var(--color-${value})`;
        }
        return acc;
    }, { ...props.style });
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Text_Text_js__WEBPACK_IMPORTED_MODULE_2__.Text, { ...rest, alignChildrenHorizontal: alignChildrenHorizontal, alignChildrenVertical: alignChildrenVertical, borderRadius: borderRadius, borderSize: borderSize, className: classes, flex: flex, 
        // href={to ? href : hrefProp}
        paddingHorizontal: paddingHorizontal, paddingVertical: paddingVertical, ref: ref, size: size, style: style, tag: to || hrefProp ? 'a' : tag ?? 'button', weight: weight }));
});


/***/ }),

/***/ "./src/preshape/Button/Buttons.tsx":
/*!*****************************************!*\
  !*** ./src/preshape/Button/Buttons.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Buttons: () => (/* binding */ Buttons)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _box_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../box/box.js */ "./src/preshape/box/box.tsx");




const Buttons = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { flex = 'horizontal', gap = 'x1', joined, ...rest } = props;
    const classes = classnames__WEBPACK_IMPORTED_MODULE_1___default()('Buttons', {
        'Buttons--joined-horizontal': joined && flex === 'horizontal',
        'Buttons--joined-vertical': joined && flex === 'vertical',
    });
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { ...rest, className: classes, flex: flex, gap: joined ? undefined : gap, ref: ref, shrink: true }));
});


/***/ }),

/***/ "./src/preshape/Form/useFormContext.ts":
/*!*********************************************!*\
  !*** ./src/preshape/Form/useFormContext.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormContext: () => (/* binding */ FormContext),
/* harmony export */   useFormContext: () => (/* binding */ useFormContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const FormContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
    form: {
        error: {},
        hasError: false,
        hasSubmitted: false,
        getIsDirty: () => false,
        state: {},
        setDirty: () => { },
        setError: () => { },
        setState: () => { },
        setSubmitted: () => { },
        reset: () => { },
    },
    getError: () => undefined,
    registerField: () => () => { },
});
const useFormContext = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FormContext);


/***/ }),

/***/ "./src/preshape/Form/useFormRegisterField.ts":
/*!***************************************************!*\
  !*** ./src/preshape/Form/useFormRegisterField.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useFormRegisterField: () => (/* binding */ useFormRegisterField)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _hooks_use_resize_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hooks/use-resize-observer.js */ "./src/preshape/hooks/use-resize-observer.tsx");
/* harmony import */ var _useFormContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useFormContext.js */ "./src/preshape/Form/useFormContext.ts");



/**
 * A hook to register a field with the form context.
 */
const useFormRegisterField = (name) => {
    const [size, setResizeObserverElement, element] = (0,_hooks_use_resize_observer_js__WEBPACK_IMPORTED_MODULE_1__.useResizeObserver)();
    const { registerField } = (0,_useFormContext_js__WEBPACK_IMPORTED_MODULE_2__.useFormContext)();
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (name && element) {
            return registerField(name, element);
        }
    }, [name, element, registerField, size]);
    return setResizeObserverElement;
};


/***/ }),

/***/ "./src/preshape/Grid/Grid.tsx":
/*!************************************!*\
  !*** ./src/preshape/Grid/Grid.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Grid: () => (/* binding */ Grid)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _box_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../box/box.js */ "./src/preshape/box/box.tsx");
/* harmony import */ var _Grid_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Grid.css */ "./src/preshape/Grid/Grid.css");





const Grid = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { alignChildren, className, gap, gapHorizontal = gap, gapVertical = gap, repeat = 'auto-fit', repeatWidth = 'max-content', repeatWidthMax = '1fr', repeatWidthMin, rowSize = 'max-content', ...rest } = props;
    const classes = classnames__WEBPACK_IMPORTED_MODULE_1___default()('Grid', {
        [`Grid--align-${alignChildren}`]: alignChildren,
        [`Grid--gap-horizontal-${gapHorizontal}`]: gapHorizontal,
        [`Grid--gap-vertical-${gapVertical}`]: gapVertical,
    }, className);
    const style = {
        gridTemplateColumns: `repeat(${repeat}, ${repeatWidthMin
            ? `minmax(${repeatWidthMin}, ${repeatWidthMax})`
            : repeatWidth})`,
        gridAutoRows: rowSize,
        ...rest.style,
    };
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box_js__WEBPACK_IMPORTED_MODULE_2__.Box, { ...rest, className: classes, ref: ref, style: style });
});


/***/ }),

/***/ "./src/preshape/Input/Input.tsx":
/*!**************************************!*\
  !*** ./src/preshape/Input/Input.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Input: () => (/* binding */ Input)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Form_useFormContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Form/useFormContext.js */ "./src/preshape/Form/useFormContext.ts");
/* harmony import */ var _Form_useFormRegisterField_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Form/useFormRegisterField.js */ "./src/preshape/Form/useFormRegisterField.ts");
/* harmony import */ var _Text_Text_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Text/Text.js */ "./src/preshape/Text/Text.tsx");
/* harmony import */ var _InputWrapper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./InputWrapper.js */ "./src/preshape/Input/InputWrapper.tsx");
/* harmony import */ var _Input_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Input.css */ "./src/preshape/Input/Input.css");








const Input = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { addonEnd, addonStart, 
    // align,
    backgroundColor = 'background-shade-1', borderRadius = 'x2', borderSize = 'x2', disabled, gap = 'x3', invalid, name, onChange, paddingHorizontal = 'x3', paddingVertical = 'x2', placeholder, placeholderTextColor = 'text-shade-4', 
    // size = 'x3',
    readOnly, tag = 'input', textColor = 'text-shade-1', type, value, ...rest } = props;
    const { getError } = (0,_Form_useFormContext_js__WEBPACK_IMPORTED_MODULE_2__.useFormContext)();
    const refFormElement = (0,_Form_useFormRegisterField_js__WEBPACK_IMPORTED_MODULE_3__.useFormRegisterField)(name);
    const inputClassName = classnames__WEBPACK_IMPORTED_MODULE_1___default()('Input__element', {
        [`Input__element--text-color-placeholder-${placeholderTextColor}`]: placeholderTextColor,
    });
    return (
    //@ts-ignore
    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputWrapper_js__WEBPACK_IMPORTED_MODULE_5__.InputWrapper, { ...rest, style: { border: 'none' }, addonEnd: addonEnd, addonStart: addonStart, alignChildrenVertical: "middle", backgroundColor: backgroundColor, borderRadius: borderRadius, borderSize: borderSize, disabled: disabled, invalid: invalid || !!(name && getError(name)), flex: "horizontal", gap: gap, paddingHorizontal: paddingHorizontal, paddingVertical: paddingVertical, ref: ref },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Text_Text_js__WEBPACK_IMPORTED_MODULE_4__.Text
        // align={align}
        , { 
            // align={align}
            basis: "0", className: inputClassName, disabled: disabled, grow: true, onChange: onChange, placeholder: placeholder, name: name, readOnly: readOnly, ref: refFormElement, 
            // size={size}
            tag: tag, textColor: textColor, type: type, value: value, weight: "x2" })));
});


/***/ }),

/***/ "./src/preshape/Input/InputWrapper.tsx":
/*!*********************************************!*\
  !*** ./src/preshape/Input/InputWrapper.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputWrapper: () => (/* binding */ InputWrapper)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _box_box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../box/box */ "./src/preshape/box/box.tsx");




const InputWrapper = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { addonEnd, addonStart, backgroundColor, borderRadius = 'x2', borderSize = 'x2', children, disabled, gap = 'x3', invalid, paddingHorizontal = 'x3', paddingVertical = 'x2', textColorActive = 'accent-shade-4', textColorHover = 'accent-shade-3', ...rest } = props;
    const classes = classnames__WEBPACK_IMPORTED_MODULE_1___default()('Input', {
        'Input--invalid': invalid,
        [`Input--text-color-active-${textColorActive}`]: textColorActive,
        [`Input--text-color-hover-${textColorHover}`]: textColorHover,
    });
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box__WEBPACK_IMPORTED_MODULE_2__.Box, { ...rest, alignChildrenVertical: "middle", backgroundColor: backgroundColor, borderRadius: borderRadius, borderSize: borderSize, className: classes, disabled: disabled, flex: "horizontal", gap: gap, overflow: "hidden", paddingHorizontal: paddingHorizontal, paddingVertical: paddingVertical, ref: ref },
        addonStart && addonStart,
        children,
        addonEnd && addonEnd));
});


/***/ }),

/***/ "./src/preshape/List/List.tsx":
/*!************************************!*\
  !*** ./src/preshape/List/List.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   List: () => (/* binding */ List)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _box_box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../box/box */ "./src/preshape/box/box.tsx");
/* harmony import */ var _List_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./List.css */ "./src/preshape/List/List.css");





const List = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { gap = 'x1', ...rest } = props;
    const classes = classnames__WEBPACK_IMPORTED_MODULE_1___default()('List', `List--${gap}`);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box__WEBPACK_IMPORTED_MODULE_2__.Box, { ...rest, alignChildrenVertical: "middle", className: classes, flex: "horizontal", gap: gap, ref: ref, tag: "ul", wrap: true }));
});


/***/ }),

/***/ "./src/preshape/List/ListItem.tsx":
/*!****************************************!*\
  !*** ./src/preshape/List/ListItem.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListItem: () => (/* binding */ ListItem)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _box_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../box/box */ "./src/preshape/box/box.tsx");



const ListItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { children, separator = '/', ...rest } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box__WEBPACK_IMPORTED_MODULE_1__.Box, { ...rest, alignChildrenVertical: "middle", className: "ListItem", "data-separator": separator, flex: "horizontal", ref: ref, tag: "li" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box__WEBPACK_IMPORTED_MODULE_1__.Box, null, children)));
});


/***/ }),

/***/ "./src/preshape/Text/Text.tsx":
/*!************************************!*\
  !*** ./src/preshape/Text/Text.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Text: () => (/* binding */ Text)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _box_box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../box/box */ "./src/preshape/box/box.tsx");
/* harmony import */ var _Text_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Text.css */ "./src/preshape/Text/Text.css");





const Text = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
    const { align, breakOn, className, ellipsis, emphasis, lineHeight, monospace, size, subscript, superscript, strong, tag: tagProps, textColor: textColorProps, titlecase, uppercase, weight: weightProps, ...rest } = props;
    const weight = (strong && 'x2') || weightProps;
    const tag = (strong && 'strong') ||
        (emphasis && 'em') ||
        (subscript && 'sub') ||
        (superscript && 'sup') ||
        tagProps;
    const textColor = textColorProps ||
        (size === 'x5' ||
            size === 'x6' ||
            size === 'x7' ||
            size === 'x8' ||
            weight === 'x2' ||
            weight === 'x3' ||
            weight === 'x4' ||
            weight === 'x5'
            ? 'text-shade-1'
            : undefined);
    const classes = classnames__WEBPACK_IMPORTED_MODULE_1___default()(className, 'Text', {
        'Text--ellipsis': ellipsis,
        'Text--emphasis': emphasis,
        'Text--monospace': monospace,
        'Text--subscript': subscript,
        'Text--superscript': superscript,
        'Text--titlecase': titlecase,
        'Text--uppercase': uppercase,
        [`Text--align-${align}`]: align,
        [`Text--break-${breakOn}`]: breakOn,
        [`Text--size-${size}`]: size,
        [`Text--weight-${weight}`]: weight,
    });
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_box_box__WEBPACK_IMPORTED_MODULE_2__.Box, { ...rest, className: classes, ref: ref, style: { ...rest.style, lineHeight }, tag: tag, textColor: textColor }));
});


/***/ }),

/***/ "./src/preshape/box/box.tsx":
/*!**********************************!*\
  !*** ./src/preshape/box/box.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Box: () => (/* binding */ Box)
/* harmony export */ });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _box_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./box.css */ "./src/preshape/box/box.css");



const Box = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, ref) => {
    const { absolute, alignChildren, alignChildrenHorizontal = alignChildren, alignChildrenVertical = alignChildren, alignSelf, backgroundColor, basis, borderBottom, borderColor, borderLeft, borderRadius, borderRight, borderSize, borderStyle, borderTop, children, className, clickable, container, display, elevate, fixed, flex, gap, gapHorizontal = gap, gapVertical = gap, grow, height, maxHeight, maxWidth, minWidth, minHeight, overflow, padding, paddingHorizontal = padding, paddingVertical = padding, paddingTop = paddingVertical, paddingBottom = paddingVertical, paddingRight = paddingHorizontal, paddingLeft = paddingHorizontal, paddingOffsetHorizontal, paddingOffsetRight = paddingOffsetHorizontal, paddingOffsetLeft = paddingOffsetHorizontal, paddingOffsetTop, paddingOffsetBottom, margin, reverse, shrink, style, tag, textColor, theme, transitionDuration = 'base', transitionProperty, width, wrap, zIndex, ...rest } = props;
    const border = borderTop || borderRight || borderBottom || borderLeft;
    const isPredefinedBorderRadius = borderRadius === 'full' ||
        borderRadius === 'x1' ||
        borderRadius === 'x2' ||
        borderRadius === 'x3' ||
        borderRadius === 'x4' ||
        borderRadius === 'x5' ||
        borderRadius === 'x6';
    const classes = classnames__WEBPACK_IMPORTED_MODULE_0___default()('Box', {
        'Box--border': border,
        'Box--border-top': borderTop,
        'Box--border-right': borderRight,
        'Box--border-bottom': borderBottom,
        'Box--border-left': borderLeft,
        'Box--clickable': clickable,
        'Box--container': container,
        'Box--elevate': elevate,
        'Box--flex-reverse': reverse,
        'Box--flex-wrap': wrap,
        'Box--max-width': maxWidth,
        [`Box--background-color-${backgroundColor}`]: backgroundColor,
        [`Box--border-color-${borderColor}`]: borderColor,
        [`Box--border-radius-${borderRadius}`]: isPredefinedBorderRadius,
        [`Box--border-size-${borderSize}`]: borderSize,
        [`Box--border-style-${borderStyle}`]: borderStyle,
        [`Box--elevate-${elevate}`]: typeof elevate === 'string',
        [`Box--position-absolute`]: absolute,
        [`Box--position-fixed`]: fixed,
        [`Box--position-${fixed || absolute}`]: fixed || absolute,
        [`Box--flex-${flex}`]: flex,
        [`Box--flex-align-horz-${alignChildrenHorizontal}`]: alignChildrenHorizontal,
        [`Box--flex-align-self-${alignSelf}`]: alignSelf,
        [`Box--flex-align-vert-${alignChildrenVertical}`]: alignChildrenVertical,
        [`Box--flex-gap-horizontal-${gapHorizontal}`]: gapHorizontal,
        [`Box--flex-gap-vertical-${gapVertical}`]: gapVertical,
        [`Box--margin-${margin}`]: margin,
        [`Box--padding-top-${paddingTop}`]: paddingTop,
        [`Box--padding-bottom-${paddingBottom}`]: paddingBottom,
        [`Box--padding-right-${paddingRight}`]: paddingRight,
        [`Box--padding-left-${paddingLeft}`]: paddingLeft,
        [`Box--padding-offset-right-${paddingOffsetRight}`]: paddingOffsetRight,
        [`Box--padding-offset-left-${paddingOffsetLeft}`]: paddingOffsetLeft,
        [`Box--padding-offset-top-${paddingOffsetTop}`]: paddingOffsetTop,
        [`Box--padding-offset-bottom-${paddingOffsetBottom}`]: paddingOffsetBottom,
        [`Box--text-color-${textColor}`]: textColor,
        [`Box--transition-${transitionDuration}`]: transitionProperty,
        [`Theme--${theme}`]: theme,
    }, className);
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(tag ?? 'div', {
        ...rest,
        className: classes,
        ref: ref,
        style: {
            borderRadius: isPredefinedBorderRadius ? undefined : borderRadius,
            display,
            flexBasis: basis,
            flexGrow: grow === true ? '1' : grow,
            flexShrink: shrink === true ? '1' : shrink,
            height,
            maxHeight,
            minHeight,
            maxWidth,
            minWidth,
            overflow,
            transitionProperty,
            width,
            zIndex,
            ...style,
        },
    }, children);
});


/***/ }),

/***/ "./src/preshape/colors.ts":
/*!********************************!*\
  !*** ./src/preshape/colors.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   colorDarkShade1: () => (/* binding */ colorDarkShade1),
/* harmony export */   colorDarkShade2: () => (/* binding */ colorDarkShade2),
/* harmony export */   colorLightShade1: () => (/* binding */ colorLightShade1),
/* harmony export */   colorLightShade2: () => (/* binding */ colorLightShade2)
/* harmony export */ });
const colorDarkShade1 = 'rgb(15, 20, 25)';
const colorDarkShade2 = 'rgb(20, 25, 30)';
const colorLightShade1 = 'rgb(245, 250, 255)';
const colorLightShade2 = 'rgb(240, 245, 250)';


/***/ }),

/***/ "./src/preshape/hooks/use-match-media.ts":
/*!***********************************************!*\
  !*** ./src/preshape/hooks/use-match-media.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable @typescript-eslint/no-explicit-any */

const getListeners = (queries, handler) => {
    // SSG
    if (typeof window === 'undefined')
        return [];
    return queries.map((query) => {
        const media = `(min-width: ${query})`;
        const listener = window.matchMedia(media);
        listener.addListener(handler);
        return { listener, media, query };
    });
};
const getMatchQueryIndex = (queries, listeners) => {
    for (let i = queries.length; i--;) {
        if (listeners[i]?.listener.matches) {
            return queries.indexOf(listeners[i].query);
        }
    }
    return -1;
};
const removeListeners = (listeners, handler) => {
    listeners.forEach(({ listener }) => {
        listener.removeListener(handler);
    });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((queries) => {
    const handleQueryChange = (event) => {
        const listener = listeners.current.find(({ media }) => media === event.media);
        if (listener) {
            setHitIndex(getMatchQueryIndex(queries, listeners.current));
        }
    };
    const listeners = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(getListeners(queries, handleQueryChange));
    const [hitIndex, setHitIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getMatchQueryIndex(queries, listeners.current));
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        removeListeners(listeners.current, handleQueryChange);
        listeners.current = getListeners(queries, handleQueryChange);
        setHitIndex(getMatchQueryIndex(queries, listeners.current));
        return () => {
            removeListeners(listeners.current, handleQueryChange);
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [...queries]);
    function match(pattern, fallback) {
        if (typeof pattern === 'string') {
            const patternIndex = queries.indexOf(pattern);
            return patternIndex >= 0 && patternIndex <= hitIndex;
        }
        for (let i = hitIndex + 1; i--;) {
            if (queries[i] in pattern) {
                return pattern[queries[i]];
            }
        }
        return fallback;
    }
    return match;
});


/***/ }),

/***/ "./src/preshape/hooks/use-resize-observer.tsx":
/*!****************************************************!*\
  !*** ./src/preshape/hooks/use-resize-observer.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useResizeObserver: () => (/* binding */ useResizeObserver)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useResizeObserver() {
    const [node, setNode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const [size, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({ width: 0, height: 0 });
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        const observer = new ResizeObserver((entries) => {
            if (entries.length) {
                setSize({
                    width: entries[0].contentRect.width,
                    height: entries[0].contentRect.height,
                });
            }
        });
        if (node) {
            observer.observe(node);
        }
        return () => {
            if (node) {
                observer.unobserve(node);
            }
            observer.disconnect();
        };
    }, [node]);
    return [size, setNode, node];
}



/***/ }),

/***/ "./src/utils/get-color-scale.ts":
/*!**************************************!*\
  !*** ./src/utils/get-color-scale.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   colorScales: () => (/* binding */ colorScales),
/* harmony export */   getColorScale: () => (/* binding */ getColorScale)
/* harmony export */ });
/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-scale-chromatic */ "./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js");
/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-scale-chromatic */ "./node_modules/d3-scale-chromatic/src/diverging/RdBu.js");
/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-scale-chromatic */ "./node_modules/d3-scale-chromatic/src/diverging/Spectral.js");
/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-scale-chromatic */ "./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js");

const colorScales = [
    'Plain',
    'Plasma',
    'Preshape Theme',
    'RdPu',
    'Spectral',
    'Viridis',
    'YlGnBu',
];
function getColorScale(scale) {
    switch (scale) {
        case 'Plain': return undefined;
        case 'Plasma': return d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_0__.plasma;
        case 'RdPu': return d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_1__["default"];
        case 'Spectral': return d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_2__["default"];
        case 'Viridis': return d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_0__["default"];
        case 'YlGnBu': return d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_3__["default"];
        case 'Preshape Theme':
        default: return d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_0__.plasma;
    }
}
;



/***/ }),

/***/ "./src/utils/upd-search-params.ts":
/*!****************************************!*\
  !*** ./src/utils/upd-search-params.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updSearchParams: () => (/* binding */ updSearchParams)
/* harmony export */ });
function updSearchParams(searchParamsStr, updObj) {
    const searchParams = new URLSearchParams(searchParamsStr);
    const paramMap = new Map(Array.from(searchParams.entries()));
    for (const k in updObj) {
        const v = updObj[k];
        paramMap.set('configuration', v);
    }
    let searchParamsStr_ = '';
    let appender = '';
    for (const [k, v] of paramMap) {
        searchParamsStr_ += `${appender}${k}=${encodeURIComponent(v)}`;
        appender = '&';
    }
    return searchParamsStr_;
}



/***/ }),

/***/ "../src/hash/ceate-buckets.ts":
/*!************************************!*\
  !*** ../src/hash/ceate-buckets.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createBuckets: () => (/* binding */ createBuckets)
/* harmony export */ });
const INITIAL_NUM_BUCKETS_PER_COORD_EXP = 8;
const INITIAL_NUM_BUCKETS_PER_COORD = 2 ** INITIAL_NUM_BUCKETS_PER_COORD_EXP;
/** Returns an array of 4 buckets ordered by quadrant */
function createBuckets() {
    const arrLen = (INITIAL_NUM_BUCKETS_PER_COORD ** 2) / 32;
    return [new Uint32Array(arrLen)];
}



/***/ }),

/***/ "../src/hash/get-coordinate-buckets.ts":
/*!*********************************************!*\
  !*** ../src/hash/get-coordinate-buckets.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCoordinateBuckets: () => (/* binding */ getCoordinateBuckets)
/* harmony export */ });
const { SQRT2, round, abs, log2, sqrt, ceil } = Math;
const SQRT3 = sqrt(3);
/** Number of buckets per unit */
const NUM_BUCKETS_PER_UNIT = ceil(log2(1 / (SQRT3 / 6 / SQRT2)));
// Must be smaller than half the minimum distance (divided by sqrt(2)) between
// any two shape centroids i,e smaller than
// `(SQRT3/6)/SQRT2 === 0.20412414523193148 and a power of 2
const BUCKET_SIZE = 2 ** -NUM_BUCKETS_PER_UNIT;
/**
 * Guessed maximum floating point error after all transformations.
 * * A high value was chosen to be sure but it is possible to calculate it
 * exactly though the calculation would be very tedious.
 */
const MAX_ABS_ERROR = 2 ** -16;
/**
 * Perform a location sensitive hash (called buckets)
 *
 * * points close to zero are automatically put into bucket 0
 *
 * @param v
 */
function getCoordinateBuckets(c) {
    const buckets = [];
    const c_ = abs(c);
    const c__ = c_ / BUCKET_SIZE;
    const b1 = round(c__);
    buckets.push(b1); // usually there's only one bucket per coordinate
    const d = abs(c__ - b1);
    if (d >= 0.5 - MAX_ABS_ERROR) { // too close to call - put into two buckets
        const b2 = c__ > b1
            ? b1 + 1 // we rounded down
            : b1 - 1; // we rounded up
        buckets.push(b2);
    }
    return buckets;
}



/***/ }),

/***/ "../src/hash/get-transform-point-buckets.ts":
/*!**************************************************!*\
  !*** ../src/hash/get-transform-point-buckets.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTransformPointBuckets: () => (/* binding */ getTransformPointBuckets)
/* harmony export */ });
const { log2, round, abs } = Math;
// Must be smaller than min distance between any two transform points
const BUCKET_SIZE = 2 ** -4;
/** number of buckets per unit */
const N = log2(1 / BUCKET_SIZE);
const MAX_COORD = 2 ** 8;
/** The number of buckets per coordinate */
const NUM_BUCKETS = MAX_COORD * (2 ** N);
/**
 * Guessed maximum floating point error after all transformations.
 * * A high value was chosen to be sure but it is possible to calculate it
 * exactly though the calculation would be very tedious.
 */
const MAX_ABS_ERROR = 2 ** -10;
/** Max shift allowed before throwing point into two buckets */
const ALLOWED_SHIFT = BUCKET_SIZE / 2 - MAX_ABS_ERROR;
function getTransformPointBuckets(p) {
    const [x, y] = p;
    // We pack the buckets into one float by shifting by around 22 bits
    // Note this allows bucket points to be compared easily
    // using the usual ===,>,>= etc. operators
    const xBuckets = getTransformPointCoordinateBuckets(x).map(b => b * NUM_BUCKETS * 2 ** 2);
    const yBuckets = getTransformPointCoordinateBuckets(y);
    // Pack buckets
    const buckets = [];
    for (let i = 0; i < xBuckets.length; i++) {
        for (let j = 0; j < yBuckets.length; j++) {
            buckets.push(xBuckets[i] + yBuckets[j]);
        }
    }
    return buckets;
}
/**
 * Perform a location sensitive hash (called buckets)
 *
 * * points close to zero are automatically put into bucket 0
 *
 * @param v
 */
function getTransformPointCoordinateBuckets(v) {
    const buckets = [];
    const b1 = round(v / BUCKET_SIZE) * BUCKET_SIZE;
    buckets.push(b1); // usually there's only one bucket per coordinate
    const d = abs(v - b1);
    if (d >= ALLOWED_SHIFT) { // too close to call - put into two buckets
        const b2 = v > b1
            ? b1 + BUCKET_SIZE // we rounded down
            : b1 - BUCKET_SIZE; // we rounded up
        buckets.push(b2);
    }
    return buckets;
}



/***/ }),

/***/ "../src/hash/is-bucket-zero.ts":
/*!*************************************!*\
  !*** ../src/hash/is-bucket-zero.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isBucketZero: () => (/* binding */ isBucketZero)
/* harmony export */ });
function isBucketZero(hashes) {
    return hashes.length === 1 && hashes[0] === 0;
}



/***/ }),

/***/ "../src/shape/from-centroid-and-angle.ts":
/*!***********************************************!*\
  !*** ../src/shape/from-centroid-and-angle.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromCentroidAndAngle: () => (/* binding */ fromCentroidAndAngle)
/* harmony export */ });
/* harmony import */ var _to_shapes_get_seed_shape_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../to-shapes/get-seed-shape.js */ "../src/to-shapes/get-seed-shape.ts");
/* harmony import */ var _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/zero-vector.js */ "../src/vector/zero-vector.ts");
/* harmony import */ var _vector_rotate_vector_around_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vector/rotate-vector-around.js */ "../src/vector/rotate-vector-around.ts");
/* harmony import */ var _vector_add_vector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vector/add-vector.js */ "../src/vector/add-vector.ts");
/* harmony import */ var _vector_scale_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vector/scale.js */ "../src/vector/scale.ts");





function fromCentroidAndAngle(c, θm, sides, scaleFactor) {
    const { ps, θm: sθm } = _to_shapes_get_seed_shape_js__WEBPACK_IMPORTED_MODULE_0__.seedShapes[sides];
    const ps_ = ps
        .map(p => (0,_vector_rotate_vector_around_js__WEBPACK_IMPORTED_MODULE_2__.rotateVectorAround)(θm + sθm, _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_1__.zeroVector, p))
        .map(p => (0,_vector_scale_js__WEBPACK_IMPORTED_MODULE_4__.scaleVector)(scaleFactor)(p))
        .map(p => (0,_vector_add_vector_js__WEBPACK_IMPORTED_MODULE_3__.addVector)(p, c));
    return ps_;
}



/***/ }),

/***/ "../src/shape/from-line-segment.ts":
/*!*****************************************!*\
  !*** ../src/shape/from-line-segment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromLineSegment: () => (/* binding */ fromLineSegment)
/* harmony export */ });
/* harmony import */ var _vector_add_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/add-vector.js */ "../src/vector/add-vector.ts");
/* harmony import */ var _vector_distance_between_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/distance-between.js */ "../src/vector/distance-between.ts");
/* harmony import */ var _vector_subtract_vector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vector/subtract-vector.js */ "../src/vector/subtract-vector.ts");
/* harmony import */ var _get_centroid_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get-centroid.js */ "../src/shape/get-centroid.ts");




const { PI, cos, sin, atan2, round } = Math;
function fromLineSegment(sides, ls, stagePlacement) {
    const [v1, v2] = ls;
    const l = (0,_vector_distance_between_js__WEBPACK_IMPORTED_MODULE_1__.distanceBetween)(v1, v2);
    const v = (0,_vector_subtract_vector_js__WEBPACK_IMPORTED_MODULE_2__.subtractVector)(v2, v1);
    let θ = atan2(v[1], v[0]) + (2 * PI) / sides;
    const ps = [v1, v2];
    for (let i = 2; i < sides; i++) {
        ps.push((0,_vector_add_vector_js__WEBPACK_IMPORTED_MODULE_0__.addVector)([cos(θ) * l, sin(θ) * l], ps[i - 1]));
        θ += 2 * PI / sides;
    }
    const ps_ = ps.slice(1).reverse();
    const c = (0,_get_centroid_js__WEBPACK_IMPORTED_MODULE_3__.getCentroid)([ps[0], ...ps_]);
    return {
        stage: 0,
        stagePlacement,
        c,
        θm: round(θ / PI * 12),
        sides
    };
}



/***/ }),

/***/ "../src/shape/from-sides.ts":
/*!**********************************!*\
  !*** ../src/shape/from-sides.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromSides: () => (/* binding */ fromSides)
/* harmony export */ });
/* harmony import */ var _vector_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/scale.js */ "../src/vector/scale.ts");
/* harmony import */ var _side_length_div_circumradius_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./side-length-div-circumradius.js */ "../src/shape/side-length-div-circumradius.ts");


const { cos, sin, PI } = Math;
/**
 * Returns a shape reprsented by its vertices.
 *
 * @param sides the number of sides of the shape: 3,4,6,8 or 12.
 */
function fromSides(sides) {
    const ps = Array.from(new Array(sides))
        .map((v, i) => [
        cos(-i * (2 * PI) / sides),
        sin(-i * (2 * PI) / sides),
    ]);
    const s = _side_length_div_circumradius_js__WEBPACK_IMPORTED_MODULE_1__.sidelength_div_circumradius[sides];
    return ps.map((0,_vector_scale_js__WEBPACK_IMPORTED_MODULE_0__.scaleVector)(1 / s));
}



/***/ }),

/***/ "../src/shape/get-centroid.ts":
/*!************************************!*\
  !*** ../src/shape/get-centroid.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCentroid: () => (/* binding */ getCentroid)
/* harmony export */ });
function getCentroid(ps) {
    let totalX = 0;
    let totalY = 0;
    const len = ps.length;
    for (let i = 0; i < len; i++) {
        totalX += ps[i][0];
        totalY += ps[i][1];
    }
    return [totalX / len, totalY / len];
}



/***/ }),

/***/ "../src/shape/get-shape-edges.ts":
/*!***************************************!*\
  !*** ../src/shape/get-shape-edges.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getShapeEdges: () => (/* binding */ getShapeEdges)
/* harmony export */ });
function getShapeEdges(ps) {
    return ps.map((p, i) => [p, ps[(i + 1) % ps.length]]);
}



/***/ }),

/***/ "../src/shape/rotate-shape.ts":
/*!************************************!*\
  !*** ../src/shape/rotate-shape.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rotateShape: () => (/* binding */ rotateShape)
/* harmony export */ });
/* harmony import */ var _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/zero-vector.js */ "../src/vector/zero-vector.ts");
/* harmony import */ var _vector_rotate_vector_around_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/rotate-vector-around.js */ "../src/vector/rotate-vector-around.ts");


/**
 *
 * @param θ
 * @param v
 * @param shape
 * @returns
 */
function rotateShape(θm, ps) {
    return ps.map(p => (0,_vector_rotate_vector_around_js__WEBPACK_IMPORTED_MODULE_1__.rotateVectorAround)(θm, _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_0__.zeroVector, p));
}



/***/ }),

/***/ "../src/shape/side-length-div-circumradius.ts":
/*!****************************************************!*\
  !*** ../src/shape/side-length-div-circumradius.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sidelength_div_circumradius: () => (/* binding */ sidelength_div_circumradius)
/* harmony export */ });
const { sqrt, SQRT2 } = Math;
const SQRT3 = sqrt(3);
/** Side length / circumradius */
const sidelength_div_circumradius = {
    3: SQRT3,
    4: SQRT2,
    6: 1,
    8: sqrt(2 - SQRT2),
    12: sqrt(2 - SQRT3)
};



/***/ }),

/***/ "../src/shapes/compare-points.ts":
/*!***************************************!*\
  !*** ../src/shapes/compare-points.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   comparePoints: () => (/* binding */ comparePoints)
/* harmony export */ });
/* harmony import */ var _vector_angle_equals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/angle-equals.js */ "../src/vector/angle-equals.ts");
/* harmony import */ var _vector_get_angle_clockwise_from_y_axis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/get-angle-clockwise-from-y-axis.js */ "../src/vector/get-angle-clockwise-from-y-axis.ts");


const { PI, hypot } = Math;
const ANGLE_PRECISION = 2 ** -10;
function comparePoints(a, b) {
    const _θa = (0,_vector_get_angle_clockwise_from_y_axis_js__WEBPACK_IMPORTED_MODULE_1__.getAngleClockwiseFromYAxis)(a);
    const _θb = (0,_vector_get_angle_clockwise_from_y_axis_js__WEBPACK_IMPORTED_MODULE_1__.getAngleClockwiseFromYAxis)(b);
    const θa = _θa > 2 * PI - ANGLE_PRECISION ? 0 : _θa;
    const θb = _θb > 2 * PI - ANGLE_PRECISION ? 0 : _θb;
    if ((0,_vector_angle_equals_js__WEBPACK_IMPORTED_MODULE_0__.angleEquals)(θa, θb)) {
        return hypot(...a) - hypot(...b);
    }
    return θa - θb;
}



/***/ }),

/***/ "../src/shapes/get-new-shapes.ts":
/*!***************************************!*\
  !*** ../src/shapes/get-new-shapes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNewShapes: () => (/* binding */ getNewShapes)
/* harmony export */ });
/* harmony import */ var _hash_get_coordinate_buckets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hash/get-coordinate-buckets.js */ "../src/hash/get-coordinate-buckets.ts");

const { max, sign } = Math;
/**
 *
 * @param buckets Set holding hashes of existing shapes
 * @param shapes new shapes to add
 */
function getNewShapes(buckets, shapes) {
    let buckets_ = buckets[0];
    const shapes_ = [];
    for (const shape of shapes) {
        const x = shape.c[0];
        const y = shape.c[1];
        // We pack the buckets into a square around the origin
        const xBuckets = (0,_hash_get_coordinate_buckets_js__WEBPACK_IMPORTED_MODULE_0__.getCoordinateBuckets)(x);
        const yBuckets = (0,_hash_get_coordinate_buckets_js__WEBPACK_IMPORTED_MODULE_0__.getCoordinateBuckets)(y);
        let found = false;
        for (let i = 0; i < xBuckets.length; i++) {
            for (let j = 0; j < yBuckets.length; j++) {
                const _idx = getIdx(xBuckets[i], yBuckets[j]);
                const idx = 4 * _idx + (x >= 0
                    ? y >= 0 ? 0 : 3
                    : y >= 0 ? 1 : 2);
                const bit = idx % 32;
                const word = (idx - bit) >> 5;
                const mask = (1 << bit);
                if (word > buckets_.length - 1) {
                    const oldBuffer = buckets_;
                    buckets[0] = new Uint32Array(4 * oldBuffer.length);
                    buckets[0].set(oldBuffer);
                    buckets_ = buckets[0];
                }
                else if ((buckets_[word] & mask) !== 0) {
                    found = true;
                }
                buckets_[word] |= mask;
            }
        }
        if (!found) {
            shapes_.push(shape);
        }
    }
    return shapes_;
}
function getIdx(x, y) {
    const a = sign(max(x - y + 1, 0)); // lower half (including diagonal)
    const b = a * (y + x ** 2);
    const c = sign(max(y - x, 0)); // upper half
    const d = c * (y * (y + 2) - x);
    return b + d;
}

// getIdx(0,0);//?
// getIdx(1,0);//?
// getIdx(2,0);//?
// getIdx(3,0);//?
// getIdx(4,0);//?
// getIdx(0,1);//?
// getIdx(1,1);//?
// getIdx(2,1);//?
// getIdx(3,1);//?
// getIdx(4,1);//?
// getIdx(0,2);//?
// getIdx(1,2);//?
// getIdx(2,2);//?
// getIdx(3,2);//?
// getIdx(4,2);//?
// getIdx(0,3);//?
// getIdx(1,3);//?
// getIdx(2,3);//?
// getIdx(3,3);//?
// getIdx(4,3);//?
// getIdx(0,4);//?
// getIdx(1,4);//?
// getIdx(2,4);//?
// getIdx(3,4);//?
// getIdx(4,4);//?


/***/ }),

/***/ "../src/shapes/get-transform-points.ts":
/*!*********************************************!*\
  !*** ../src/shapes/get-transform-points.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTransformPoints: () => (/* binding */ getTransformPoints)
/* harmony export */ });
/* harmony import */ var _shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shape/get-centroid.js */ "../src/shape/get-centroid.ts");
/* harmony import */ var _hash_get_transform_point_buckets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash/get-transform-point-buckets.js */ "../src/hash/get-transform-point-buckets.ts");
/* harmony import */ var _hash_is_bucket_zero_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hash/is-bucket-zero.js */ "../src/hash/is-bucket-zero.ts");
/* harmony import */ var _shape_get_shape_edges_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shape/get-shape-edges.js */ "../src/shape/get-shape-edges.ts");
/* harmony import */ var _shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shape/from-centroid-and-angle.js */ "../src/shape/from-centroid-and-angle.ts");
/* harmony import */ var _vector_add_vector_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../vector/add-vector.js */ "../src/vector/add-vector.ts");
/* harmony import */ var _vector_subtract_vector_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../vector/subtract-vector.js */ "../src/vector/subtract-vector.ts");
/* harmony import */ var _compare_points_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compare-points.js */ "../src/shapes/compare-points.ts");








const { PI, round, atan2 } = Math;
function getTransformPoints(shapes) {
    const transformPoints = [];
    // --------------
    // Centroids (c)
    // --------------
    for (let i = 0; i < shapes.length; i++) {
        const s = shapes[i];
        const { c, θm, sides } = s;
        const ps = (0,_shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_4__.fromCentroidAndAngle)(c, θm, sides, 1);
        const v = (0,_shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_0__.getCentroid)(ps);
        const θ2 = round(2 * atan2(v[0], -v[1]) / PI * 12);
        transformPoints.push({ v, θ2, pointType: 'c', index: 0 });
    }
    // -------------------------------
    // Vertices (v) and Midpoints (h)
    // -------------------------------
    const edges = shapes.map(shape => {
        const { c, θm, sides } = shape;
        const ps = (0,_shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_4__.fromCentroidAndAngle)(c, θm, sides, 1);
        return (0,_shape_get_shape_edges_js__WEBPACK_IMPORTED_MODULE_3__.getShapeEdges)(ps);
    }).flat();
    for (const ls of edges) {
        {
            const v = ls[0];
            const c = (0,_vector_subtract_vector_js__WEBPACK_IMPORTED_MODULE_6__.subtractVector)((0,_vector_add_vector_js__WEBPACK_IMPORTED_MODULE_5__.addVector)(v, [-v[1], v[0]]), v);
            const θ2 = round(atan2(c[1], c[0]) / PI * 12);
            transformPoints.push({
                v, θ2,
                pointType: 'v',
                index: 0
            });
        }
        {
            const v = (0,_shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_0__.getCentroid)(ls);
            const c = (0,_vector_subtract_vector_js__WEBPACK_IMPORTED_MODULE_6__.subtractVector)(ls[1], v);
            const θ2 = round(2 * atan2(c[1], c[0]) / PI * 12);
            transformPoints.push({
                v, θ2,
                pointType: 'h',
                index: 0
            });
        }
    }
    let cc = 0;
    let vv = 0;
    let hh = 0;
    const transformPoints_ = getUniqueVerticesNotZero(transformPoints)
        .sort((a, b) => (0,_compare_points_js__WEBPACK_IMPORTED_MODULE_7__.comparePoints)(a.v, b.v))
        .map(tp => ({
        ...tp,
        index: (tp.pointType === 'c' && ++cc) ||
            (tp.pointType === 'v' && ++vv) ||
            (tp.pointType === 'h' && ++hh) || 0,
    }));
    const transformPointMap = new Map(transformPoints_
        .map(v => [v.pointType + v.index, v]));
    return transformPointMap;
}
function getUniqueVerticesNotZero(vertices) {
    const vertexSet = new Set();
    const vertices_ = [];
    for (const vertex of vertices) {
        const hashes = (0,_hash_get_transform_point_buckets_js__WEBPACK_IMPORTED_MODULE_1__.getTransformPointBuckets)(vertex.v);
        if ((0,_hash_is_bucket_zero_js__WEBPACK_IMPORTED_MODULE_2__.isBucketZero)(hashes)) {
            continue; // no origins allowed
        }
        let found = false;
        for (let j = 0; j < hashes.length; j++) {
            const h = hashes[j];
            if (vertexSet.has(h)) {
                found = true;
                break;
            }
        }
        if (found) {
            continue;
        }
        for (const h of hashes) {
            vertexSet.add(h);
        }
        vertices_.push(vertex);
    }
    return vertices_;
}



/***/ }),

/***/ "../src/shapes/reflect-shapes.ts":
/*!***************************************!*\
  !*** ../src/shapes/reflect-shapes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   reflectShapes: () => (/* binding */ reflectShapes)
/* harmony export */ });
/* harmony import */ var _vector_reflect_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/reflect-vector.js */ "../src/vector/reflect-vector.ts");

function reflectShapes(θ2, v, shapes) {
    const shapes_ = [];
    const stage = shapes[0].stage + 1;
    for (const shape of shapes) {
        const c_ = (0,_vector_reflect_vector_js__WEBPACK_IMPORTED_MODULE_0__.reflectVector)(θ2, v, shape.c);
        const θm = (θ2 - shape.θm + 12) % 24;
        const { sides, stagePlacement } = shape;
        shapes_.push({
            sides, stage, stagePlacement,
            c: c_,
            θm
        });
    }
    return shapes_;
}



/***/ }),

/***/ "../src/shapes/rotate-shapes.ts":
/*!**************************************!*\
  !*** ../src/shapes/rotate-shapes.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rotateShapesAround: () => (/* binding */ rotateShapesAround)
/* harmony export */ });
/* harmony import */ var _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/zero-vector.js */ "../src/vector/zero-vector.ts");
/* harmony import */ var _vector_rotate_vector_around_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/rotate-vector-around.js */ "../src/vector/rotate-vector-around.ts");


function rotateShapesAround(θm, v = _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_0__.zeroVector, shapes) {
    const stage = shapes[0].stage + 1;
    const shapes_ = [];
    for (const shape of shapes) {
        const c_ = (0,_vector_rotate_vector_around_js__WEBPACK_IMPORTED_MODULE_1__.rotateVectorAround)(θm, v, shape.c);
        const { sides, stagePlacement } = shape;
        shapes_.push({
            sides, stage, stagePlacement,
            c: c_,
            θm: (θm + shape.θm) % 24,
        });
    }
    return shapes_;
}



/***/ }),

/***/ "../src/to-entities.ts":
/*!*****************************!*\
  !*** ../src/to-entities.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toEntities: () => (/* binding */ toEntities)
/* harmony export */ });
function to15DegIntervals(s) {
    switch (s) {
        case '30': return 2;
        case '45': return 3;
        case '60': return 4;
        case '90': return 6;
        case '180': return 12;
    }
}
function toEntities(configuration) {
    // E.g: '3-4-3,3/m30/m(4)'
    // E.g: '3-4-3,3/m30/m(h2)'
    const [shapes, ...transformsStr] = configuration.split('/');
    // shapes === '3-4-3,3'
    // transforms === ['m30','m(4)']
    const shapes_ = shapes
        .split('-')
        .map(group => group
        .split(',')
        .map(shape => Number.parseInt(shape)));
    // shapes_ === [[3],[4],[3,3]]
    ensureShapeGroupsCorrect(configuration, shapes_);
    const [[seedShapeType], ...shapeGroups] = shapes_;
    // shapeSeed === 3
    // shapeGroups === [[4],[3,3]]
    const transforms = transformsStr
        .map(toTransform)
        .filter(Boolean);
    // transformEntities === [{
    //     action: "m",
    //     actionAngle: 0.5235987755982988,
    //     pointIndex: 0,
    //     string: "m30"
    // }, {
    //     action: "m",
    //     pointIndex: 4,
    //     point: {
    //         "v": { "x": -5.684341886080802e-14, "y": -89.59244838580928 },
    //         "θ": 0,
    //         "pt": "l"
    //     },
    //     string: "m(4)",
    // }]
    return { seedShapeType, shapeGroups, transforms };
}
/**
 * Returns a `Transform` given a string (e.g. 'm45' or 'r(h1)')
 * @param transform
 * @returns
 */
function toTransform(transform) {
    const match = /([mr])([\d.]*)?\(?([cvh\d]+)?\)?/i.exec(transform);
    // E.g. 'm'
    // E.g. 'm45'
    // E.g. 'r(v15)'
    if (match) {
        const [, transformType, angleStr = '180', pointIndex,] = match;
        if (angleStr !== '30' && angleStr !== '45' && angleStr !== '60' &&
            angleStr !== '90' && angleStr !== '180') {
            throw new Error(`Angle must be 30,45,60,90 or 180 degrees, but found ${angleStr}`);
        }
        return {
            transformType,
            angle: pointIndex ? undefined : to15DegIntervals(angleStr),
            origin: undefined,
            pointIndex: pointIndex ? pointIndex : '',
            string: transform,
        };
    }
}
function ensureShapeGroupsCorrect(configuration, shapeGroups) {
    for (const shapeGroup of shapeGroups) {
        for (const shape of shapeGroup) {
            if (shape !== 0 &&
                shape !== 3 && shape !== 4 && shape !== 6 &&
                shape !== 8 && shape !== 12) {
                throw new Error(`Shape must be 0,3,4,6,8 or 12, but found ${shape} - ${configuration}`);
            }
        }
    }
}



/***/ }),

/***/ "../src/to-shapes/errors.ts":
/*!**********************************!*\
  !*** ../src/to-shapes/errors.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ErrorInvalidShape: () => (/* binding */ ErrorInvalidShape),
/* harmony export */   ErrorSeed: () => (/* binding */ ErrorSeed),
/* harmony export */   ErrorTransformAngleZero: () => (/* binding */ ErrorTransformAngleZero),
/* harmony export */   ErrorTransformNoChange: () => (/* binding */ ErrorTransformNoChange),
/* harmony export */   ErrorTransformNoIntersectionPoint: () => (/* binding */ ErrorTransformNoIntersectionPoint)
/* harmony export */ });
const ErrorSeed = () => ({
    code: 'ErrorSeed',
    type: 'Seed Shape',
    message: 'The seed shape must be one of 3, 4, 6, 8 or 12, directly followed by a `-` to indicate the start of the next shape group.',
});
const ErrorInvalidShape = () => ({
    code: 'ErrorShape',
    type: 'Invalid Shape',
    message: 'Shapes must only be one of 3, 4, 6, 8, or 12.',
});
const ErrorTransformAngleZero = (transform) => ({
    code: 'ErrorTransformAngle',
    type: 'Transform Angle',
    message: `The angle of the "${transform}" transform must be greater than 0.`,
});
const ErrorTransformNoChange = () => ({
    code: 'ErrorTransformNoChange',
    type: 'Repeated Transform',
    message: 'The covered area did not increase when the tile was repeated. ' +
        'This is likely caused by one or more incorrect transforms.'
});
const ErrorTransformNoIntersectionPoint = (transform) => ({
    code: 'ErrorTransformNoIntersectionPoint',
    type: 'Transform Intersection Point',
    message: `No intersection point found for the "${transform}" transform.`,
});



/***/ }),

/***/ "../src/to-shapes/get-seed-shape.ts":
/*!******************************************!*\
  !*** ../src/to-shapes/get-seed-shape.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSeedShape: () => (/* binding */ getSeedShape),
/* harmony export */   seedShapes: () => (/* binding */ seedShapes)
/* harmony export */ });
/* harmony import */ var _shape_from_sides_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shape/from-sides.js */ "../src/shape/from-sides.ts");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ "../src/to-shapes/errors.ts");
/* harmony import */ var _shape_rotate_shape_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shape/rotate-shape.js */ "../src/shape/rotate-shape.ts");



const { sqrt } = Math;
const SQRT3 = sqrt(3);
const seedShapes = {
    3: { ps: (0,_shape_rotate_shape_js__WEBPACK_IMPORTED_MODULE_2__.rotateShape)(-2, (0,_shape_from_sides_js__WEBPACK_IMPORTED_MODULE_0__.fromSides)(3)), θm: 0 },
    4: { ps: (0,_shape_rotate_shape_js__WEBPACK_IMPORTED_MODULE_2__.rotateShape)(9, (0,_shape_from_sides_js__WEBPACK_IMPORTED_MODULE_0__.fromSides)(4)), θm: 0 },
    6: { ps: (0,_shape_rotate_shape_js__WEBPACK_IMPORTED_MODULE_2__.rotateShape)(6, (0,_shape_from_sides_js__WEBPACK_IMPORTED_MODULE_0__.fromSides)(6)), θm: -6 },
    8: { ps: (0,_shape_rotate_shape_js__WEBPACK_IMPORTED_MODULE_2__.rotateShape)(7.5, (0,_shape_from_sides_js__WEBPACK_IMPORTED_MODULE_0__.fromSides)(8)), θm: 0 },
    12: { ps: (0,_shape_rotate_shape_js__WEBPACK_IMPORTED_MODULE_2__.rotateShape)(7, (0,_shape_from_sides_js__WEBPACK_IMPORTED_MODULE_0__.fromSides)(12)), θm: 0 }
};
/**
 * Returns a seed shape based on the given number of sides.
 *
 * * the side length of the returned shapes === 1
 */
function getSeedShape(sides) {
    if (sides !== 3 && sides !== 4 && sides !== 6 && sides !== 8 && sides !== 12) {
        throw (0,_errors_js__WEBPACK_IMPORTED_MODULE_1__.ErrorSeed)();
    }
    return {
        sides,
        // c: sides === 3 ? [0.5, SQRT3/2] : [0,0],
        c: sides === 3 ? [SQRT3 / 6, 0.5] : [0, 0],
        θm: sides === 3 ? 2 : sides === 6 ? -6 : 0,
        stage: 0,
        stagePlacement: 1
    };
}



/***/ }),

/***/ "../src/to-shapes/get-seed-shapes.ts":
/*!*******************************************!*\
  !*** ../src/to-shapes/get-seed-shapes.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSeedShapes: () => (/* binding */ getSeedShapes)
/* harmony export */ });
/* harmony import */ var _to_entities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../to-entities.js */ "../src/to-entities.ts");
/* harmony import */ var _get_seed_shape_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-seed-shape.js */ "../src/to-shapes/get-seed-shape.ts");
/* harmony import */ var _shape_from_line_segment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shape/from-line-segment.js */ "../src/shape/from-line-segment.ts");
/* harmony import */ var _hash_get_transform_point_buckets_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hash/get-transform-point-buckets.js */ "../src/hash/get-transform-point-buckets.ts");
/* harmony import */ var _shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shape/get-centroid.js */ "../src/shape/get-centroid.ts");
/* harmony import */ var _shape_get_shape_edges_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shape/get-shape-edges.js */ "../src/shape/get-shape-edges.ts");
/* harmony import */ var _shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shape/from-centroid-and-angle.js */ "../src/shape/from-centroid-and-angle.ts");
/* harmony import */ var _shapes_compare_points_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shapes/compare-points.js */ "../src/shapes/compare-points.ts");








const { abs, max } = Math;
const TOL = 2 ** -10;
// E.g. 12-4,6-3
// -------------
// 1. Place seed shape (12)
// 2. Shape groups === 4,6-3
// 3. Place 4 on first open polygon edge
// 4. Place 6 on next polygon edge (of same shape)
// 5. Place 3 on first open polygon edge of polygons in previous phase
function getSeedShapes(configuration) {
    const { seedShapeType, shapeGroups } = (0,_to_entities_js__WEBPACK_IMPORTED_MODULE_0__.toEntities)(configuration);
    const seedShape = (0,_get_seed_shape_js__WEBPACK_IMPORTED_MODULE_1__.getSeedShape)(seedShapeType);
    let shapes = [seedShape];
    let stagePlacement = 1;
    /** Map from line segment hash to number of line segments added */
    const connections = new Map();
    addConnections(connections, seedShape);
    let prevShapes = [seedShape];
    for (const shapeGroup of shapeGroups) {
        const shapesEdges = prevShapes
            .map(s => {
            const { c, θm, sides } = s;
            const ps = (0,_shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_6__.fromCentroidAndAngle)(c, θm, sides, 1);
            return (0,_shape_get_shape_edges_js__WEBPACK_IMPORTED_MODULE_5__.getShapeEdges)(ps);
        })
            .flat()
            .sort((a, b) => {
            if (abs(a[0][0]) < TOL && abs(a[1][0]) < TOL) {
                // vertical line segment passing through origin
                return 1;
            }
            if (abs(b[0][0]) < TOL && abs(b[1][0]) < TOL) {
                // vertical line segment passing through origin
                return -1;
            }
            const ca = (0,_shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_4__.getCentroid)(a);
            const cb = (0,_shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_4__.getCentroid)(b);
            return (0,_shapes_compare_points_js__WEBPACK_IMPORTED_MODULE_7__.comparePoints)(ca, cb);
        });
        prevShapes = [];
        let idx = 0;
        for (let i = 0; i < shapesEdges.length; i++) {
            const sides = shapeGroup[idx];
            const ls = shapesEdges[i];
            const n = getNumberOfConnections(connections, ls);
            if (n > 1) {
                continue;
            }
            if (sides === 0) {
                idx++;
                continue;
            }
            stagePlacement++;
            const shape = (0,_shape_from_line_segment_js__WEBPACK_IMPORTED_MODULE_2__.fromLineSegment)(sides, ls, stagePlacement);
            shapes.push(shape);
            prevShapes.push(shape);
            addConnections(connections, shape);
            idx++;
            if (idx >= shapeGroup.length) {
                break;
            }
        }
    }
    return {
        shapes: [shapes],
        maxStagePlacement: stagePlacement
    };
}
function getNumberOfConnections(connections, ls) {
    const edgeHashes = (0,_hash_get_transform_point_buckets_js__WEBPACK_IMPORTED_MODULE_3__.getTransformPointBuckets)((0,_shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_4__.getCentroid)(ls));
    const hs = edgeHashes
        .map(h => connections.get(h))
        .filter(h => h !== undefined);
    if (hs.length === 0) {
        return 0;
    }
    return max(...hs);
}
function addConnections(connections, shape) {
    const { c, θm, sides } = shape;
    const ps = (0,_shape_from_centroid_and_angle_js__WEBPACK_IMPORTED_MODULE_6__.fromCentroidAndAngle)(c, θm, sides, 1);
    const edges = (0,_shape_get_shape_edges_js__WEBPACK_IMPORTED_MODULE_5__.getShapeEdges)(ps);
    const edgeHashess = edges
        .map(ls => (0,_hash_get_transform_point_buckets_js__WEBPACK_IMPORTED_MODULE_3__.getTransformPointBuckets)((0,_shape_get_centroid_js__WEBPACK_IMPORTED_MODULE_4__.getCentroid)(ls)));
    for (const edgeHashes of edgeHashess) {
        for (const h of edgeHashes) {
            const n = connections.get(h) || 0;
            connections.set(h, n + 1);
        }
    }
}



/***/ }),

/***/ "../src/to-shapes/scale-transform-points-map.ts":
/*!******************************************************!*\
  !*** ../src/to-shapes/scale-transform-points-map.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   scaleTransformPointsMaps: () => (/* binding */ scaleTransformPointsMaps)
/* harmony export */ });
/* harmony import */ var _vector_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector/scale.js */ "../src/vector/scale.ts");

function scaleTransformPointsMaps(shapeSize, transformPointsMaps) {
    const maps = [];
    for (const m of transformPointsMaps) {
        const map = new Map();
        for (const [k, pt] of m) {
            map.set(k, {
                ...pt,
                v: (0,_vector_scale_js__WEBPACK_IMPORTED_MODULE_0__.scaleVector)(shapeSize)(pt.v)
            });
        }
        maps.push(map);
    }
    return maps;
}



/***/ }),

/***/ "../src/to-shapes/to-shapes.ts":
/*!*************************************!*\
  !*** ../src/to-shapes/to-shapes.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toShapes: () => (/* binding */ toShapes)
/* harmony export */ });
/* harmony import */ var _to_entities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../to-entities.js */ "../src/to-entities.ts");
/* harmony import */ var _shapes_get_transform_points_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/get-transform-points.js */ "../src/shapes/get-transform-points.ts");
/* harmony import */ var _get_seed_shapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-seed-shapes.js */ "../src/to-shapes/get-seed-shapes.ts");
/* harmony import */ var _scale_transform_points_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scale-transform-points-map.js */ "../src/to-shapes/scale-transform-points-map.ts");
/* harmony import */ var _hash_ceate_buckets_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hash/ceate-buckets.js */ "../src/hash/ceate-buckets.ts");
/* harmony import */ var _shapes_get_new_shapes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shapes/get-new-shapes.js */ "../src/shapes/get-new-shapes.ts");
/* harmony import */ var _transform_using_transform_point_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transform-using-transform-point.js */ "../src/to-shapes/transform-using-transform-point.ts");
/* harmony import */ var _transform_using_origin_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transform-using-origin.js */ "../src/to-shapes/transform-using-origin.ts");
/* harmony import */ var _vector_scale_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../vector/scale.js */ "../src/vector/scale.ts");









/**
 * Returns a regular polygon tesselation according to the given GomJauHogg
 * notation.
 *
 * The return value is an object with the following properties:
 * * `shapes` - the returned shape object array, each having the following properties:
 *   * `c` -> centroid of shape given as `[x,y]`
 *   * `θm` -> angle shape sits at given as `θm === θ*12/PI` where θ is in radians
 *   * `sides` -> number of sides (3,4,6,8 or 12)
 *   * `stage` -> the transformation stage
 *   * `stagePlacement` -> placement stage as determined by seed shapes
 * * `maxStage` -> can be used to color shapes
 * * `maxStagePlacement` -> can be used to color shapes
 * * `transformPointsMaps` -> can be used to display transformation points
 *
 * @param options an object with the properties of `configuration` which is a
 * string in the GomJauHogg notation (e.g. `6-4-3,3/m30/r(h1)`), `repeatCount`
 * which is the number of times transforms will be repeated (e.g. 10); the number
 * of shapes grow as the square of this number and finally `shapeSize` representing
 * the length of each shape's edge.
 */
function toShapes(configuration, repeatCount, shapeSize) {
    const startTime = performance.now();
    const buckets = (0,_hash_ceate_buckets_js__WEBPACK_IMPORTED_MODULE_4__.createBuckets)();
    const { transforms } = (0,_to_entities_js__WEBPACK_IMPORTED_MODULE_0__.toEntities)(configuration);
    let { shapes, maxStagePlacement } = (0,_get_seed_shapes_js__WEBPACK_IMPORTED_MODULE_2__.getSeedShapes)(configuration);
    shapes = [(0,_shapes_get_new_shapes_js__WEBPACK_IMPORTED_MODULE_5__.getNewShapes)(buckets, shapes.flat())];
    const transformPointsMaps = [];
    // ------------------------------
    // Repeating the Transformations
    // ------------------------------
    let transformPoints = new Map();
    let newShapesGrow = shapes.flat().slice();
    let newShapesFill = shapes.flat().slice();
    let prevWasFill = true;
    let prevWasGrow = true;
    for (let i = 0; i < repeatCount; i++) {
        for (let j = 0; j < transforms.length; j++) {
            const transform = transforms[j];
            if (i === 0) {
                transformPoints = (0,_shapes_get_transform_points_js__WEBPACK_IMPORTED_MODULE_1__.getTransformPoints)(shapes.flat());
                transformPointsMaps.push(transformPoints);
            }
            else {
                transformPoints = transformPointsMaps[j];
            }
            const { pointIndex, angle } = transform;
            const addedShapes = !!pointIndex
                ? (0,_transform_using_transform_point_js__WEBPACK_IMPORTED_MODULE_6__.transformUsingTransformPoint)(buckets, newShapesFill, transform, transformPoints)
                : (0,_transform_using_origin_js__WEBPACK_IMPORTED_MODULE_7__.transformUsingOrigin)(buckets, newShapesGrow, transform);
            const isGrow = !!pointIndex || angle === 12;
            if (!prevWasFill && !isGrow) {
                newShapesFill = addedShapes.slice();
            }
            else {
                for (const s of addedShapes) {
                    newShapesFill.push(s);
                }
            }
            if (!prevWasGrow && isGrow) {
                newShapesGrow = addedShapes.slice();
            }
            else {
                for (const s of addedShapes) {
                    newShapesGrow.push(s);
                }
            }
            shapes.push(addedShapes);
            prevWasFill = !isGrow;
            prevWasGrow = isGrow;
        }
    }
    const shapes_ = shapes
        .flat().map(shape => {
        const { c, sides, stage, stagePlacement, θm } = shape;
        return {
            sides, stage, stagePlacement, θm,
            c: (0,_vector_scale_js__WEBPACK_IMPORTED_MODULE_8__.scaleVector)(shapeSize)(c)
        };
    });
    const lastShapes = shapes[shapes.length - 1];
    const lastShape = lastShapes[lastShapes.length - 1];
    const maxStage = lastShape ? lastShape.stage : 0;
    const transformPointsMaps_ = (0,_scale_transform_points_map_js__WEBPACK_IMPORTED_MODULE_3__.scaleTransformPointsMaps)(shapeSize, transformPointsMaps);
    ///////////////////
    const endTime = performance.now();
    // console.log('l', shapes_.length);
    // console.log(((endTime - startTime)).toFixed(1) + ' ms')
    ///////////////////
    const r = {
        shapes: shapes_,
        maxStage,
        maxStagePlacement,
        transformPointsMaps: transformPointsMaps_
    };
    // console.log(r)
    return r;
}

// Recorded timings
// ================
// 6-4-3,3/m30/r(h1)
// -----------------
// repeatCount: 1   -> time: 0.5 ms   -> #shapes: 36
// repeatCount: 4   -> time: 0.7 ms   -> #shapes: 696
// repeatCount: 16  -> time: 8.1 ms   -> #shapes: 11445
// repeatCount: 25  -> time: 17.7 ms  -> #shapes: 28014
// repeatCount: 64  -> time: 111.7 ms -> #shapes: 184038
// repeatCount: 100 -> time: 318 ms   -> #shapes: 449570
// repeatCount: 128 -> time: 477.5 ms -> #shapes: 736736
// repeatCount: 150 -> time: 751 ms   -> #shapes: 1011864
// repeatCount: 200 -> time: 1395 ms  -> #shapes: 1799162
// repeatCount: 256 -> time: 2100 ms  -> #shapes: 2948054
// This shows that for `n === repeatCount` the number of shapes grow as `O(n^2)`
// and the time grows as `O(n^2)` as well so that:
// The algorithm is linear in the number of shapes, i.e. `toShapes ~ O(n)`


/***/ }),

/***/ "../src/to-shapes/transform-using-origin.ts":
/*!**************************************************!*\
  !*** ../src/to-shapes/transform-using-origin.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   transformUsingOrigin: () => (/* binding */ transformUsingOrigin)
/* harmony export */ });
/* harmony import */ var _shapes_rotate_shapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/rotate-shapes.js */ "../src/shapes/rotate-shapes.ts");
/* harmony import */ var _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector/zero-vector.js */ "../src/vector/zero-vector.ts");
/* harmony import */ var _shapes_reflect_shapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shapes/reflect-shapes.js */ "../src/shapes/reflect-shapes.ts");
/* harmony import */ var _shapes_get_new_shapes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shapes/get-new-shapes.js */ "../src/shapes/get-new-shapes.ts");




const { round } = Math;
function transformUsingOrigin(buckets, newShapesGrow, transform) {
    const { angle, transformType } = transform;
    const relevantShapes = newShapesGrow.slice();
    const addedShapes = [];
    const θm = round(angle);
    for (let θ = θm; θ <= 24; θ *= 2) {
        const θ2 = -(θ - 6);
        const shapesToAdd = transformType === 'm'
            ? (0,_shapes_reflect_shapes_js__WEBPACK_IMPORTED_MODULE_2__.reflectShapes)(2 * θ2, _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_1__.zeroVector, relevantShapes)
            : (0,_shapes_rotate_shapes_js__WEBPACK_IMPORTED_MODULE_0__.rotateShapesAround)(θ, _vector_zero_vector_js__WEBPACK_IMPORTED_MODULE_1__.zeroVector, relevantShapes);
        const newShapes = (0,_shapes_get_new_shapes_js__WEBPACK_IMPORTED_MODULE_3__.getNewShapes)(buckets, shapesToAdd);
        for (const s of newShapes) {
            addedShapes.push(s);
            relevantShapes.push(s);
        }
        ;
    }
    return addedShapes;
}



/***/ }),

/***/ "../src/to-shapes/transform-using-transform-point.ts":
/*!***********************************************************!*\
  !*** ../src/to-shapes/transform-using-transform-point.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   transformUsingTransformPoint: () => (/* binding */ transformUsingTransformPoint)
/* harmony export */ });
/* harmony import */ var _shapes_rotate_shapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/rotate-shapes.js */ "../src/shapes/rotate-shapes.ts");
/* harmony import */ var _shapes_reflect_shapes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/reflect-shapes.js */ "../src/shapes/reflect-shapes.ts");
/* harmony import */ var _shapes_get_new_shapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shapes/get-new-shapes.js */ "../src/shapes/get-new-shapes.ts");



function transformUsingTransformPoint(buckets, newShapesFill, transform, transformPoints) {
    const { pointIndex, transformType } = transform;
    const transformPoint = transformPoints.get(pointIndex);
    const { v, θ2 } = transformPoint;
    // https://www.mdpi.com/2073-8994/13/12/2376
    // "When specifying the vertex of a polygon’s centroid (Figure 11) or
    // vertex (Figure 12), the angle that is used for the transformation is
    // inferred from the angle of that vertex relative to the center of the
    // coordinate system. However, when using the midpoint of a line segment
    // (the polygon’s edge, as shown in Figure 10, right), the angle for the
    // transform is inferred from the angle of that edge..."
    const shapesToAdd = transformType === 'm'
        ? (0,_shapes_reflect_shapes_js__WEBPACK_IMPORTED_MODULE_1__.reflectShapes)(θ2, v, newShapesFill)
        : (0,_shapes_rotate_shapes_js__WEBPACK_IMPORTED_MODULE_0__.rotateShapesAround)(12, v, newShapesFill);
    return (0,_shapes_get_new_shapes_js__WEBPACK_IMPORTED_MODULE_2__.getNewShapes)(buckets, shapesToAdd);
}



/***/ }),

/***/ "../src/vector/add-vector.ts":
/*!***********************************!*\
  !*** ../src/vector/add-vector.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addVector: () => (/* binding */ addVector)
/* harmony export */ });
function addVector(v1, v2) {
    return [
        v1[0] + v2[0],
        v1[1] + v2[1]
    ];
}



/***/ }),

/***/ "../src/vector/angle-equals.ts":
/*!*************************************!*\
  !*** ../src/vector/angle-equals.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   angleEquals: () => (/* binding */ angleEquals)
/* harmony export */ });
const { PI, abs } = Math;
const ANGLE_PRECISION = 2 ** -10;
function angleEquals(θa, θb) {
    let d = abs(θa - θb);
    d = d < PI ? d : abs(2 * PI - d);
    return d <= ANGLE_PRECISION;
}



/***/ }),

/***/ "../src/vector/distance-between.ts":
/*!*****************************************!*\
  !*** ../src/vector/distance-between.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   distanceBetween: () => (/* binding */ distanceBetween)
/* harmony export */ });
/* harmony import */ var _zero_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zero-vector.js */ "../src/vector/zero-vector.ts");

const { hypot } = Math;
function distanceBetween(v1, v2 = _zero_vector_js__WEBPACK_IMPORTED_MODULE_0__.zeroVector) {
    return hypot(v1[0] - v2[0], v1[1] - v2[1]);
}



/***/ }),

/***/ "../src/vector/get-angle-clockwise-from-y-axis.ts":
/*!********************************************************!*\
  !*** ../src/vector/get-angle-clockwise-from-y-axis.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAngleClockwiseFromYAxis: () => (/* binding */ getAngleClockwiseFromYAxis)
/* harmony export */ });
const { PI, atan2 } = Math;
function getAngleClockwiseFromYAxis(v) {
    const [x, y] = v;
    const θ = (2 * PI) - (atan2(y, x) - PI / 2 + 2 * PI) % (2 * PI);
    return θ;
}



/***/ }),

/***/ "../src/vector/reflect-vector.ts":
/*!***************************************!*\
  !*** ../src/vector/reflect-vector.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   reflectVector: () => (/* binding */ reflectVector)
/* harmony export */ });
const { PI, cos, sin } = Math;
function reflectVector(θm, v, p) {
    const cx = v[0];
    const cy = v[1];
    const vx = p[0] - cx;
    const vy = p[1] - cy;
    const cosθ = cos(θm * PI / 12);
    const sinθ = sin(θm * PI / 12);
    return [
        cosθ * vx + sinθ * vy + cx,
        sinθ * vx - cosθ * vy + cy
    ];
}



/***/ }),

/***/ "../src/vector/rotate-vector-around.ts":
/*!*********************************************!*\
  !*** ../src/vector/rotate-vector-around.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rotateVectorAround: () => (/* binding */ rotateVectorAround)
/* harmony export */ });
/* harmony import */ var _zero_vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zero-vector.js */ "../src/vector/zero-vector.ts");

const { PI, sin, cos } = Math;
/**
 * Returns the result of rotating a vector around a specified point.
 *
 * @param θ angle
 * @param c center of rotation
 */
function rotateVectorAround(θm, c = _zero_vector_js__WEBPACK_IMPORTED_MODULE_0__.zeroVector, v) {
    const x = v[0];
    const y = v[1];
    const θ = θm * PI / 12;
    const cosθ = cos(θ);
    const sinθ = sin(θ);
    const [cx, cy] = c;
    const vx = x - cx;
    const vy = y - cy;
    return [
        cosθ * vx - sinθ * vy + cx,
        sinθ * vx + cosθ * vy + cy
    ];
}



/***/ }),

/***/ "../src/vector/scale.ts":
/*!******************************!*\
  !*** ../src/vector/scale.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   scaleVector: () => (/* binding */ scaleVector)
/* harmony export */ });
function scaleVector(s) {
    return (v) => {
        return [s * v[0], s * v[1]];
    };
}



/***/ }),

/***/ "../src/vector/subtract-vector.ts":
/*!****************************************!*\
  !*** ../src/vector/subtract-vector.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   subtractVector: () => (/* binding */ subtractVector)
/* harmony export */ });
/**
 * Returns `v1 - v2`.
 */
function subtractVector(v1, v2) {
    return [
        v1[0] - v2[0],
        v1[1] - v2[1]
    ];
}



/***/ }),

/***/ "../src/vector/zero-vector.ts":
/*!************************************!*\
  !*** ../src/vector/zero-vector.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   zeroVector: () => (/* binding */ zeroVector)
/* harmony export */ });
const zeroVector = [0, 0];



/***/ }),

/***/ "./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

// dispatch for CommonJS interop named imports.

var useState = React.useState,
    useEffect = React.useEffect,
    useLayoutEffect = React.useLayoutEffect,
    useDebugValue = React.useDebugValue;
var didWarnOld18Alpha = false;
var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works
// because of a very particular set of implementation details and assumptions
// -- change any one of them and it will break. The most important assumption
// is that updates are always synchronous, because concurrent rendering is
// only available in versions of React that also have a built-in
// useSyncExternalStore API. And we only use this shim when the built-in API
// does not exist.
//
// Do not assume that the clever hacks used by this hook also work in general.
// The point of this shim is to replace the need for hacks by other libraries.

function useSyncExternalStore(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of
// React do not expose a way to check if we're hydrating. So users of the shim
// will need to track that themselves and return the correct value
// from `getSnapshot`.
getServerSnapshot) {
  {
    if (!didWarnOld18Alpha) {
      if (React.startTransition !== undefined) {
        didWarnOld18Alpha = true;

        error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');
      }
    }
  } // Read the current snapshot from the store on every render. Again, this
  // breaks the rules of React, and only works here because of specific
  // implementation details, most importantly that updates are
  // always synchronous.


  var value = getSnapshot();

  {
    if (!didWarnUncachedGetSnapshot) {
      var cachedValue = getSnapshot();

      if (!objectIs(value, cachedValue)) {
        error('The result of getSnapshot should be cached to avoid an infinite loop');

        didWarnUncachedGetSnapshot = true;
      }
    }
  } // Because updates are synchronous, we don't queue them. Instead we force a
  // re-render whenever the subscribed state changes by updating an some
  // arbitrary useState hook. Then, during render, we call getSnapshot to read
  // the current value.
  //
  // Because we don't actually use the state returned by the useState hook, we
  // can save a bit of memory by storing other stuff in that slot.
  //
  // To implement the early bailout, we need to track some things on a mutable
  // object. Usually, we would put that in a useRef hook, but we can stash it in
  // our useState hook instead.
  //
  // To force a re-render, we call forceUpdate({inst}). That works because the
  // new object always fails an equality check.


  var _useState = useState({
    inst: {
      value: value,
      getSnapshot: getSnapshot
    }
  }),
      inst = _useState[0].inst,
      forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated
  // in the layout phase so we can access it during the tearing check that
  // happens on subscribe.


  useLayoutEffect(function () {
    inst.value = value;
    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the
    // commit phase if there was an interleaved mutation. In concurrent mode
    // this can happen all the time, but even in synchronous mode, an earlier
    // effect may have mutated the store.

    if (checkIfSnapshotChanged(inst)) {
      // Force a re-render.
      forceUpdate({
        inst: inst
      });
    }
  }, [subscribe, value, getSnapshot]);
  useEffect(function () {
    // Check for changes right before subscribing. Subsequent changes will be
    // detected in the subscription handler.
    if (checkIfSnapshotChanged(inst)) {
      // Force a re-render.
      forceUpdate({
        inst: inst
      });
    }

    var handleStoreChange = function () {
      // TODO: Because there is no cross-renderer API for batching updates, it's
      // up to the consumer of this library to wrap their subscription event
      // with unstable_batchedUpdates. Should we try to detect when this isn't
      // the case and print a warning in development?
      // The store changed. Check if the snapshot changed since the last time we
      // read from the store.
      if (checkIfSnapshotChanged(inst)) {
        // Force a re-render.
        forceUpdate({
          inst: inst
        });
      }
    }; // Subscribe to the store and return a clean-up function.


    return subscribe(handleStoreChange);
  }, [subscribe]);
  useDebugValue(value);
  return value;
}

function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  var prevValue = inst.value;

  try {
    var nextValue = latestGetSnapshot();
    return !objectIs(prevValue, nextValue);
  } catch (error) {
    return true;
  }
}

function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
  // Note: The shim does not use getServerSnapshot, because pre-18 versions of
  // React do not expose a way to check if we're hydrating. So users of the shim
  // will need to track that themselves and return the correct value
  // from `getSnapshot`.
  return getSnapshot();
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var isServerEnvironment = !canUseDOM;

var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;

exports.useSyncExternalStore = useSyncExternalStore$2;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "./node_modules/use-sync-external-store/shim/index.js":
/*!************************************************************!*\
  !*** ./node_modules/use-sync-external-store/shim/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (false) {} else {
  module.exports = __webpack_require__(/*! ../cjs/use-sync-external-store-shim.development.js */ "./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js");
}


/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = '';

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (arg) {
				classes = appendClass(classes, parseValue(arg));
			}
		}

		return classes;
	}

	function parseValue (arg) {
		if (typeof arg === 'string' || typeof arg === 'number') {
			return arg;
		}

		if (typeof arg !== 'object') {
			return '';
		}

		if (Array.isArray(arg)) {
			return classNames.apply(null, arg);
		}

		if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
			return arg.toString();
		}

		var classes = '';

		for (var key in arg) {
			if (hasOwn.call(arg, key) && arg[key]) {
				classes = appendClass(classes, key);
			}
		}

		return classes;
	}

	function appendClass (value, newClass) {
		if (!newClass) {
			return value;
		}
	
		if (value) {
			return value + ' ' + newClass;
		}
	
		return value + newClass;
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "./node_modules/d3-color/src/color.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/color.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   Rgb: () => (/* binding */ Rgb),
/* harmony export */   brighter: () => (/* binding */ brighter),
/* harmony export */   darker: () => (/* binding */ darker),
/* harmony export */   "default": () => (/* binding */ color),
/* harmony export */   hsl: () => (/* binding */ hsl),
/* harmony export */   hslConvert: () => (/* binding */ hslConvert),
/* harmony export */   rgb: () => (/* binding */ rgb),
/* harmony export */   rgbConvert: () => (/* binding */ rgbConvert)
/* harmony export */ });
/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ "./node_modules/d3-color/src/define.js");


function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHex8() {
  return this.rgb().formatHex8();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Rgb, rgb, (0,_define_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}

function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}

function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}

function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}

function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}

function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Hsl, hsl, (0,_define_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));

function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}

function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}


/***/ }),

/***/ "./node_modules/d3-color/src/define.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-color/src/define.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   extend: () => (/* binding */ extend)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/basis.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basis.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   basis: () => (/* binding */ basis),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/basisClosed.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basisClosed.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basis.js */ "./node_modules/d3-interpolate/src/basis.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0,_basis_js__WEBPACK_IMPORTED_MODULE_0__.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/color.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/color.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ nogamma),
/* harmony export */   gamma: () => (/* binding */ gamma),
/* harmony export */   hue: () => (/* binding */ hue)
/* harmony export */ });
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-interpolate/src/constant.js");


function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/constant.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/constant.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (x => () => x);


/***/ }),

/***/ "./node_modules/d3-interpolate/src/rgb.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/rgb.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rgbBasis: () => (/* binding */ rgbBasis),
/* harmony export */   rgbBasisClosed: () => (/* binding */ rgbBasisClosed)
/* harmony export */ });
/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-color */ "./node_modules/d3-color/src/color.js");
/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basis.js */ "./node_modules/d3-interpolate/src/basis.js");
/* harmony import */ var _basisClosed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basisClosed.js */ "./node_modules/d3-interpolate/src/basisClosed.js");
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ "./node_modules/d3-interpolate/src/color.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((function rgbGamma(y) {
  var color = (0,_color_js__WEBPACK_IMPORTED_MODULE_0__.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(start)).r, (end = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0,_color_js__WEBPACK_IMPORTED_MODULE_0__["default"])(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1));

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
var rgbBasisClosed = rgbSpline(_basisClosed_js__WEBPACK_IMPORTED_MODULE_3__["default"]);


/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/colors.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/colors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}


/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/RdBu.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdBu.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   scheme: () => (/* binding */ scheme)
/* harmony export */ });
/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ "./node_modules/d3-scale-chromatic/src/colors.js");
/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ "./node_modules/d3-scale-chromatic/src/ramp.js");



var scheme = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ramp_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scheme));


/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/Spectral.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/Spectral.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   scheme: () => (/* binding */ scheme)
/* harmony export */ });
/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ "./node_modules/d3-scale-chromatic/src/colors.js");
/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ "./node_modules/d3-scale-chromatic/src/ramp.js");



var scheme = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ramp_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scheme));


/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/ramp.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/ramp.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/rgb.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (scheme => (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.rgbBasis)(scheme[scheme.length - 1]));


/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   scheme: () => (/* binding */ scheme)
/* harmony export */ });
/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ "./node_modules/d3-scale-chromatic/src/colors.js");
/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ "./node_modules/d3-scale-chromatic/src/ramp.js");



var scheme = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ramp_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scheme));


/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   inferno: () => (/* binding */ inferno),
/* harmony export */   magma: () => (/* binding */ magma),
/* harmony export */   plasma: () => (/* binding */ plasma)
/* harmony export */ });
/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ "./node_modules/d3-scale-chromatic/src/colors.js");


function ramp(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ramp((0,_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"])("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")));

var magma = ramp((0,_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"])("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp((0,_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"])("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp((0,_colors_js__WEBPACK_IMPORTED_MODULE_0__["default"])("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));


/***/ }),

/***/ "./node_modules/regexparam/dist/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/regexparam/dist/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   inject: () => (/* binding */ inject),
/* harmony export */   parse: () => (/* binding */ parse)
/* harmony export */ });
/**
 * @param {string|RegExp} input The route pattern
 * @param {boolean} [loose] Allow open-ended matching. Ignored with `RegExp` input.
 */
function parse(input, loose) {
	if (input instanceof RegExp) return { keys:false, pattern:input };
	var c, o, tmp, ext, keys=[], pattern='', arr = input.split('/');
	arr[0] || arr.shift();

	while (tmp = arr.shift()) {
		c = tmp[0];
		if (c === '*') {
			keys.push(c);
			pattern += tmp[1] === '?' ? '(?:/(.*))?' : '/(.*)';
		} else if (c === ':') {
			o = tmp.indexOf('?', 1);
			ext = tmp.indexOf('.', 1);
			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
		} else {
			pattern += '/' + tmp;
		}
	}

	return {
		keys: keys,
		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
	};
}

var RGX = /(\/|^)([:*][^/]*?)(\?)?(?=[/.]|$)/g;

// error if key missing?
function inject(route, values) {
	return route.replace(RGX, (x, lead, key, optional) => {
		x = values[key=='*' ? key : key.substring(1)];
		return x ? '/'+x : (optional || key=='*') ? '' : '/' + key;
	});
}


/***/ }),

/***/ "./node_modules/wouter/esm/index.js":
/*!******************************************!*\
  !*** ./node_modules/wouter/esm/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Link: () => (/* binding */ Link),
/* harmony export */   Redirect: () => (/* binding */ Redirect),
/* harmony export */   Route: () => (/* binding */ Route),
/* harmony export */   Router: () => (/* binding */ Router),
/* harmony export */   Switch: () => (/* binding */ Switch),
/* harmony export */   useLocation: () => (/* binding */ useLocation),
/* harmony export */   useParams: () => (/* binding */ useParams),
/* harmony export */   useRoute: () => (/* binding */ useRoute),
/* harmony export */   useRouter: () => (/* binding */ useRouter),
/* harmony export */   useSearch: () => (/* binding */ useSearch)
/* harmony export */ });
/* harmony import */ var regexparam__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regexparam */ "./node_modules/regexparam/dist/index.mjs");
/* harmony import */ var _use_browser_location_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-browser-location.js */ "./node_modules/wouter/esm/use-browser-location.js");
/* harmony import */ var _react_deps_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./react-deps.js */ "./node_modules/wouter/esm/react-deps.js");




/*
 * Transforms `path` into its relative `base` version
 * If base isn't part of the path provided returns absolute path e.g. `~/app`
 */
const relativePath = (base = "", path) =>
  !path.toLowerCase().indexOf(base.toLowerCase())
    ? path.slice(base.length) || "/"
    : "~" + path;

const absolutePath = (to, base = "") =>
  to[0] === "~" ? to.slice(1) : base + to;

/*
 * Removes leading question mark
 */
const stripQm = (str) => (str[0] === "?" ? str.slice(1) : str);

/*
 * decodes escape sequences such as %20
 */
const unescape = (str) => {
  try {
    return decodeURI(str);
  } catch (_e) {
    // fail-safe mode: if string can't be decoded do nothing
    return str;
  }
};

/*
 * Router and router context. Router is a lightweight object that represents the current
 * routing options: how location is managed, base path etc.
 *
 * There is a default router present for most of the use cases, however it can be overridden
 * via the <Router /> component.
 */

const defaultRouter = {
  hook: _use_browser_location_js__WEBPACK_IMPORTED_MODULE_1__.useBrowserLocation,
  searchHook: _use_browser_location_js__WEBPACK_IMPORTED_MODULE_1__.useSearch,
  parser: regexparam__WEBPACK_IMPORTED_MODULE_0__.parse,
  base: "",
  // this option is used to override the current location during SSR
  ssrPath: undefined,
  ssrSearch: undefined,
  // customizes how `href` props are transformed for <Link />
  hrefs: (x) => x,
};

const RouterCtx = (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createContext)(defaultRouter);

// gets the closest parent router from the context
const useRouter = () => (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useContext)(RouterCtx);

/**
 * Parameters context. Used by `useParams()` to get the
 * matched params from the innermost `Route` component.
 */

const ParamsCtx = (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createContext)({});

const useParams = () => (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useContext)(ParamsCtx);

/*
 * Part 1, Hooks API: useRoute and useLocation
 */

// Internal version of useLocation to avoid redundant useRouter calls

const useLocationFromRouter = (router) => {
  const [location, navigate] = router.hook(router);

  // the function reference should stay the same between re-renders, so that
  // it can be passed down as an element prop without any performance concerns.
  // (This is achieved via `useEvent`.)
  return [
    unescape(relativePath(router.base, location)),
    (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useEvent)((to, navOpts) => navigate(absolutePath(to, router.base), navOpts)),
  ];
};

const useLocation = () => useLocationFromRouter(useRouter());

const useSearch = () => {
  const router = useRouter();
  return unescape(stripQm(router.searchHook(router)));
};

const matchRoute = (parser, route, path, loose) => {
  // when parser is in "loose" mode, `$base` is equal to the
  // first part of the route that matches the pattern
  // (e.g. for pattern `/a/:b` and path `/a/1/2/3` the `$base` is `a/1`)
  // we use this for route nesting
  const { pattern, keys } = parser(route || "*", loose);
  const [$base, ...matches] = pattern.exec(path) || [];

  return $base !== undefined
    ? [
        true,

        // an object with parameters matched, e.g. { foo: "bar" } for "/:foo"
        // we "zip" two arrays here to construct the object
        // ["foo"], ["bar"] → { foo: "bar" }
        Object.fromEntries(keys.map((key, i) => [key, matches[i]])),

        // the third value if only present when parser is in "loose" mode,
        // so that we can extract the base path for nested routes
        ...(loose ? [$base] : []),
      ]
    : [false, null];
};

const useRoute = (pattern) =>
  matchRoute(useRouter().parser, pattern, useLocation()[0]);

/*
 * Part 2, Low Carb Router API: Router, Route, Link, Switch
 */

const Router = ({ children, ...props }) => {
  // the router we will inherit from - it is the closest router in the tree,
  // unless the custom `hook` is provided (in that case it's the default one)
  const parent_ = useRouter();
  const parent = props.hook ? defaultRouter : parent_;

  // holds to the context value: the router object
  let value = parent;

  // when `ssrPath` contains a `?` character, we can extract the search from it
  const [path, search] = props.ssrPath?.split("?") ?? [];
  if (search) (props.ssrSearch = search), (props.ssrPath = path);

  // hooks can define their own `href` formatter (e.g. for hash location)
  props.hrefs = props.hrefs ?? props.hook?.hrefs;

  // what is happening below: to avoid unnecessary rerenders in child components,
  // we ensure that the router object reference is stable, unless there are any
  // changes that require reload (e.g. `base` prop changes -> all components that
  // get the router from the context should rerender, even if the component is memoized).
  // the expected behaviour is:
  //
  //   1) when the resulted router is no different from the parent, use parent
  //   2) if the custom `hook` prop is provided, we always inherit from the
  //      default router instead. this resets all previously overridden options.
  //   3) when the router is customized here, it should stay stable between renders
  let ref = (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useRef)({}),
    prev = ref.current,
    next = prev;

  for (let k in parent) {
    const option =
      k === "base"
        ? /* base is special case, it is appended to the parent's base */
          parent[k] + (props[k] || "")
        : props[k] || parent[k];

    if (prev === next && option !== next[k]) {
      ref.current = next = { ...next };
    }

    next[k] = option;

    // the new router is no different from the parent, use parent
    if (option !== parent[k]) value = next;
  }

  return (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createElement)(RouterCtx.Provider, { value, children });
};

const h_route = ({ children, component }, params) => {
  // React-Router style `component` prop
  if (component) return (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createElement)(component, { params });

  // support render prop or plain children
  return typeof children === "function" ? children(params) : children;
};

const Route = ({ path, nest, match, ...renderProps }) => {
  const router = useRouter();
  const [location] = useLocationFromRouter(router);

  const [matches, params, base] =
    // `match` is a special prop to give up control to the parent,
    // it is used by the `Switch` to avoid double matching
    match ?? matchRoute(router.parser, path, location, nest);

  if (!matches) return null;

  const children = base
    ? (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createElement)(Router, { base }, h_route(renderProps, params))
    : h_route(renderProps, params);

  return (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createElement)(ParamsCtx.Provider, { value: params, children });
};

const Link = (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.forwardRef)((props, ref) => {
  const router = useRouter();
  const [currentPath, navigate] = useLocationFromRouter(router);

  const {
    to,
    href: targetPath = to,
    onClick: _onClick,
    asChild,
    children,
    className: cls,
    /* eslint-disable no-unused-vars */
    replace /* ignore nav props */,
    state /* ignore nav props */,
    /* eslint-enable no-unused-vars */

    ...restProps
  } = props;

  const onClick = (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useEvent)((event) => {
    // ignores the navigation when clicked using right mouse button or
    // by holding a special modifier key: ctrl, command, win, alt, shift
    if (
      event.ctrlKey ||
      event.metaKey ||
      event.altKey ||
      event.shiftKey ||
      event.button !== 0
    )
      return;

    _onClick?.(event);
    if (!event.defaultPrevented) {
      event.preventDefault();
      navigate(targetPath, props);
    }
  });

  // handle nested routers and absolute paths
  const href = router.hrefs(
    targetPath[0] === "~" ? targetPath.slice(1) : router.base + targetPath,
    router // pass router as a second argument for convinience
  );

  return asChild && (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.isValidElement)(children)
    ? (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.cloneElement)(children, { onClick, href })
    : (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.createElement)("a", {
        ...restProps,
        onClick,
        href,
        // `className` can be a function to apply the class if this link is active
        className: cls?.call ? cls(currentPath === targetPath) : cls,
        children,
        ref,
      });
});

const flattenChildren = (children) =>
  Array.isArray(children)
    ? children.flatMap((c) =>
        flattenChildren(c && c.type === _react_deps_js__WEBPACK_IMPORTED_MODULE_2__.Fragment ? c.props.children : c)
      )
    : [children];

const Switch = ({ children, location }) => {
  const router = useRouter();
  const [originalLocation] = useLocationFromRouter(router);

  for (const element of flattenChildren(children)) {
    let match = 0;

    if (
      (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.isValidElement)(element) &&
      // we don't require an element to be of type Route,
      // but we do require it to contain a truthy `path` prop.
      // this allows to use different components that wrap Route
      // inside of a switch, for example <AnimatedRoute />.
      (match = matchRoute(
        router.parser,
        element.props.path,
        location || originalLocation,
        element.props.nest
      ))[0]
    )
      return (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.cloneElement)(element, { match });
  }

  return null;
};

const Redirect = (props) => {
  const { to, href = to } = props;
  const [, navigate] = useLocation();
  const redirect = (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useEvent)(() => navigate(to || href, props));

  // redirect is guaranteed to be stable since it is returned from useEvent
  (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    redirect();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  return null;
};




/***/ }),

/***/ "./node_modules/wouter/esm/react-deps.js":
/*!***********************************************!*\
  !*** ./node_modules/wouter/esm/react-deps.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fragment: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.Fragment),
/* harmony export */   cloneElement: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement),
/* harmony export */   createContext: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.createContext),
/* harmony export */   createElement: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.createElement),
/* harmony export */   forwardRef: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef),
/* harmony export */   isValidElement: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement),
/* harmony export */   useContext: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.useContext),
/* harmony export */   useEvent: () => (/* binding */ useEvent),
/* harmony export */   useInsertionEffect: () => (/* binding */ useInsertionEffect),
/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect),
/* harmony export */   useRef: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.useRef),
/* harmony export */   useState: () => (/* reexport safe */ react__WEBPACK_IMPORTED_MODULE_0__.useState),
/* harmony export */   useSyncExternalStore: () => (/* reexport safe */ use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ "./node_modules/use-sync-external-store/shim/index.js");




const {
  useEffect,
  useLayoutEffect,
  useRef,
} = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)));

// React.useInsertionEffect is not available in React <18
// This hack fixes a transpilation issue on some apps
const useBuiltinInsertionEffect = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)))['useInsertion' + 'Effect'];

// Copied from:
// https://github.com/facebook/react/blob/main/packages/shared/ExecutionEnvironment.js
const canUseDOM = !!(
  typeof window !== "undefined" &&
  typeof window.document !== "undefined" &&
  typeof window.document.createElement !== "undefined"
);

// Copied from:
// https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.ts
// "React currently throws a warning when using useLayoutEffect on the server.
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser."
const useIsomorphicLayoutEffect = canUseDOM
  ? useLayoutEffect
  : useEffect;

// useInsertionEffect is already a noop on the server.
// See: https://github.com/facebook/react/blob/main/packages/react-server/src/ReactFizzHooks.js
const useInsertionEffect =
  useBuiltinInsertionEffect || useIsomorphicLayoutEffect;

// Userland polyfill while we wait for the forthcoming
// https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md
// Note: "A high-fidelity polyfill for useEvent is not possible because
// there is no lifecycle or Hook in React that we can use to switch
// .current at the right timing."
// So we will have to make do with this "close enough" approach for now.
const useEvent = (fn) => {
  const ref = useRef([fn, (...args) => ref[0](...args)]).current;
  // Per Dan Abramov: useInsertionEffect executes marginally closer to the
  // correct timing for ref synchronization than useLayoutEffect on React 18.
  // See: https://github.com/facebook/react/pull/25881#issuecomment-1356244360
  useInsertionEffect(() => {
    ref[0] = fn;
  });
  return ref[1];
};




/***/ }),

/***/ "./node_modules/wouter/esm/use-browser-location.js":
/*!*********************************************************!*\
  !*** ./node_modules/wouter/esm/use-browser-location.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   navigate: () => (/* binding */ navigate),
/* harmony export */   useBrowserLocation: () => (/* binding */ useBrowserLocation),
/* harmony export */   useHistoryState: () => (/* binding */ useHistoryState),
/* harmony export */   useLocationProperty: () => (/* binding */ useLocationProperty),
/* harmony export */   usePathname: () => (/* binding */ usePathname),
/* harmony export */   useSearch: () => (/* binding */ useSearch)
/* harmony export */ });
/* harmony import */ var _react_deps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./react-deps.js */ "./node_modules/wouter/esm/react-deps.js");


/**
 * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History
 */
const eventPopstate = "popstate";
const eventPushState = "pushState";
const eventReplaceState = "replaceState";
const eventHashchange = "hashchange";
const events = [
  eventPopstate,
  eventPushState,
  eventReplaceState,
  eventHashchange,
];

const subscribeToLocationUpdates = (callback) => {
  for (const event of events) {
    addEventListener(event, callback);
  }
  return () => {
    for (const event of events) {
      removeEventListener(event, callback);
    }
  };
};

const useLocationProperty = (fn, ssrFn) =>
  (0,_react_deps_js__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribeToLocationUpdates, fn, ssrFn);

const currentSearch = () => location.search;

const useSearch = ({ ssrSearch = "" } = {}) =>
  useLocationProperty(currentSearch, () => ssrSearch);

const currentPathname = () => location.pathname;

const usePathname = ({ ssrPath } = {}) =>
  useLocationProperty(
    currentPathname,
    ssrPath ? () => ssrPath : currentPathname
  );

const currentHistoryState = () => history.state;
const useHistoryState = () =>
  useLocationProperty(currentHistoryState, () => null);

const navigate = (to, { replace = false, state = null } = {}) =>
  history[replace ? eventReplaceState : eventPushState](state, "", to);

// the 2nd argument of the `useBrowserLocation` return value is a function
// that allows to perform a navigation.
const useBrowserLocation = (opts = {}) => [usePathname(opts), navigate];

const patchKey = Symbol.for("wouter_v3");

// While History API does have `popstate` event, the only
// proper way to listen to changes via `push/replaceState`
// is to monkey-patch these methods.
//
// See https://stackoverflow.com/a/4585031
if (typeof history !== "undefined" && typeof window[patchKey] === "undefined") {
  for (const type of [eventPushState, eventReplaceState]) {
    const original = history[type];
    // TODO: we should be using unstable_batchedUpdates to avoid multiple re-renders,
    // however that will require an additional peer dependency on react-dom.
    // See: https://github.com/reactwg/react-18/discussions/86#discussioncomment-1567149
    history[type] = function () {
      const result = original.apply(this, arguments);
      const event = new Event(type);
      event.arguments = arguments;

      dispatchEvent(event);
      return result;
    };
  }

  // patch history object only once
  // See: https://github.com/molefrog/wouter/issues/167
  Object.defineProperty(window, patchKey, { value: true });
}




/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		id: moduleId,
/******/ 		loaded: false,
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Flag the module as loaded
/******/ 	module.loaded = true;
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/create fake namespace object */
/******/ (() => {
/******/ 	var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 	var leafPrototypes;
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 16: return value when it's Promise-like
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = this(value);
/******/ 		if(mode & 8) return value;
/******/ 		if(typeof value === 'object' && value) {
/******/ 			if((mode & 4) && value.__esModule) return value;
/******/ 			if((mode & 16) && typeof value.then === 'function') return value;
/******/ 		}
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		var def = {};
/******/ 		leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 		for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 			Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 		}
/******/ 		def['default'] = () => (value);
/******/ 		__webpack_require__.d(ns, def);
/******/ 		return ns;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__webpack_require__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/node module decorator */
/******/ (() => {
/******/ 	__webpack_require__.nmd = (module) => {
/******/ 		module.paths = [];
/******/ 		if (!module.children) module.children = [];
/******/ 		return module;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/nonce */
/******/ (() => {
/******/ 	__webpack_require__.nc = undefined;
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/index.tsx ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
Object(function webpackMissingModule() { var e = new Error("Cannot find module 'react-dom/client.js'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
/* harmony import */ var _components_root_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/root.js */ "./src/components/root.tsx");



const container = document.getElementById('app');
const root = Object(function webpackMissingModule() { var e = new Error("Cannot find module 'react-dom/client.js'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(container);
root.render(react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_root_js__WEBPACK_IMPORTED_MODULE_2__.Root, null));

})();


//# sourceMappingURL=data:application/json;charset=utf-8;base64,